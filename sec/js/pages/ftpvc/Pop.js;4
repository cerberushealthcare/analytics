/**
 * Popup Controller 
 */
var Pop = {
  // 
  POS_CENTER:1,
  POS_LAST:2,
  POS_CURSOR:3,
  //
  _pop:null,
  _unders:[],
  _lastPos:null,
  _curtain:null,
  _event:null,
  _POS_RESTORE:9,
  /*
   * Show popup
   * @arg 'id'/<div> div of popup   
   * @arg 'id'/<e> foc element to receive focus (optional) 
   * @arg int pos Pop.POS_ (optional, default POS_CENTER)
   */
  show:function(div, foc, pos) {
    if (pos != Pop._POS_RESTORE && Pop._pop) 
      Pop._unders.push(Pop._pop);
    Pop._pop = $_(div);
    if (Pop._pop.pp == null) 
      Pop._setProps(Pop._pop);
    Pop._showCurtainAndPop(Pop._pop);
    Pop._setPos(Pop._pop, pos);
    if (foc)
      focus_($_(foc));
    else if (Pop._pop.cap && Pop._pop.cap.box)
      focus_(Pop._pop.cap.box);
    hidePageScroll();
    Pop._event = null;
  },
  showPosCursor:function(div, focusId) {
    Pop.show(div, focusId, Pop.POS_CURSOR);
  },
  showPosLast:function(div, focusId) {
    Pop.show(div, focusId, Pop.POS_LAST);
  },
  /*
   * Zoom popup
   * @callback() when complete (optional)
   */
  zoom:function(div, focusId, callback) {
    Pop.show(div, focusId, Pop.POS_CURSOR);
    if (callback)
      callback();
  },
  /*
   * Close currently displayed popup
   */
  close:function() {
    var p = Pop._pop;
    if (p) {
      p.style.display = 'none';
      Pop._pop = null;
      if (Pop._unders.length) {
        p = Pop._unders.pop();
        Pop.show(p, null, Pop._POS_RESTORE);
      } else {
        Pop._hideCurtain();
        restoreCombos(document);
      }
    }
  },
  closeAll:function() {
    while (Pop._pop)
      Pop.close();
  },
  /*
   * @arg 'id'/<div> div of popup (optional)
   * @return bool true if div is current top pop (when div supplied)
   *              true if any pop is up (when div is omitted)  
   */
  isActive:function(div) {
    if (div) {
      var pop = $_(div);
      return (Pop._pop && pop && Pop._pop.id == pop.id);
    } else {
      return (Pop._pop != null);
    }
  },
  /*
   * Re-center current pop
   */
  center:function() {
    if (Pop._pop)
      Pop._setPosCenter(Pop._pop);
  },
  /*
   * @arg 'id'/<div> div of popup
   * @arg string text (optional)
   */
  setCaption:function(div, text) {
    $_(div).innerText = (isBlank(text)) ? 'Clicktate' : 'Clicktate - ' + text;
  },
  //
  _closeByControlBox:function() {
    var p = Pop._pop;
    if (p) {
      if (p.cap && p.cap.box) {
        p.cap.box.click();
      } else {
        Pop.close();
      }
    }
  },
  _closeByEventKey:function() {
    if (event && event.keyCode == 27) {
      Pop._closeByControlBox();
    }
  },
  _setProps:function(p) {
    p.pp = 1;
    p.onmousedown = Pop._cancelBubble;
    var tags = $$$$('pop-cap', p, 'DIV');
    if (tags.length == 1) {
      p.cap = tags[0];
      p.cap.onmousedown = Pop._startDrag;
      tags = $$$$('pop-close', Pop._pop.cap, 'A');
      if (tags.length == 1) 
        p.cap.box = tags[0];
    }
  },
  _showCurtainAndPop:function(p) {
    if (Pop._curtain == null) 
      Pop._curtain = $('curtain');
    var c = Pop._curtain;
    if (c.style.display != 'block') {
      var h = document.body.offsetHeight;
      var w = document.body.offsetWidth;
      if (document.documentElement.clientHeight > h) 
        h = document.documentElement.clientHeight;
      if (document.documentElement.clientWidth > w) 
        w = document.documentElement.clientWidth;
      c.style.height = h;
      c.style.width = w;
      c.style.display = 'block';
    }
    p.style.display = 'block';
    Pop._setZIndex();
    hideCombos();
    restoreCombos(p);
  },
  _hideCurtain:function() {
    if (Pop._curtain) {
      Pop._curtain.style.display = 'none';
      showPageScroll();
    }
  },
  _setPos:function(p, pos) {
    if (pos != Pop._POS_RESTORE) {
      if (pos == Pop.POS_LAST && Pop._lastPos) 
        Pop._setPosLast(p);
      else if (pos == Pop.POS_CURSOR) 
        Pop._setPosCursor(p);
      else
        Pop._setPosCenter(p);
      Pop._lastPos = Pop._getPos(p);
    } 
  },
  _setPosCenter:function(p) {
    var top = document.documentElement.clientHeight / 2 - p.clientHeight / 2;
    var left = document.documentElement.clientWidth / 2 - p.clientWidth / 2;
    var width = p.style.width;
    if (top < 0) 
      top = 0;
    if (left < 0) 
      left = 0;
    p.style.width = p.clientWidth;
    p.style.top = top + document.documentElement.scrollTop;
    p.style.left = left + document.documentElement.scrollLeft;
    if (width == "") 
      p.style.width = "";
  },
  _setPosLast:function(p) {
    if (Pop._lastPos == null) 
      Pop._setPosCenter(p);
    else {
      p.style.left = Pop._lastPos.left;
      p.style.top = Pop._lastPos.top;
    }
  },
  _cacheMousePos:function() {
    Pop._event = null;
    if (event) {
      Pop._event = {
        'clientX':event.clientX,
        'clientY':event.clientY};
    }
  },
  _setPosCursor:function(p) {
    var e = (event) ? event : Pop._event;
    if (e == null) 
      Pop._setPosCenter(p);
    else {
      var ac = {
        'x':e.clientX - 50, 
        'y':e.clientY - 30}; 
      var cw = document.body.offsetWidth;
      var ch = document.documentElement.clientHeight;
      if ((ac.x + p.clientWidth) > cw) 
        ac.x = cw - p.clientWidth - 30;
      if ((ac.y + p.clientHeight) > ch) 
        ac.y = ch - p.clientHeight - 5;
      if (ac.x < 0) 
        ac.x = 0;
      if (ac.y < 0) 
        ac.y = 0;
      p.style.top = ac.y + document.documentElement.scrollTop;
      p.style.left = ac.x;
    }
  },
  _getPos:function(p) {
    return {
      'left':p.style.left,
      'top':p.style.top
      };
  },
  _setZIndex:function() {
    var z = 255 + Pop._unders.length * 2;
    if (Pop._curtain)
      Pop._curtain.style.zIndex = z;
    Pop._pop.style.zIndex = z + 1;
  },
  _cancelBubble:function() {
    event.cancelBubble = true;
  },
  _startDrag:function() {
    var p = Pop._pop;
    if (p && event.srcElement.className != 'pop-close') { 
      document.isdrag = true;
      document.mx = event.clientX;
      document.my = event.clientY;
      document.px = p.offsetLeft;
      document.py = p.offsetTop;
      document.onmousemove = Pop._drag;
      document.onmouseup = Pop._endDrag;
    }
  },
  _drag:function() {
    var p = Pop._pop;
    if (p && document.isdrag) {
      p.style.left = document.px + event.clientX - document.mx;
      p.style.top = document.py + event.clientY - document.my;
    }
  },
  _endDrag:function() {
    document.isdrag = false;
    document.onmousemove = null;
    document.onmouseup = null;
  }
}
Pop.Builder = {
  _pop:null,
  _context:null,
  /*
   * Dynamically build a pop:
   *   <div id='[id]' class='pop' ctlbox=<a> content=<div>>
   *     <div class='pop-cap'> 
   *       <div>caption</div>
   *       <a href='[close]' class='pop-close'></a>
   *     </div>
   *     <div class='pop-content'> 
   *     </div>
   *   </div> 
   * @arg obj context pop controller
   * @arg string id of popup <div>
   * @arg string caption
   * @arg string width (optional, default '650px')
   * @arg string/fn close (optional, default 'Pop.close()')
   * @return <div> of pop  
   */
  build:function(context, id, caption, width, close) {
    close = denull(close, 'Pop.close()');
    var pop = $(id);
    if (pop) 
      clearChildren(pop);
    else
      pop = insertTag(createDiv(id, 'pop'), $('page-includes'));
    pop.style.width = denull(width);
    var pcap = createDivIn(pop, 'pop-cap');
    createDivIn(pcap).innerText = caption;
    pop.ctlbox = appendInto(pcap, createAnchor(null, null, 'pop-close', null, null, close, context));
    pop.content = createDivIn(pop, 'pop-content');
    this._pop = pop;
    this._context = context;
    return pop;
  },
  div:function(className, id) {
    var div = createDivIn(this._pop.content, className, id);
    return div;
  },
  entryUl:function() {
    var ul = createList(this._pop.content);
    return ul;
  },
  entryForm:function(firstLabelClass) {
    var ul = this.entryUl();
    var form = new EntryForm(ul, firstLabelClass);
    return form;
  },
  cmdBar:function() {
    var cmdBar = new CmdBar(this._pop.content, null, this._context);
    return cmdBar;
  }
}
/*
 * Invocations
 */
Pop._Loader = {
  JS_PATH:'js/pops/',
  HTML_PATH:'js/pops/inc/',
  TILE_PATH:'js/tiles/',
  //
  get:function(name, hasHtml, fn) {
    Pop._cacheMousePos();
    var inc = [Pop._Loader.JS_PATH + name + '.js'];
    if (hasHtml)
      inc.push(Pop._Loader.HTML_PATH + name + '.php');
    Includer.getWorking(inc, fn);
  }
}
//
Pop.Calendar = {
  /*
   * @arg string value (optional)
   * @callback(value) on calendar save
   */
  show:function(value, callback) {
    Pop._Loader.get('Calendar', true, function() {
      Calendar.pop(value, callback);
    });
  },
  /*
   * @arg string id of textbox
   */
  showFromTextbox:function(id) {
    var textbox = $(id);
    this.show(textbox.value,
      function(text) {
        if (text)
          textbox.value = text;
        focus(id);
      });
  }
}
Pop.Clock = {
  /*
   * @arg string value (optional)
   * @arg bool hourOnly (optional)
   * @callback(value) on clock save
   */
  show:function(value, hourOnly, callback) {
    Pop._Loader.get('Calendar', true, function() {
      Clock.pop(value, hourOnly, callback);
    });
  },
  /*
   * @arg string id of textbox
   * @arg bool hourOnly (optional)
   */
  showFromTextbox:function(id, hourOnly) {
    var textbox = $(id);
    this.show(textbox.value, hourOnly,
      function(text) {
        if (text)
          textbox.value = text;
        focus(id);
      });
  }
}
Pop.Msg = {
  /*
   * @arg string html message text
   * @arg string iconClass 'information'
   * @callback() when closed (optional)
   */
  show:function(html, iconClass, callback) {
    this._callback = callback;
    this._build(html, iconClass);
    Pop.show(this._pop, this._pop.ok);
  },
  showInfo:function(html, callback) {
    this.show(html, 'information', callback);
  },
  showImportant:function(html, callback) {
    this.show(html, 'important', callback);
  },
  showCritical:function(html, callback) {
    this.show(html, 'critical', callback);
  },
  //
  _pOk:function() {
    if (this._callback)
      this._callback();
    Pop.close();
  },
  _pop:null,
  _build:function(html, iconClass) {
    this._pop = Pop.Builder.build(this, 'pop-msg', 'Clicktate');
    Pop.Builder.div(iconClass).innerHTML = html;
    var cmdBar = Pop.Builder.cmdBar();
    this._pop.ok = cmdBar.ok(this._pOk);
  }
}
Pop.Confirm = {
  /*
   * @arg string text 'Are you sure..'
   * @arg string yesCaption 
   * @arg string yesClass (optional, default 'ok')
   * @arg string noCaption 
   * @arg string noClass (optional)
   * @arg bool includeCancel (optional, default false)
   * @arg string iconClass (optional, default 'question')
   * @callback(bool) true=yes, false=no (no callback for 'no' when cancel excluded) 
   */
  show:function(text, yesCaption, yesClass, noCaption, noClass, includeCancel, iconClass, callback) {
    this._callback = callback;
    this._build(text, yesCaption, yesClass, noCaption, noClass, includeCancel, iconClass);
    Pop.show(this._pop, this._pop.yes);
  },
  showImportant:function(text, yesCaption, yesClass, noCaption, noClass, includeCancel, callback) {
    this.show(text, yesCaption, yesClass, noCaption, noClass, includeCancel, 'important', callback);
  },
  showYesNo:function(text, callback) {
    this.show(text, 'Yes', null, 'No', null, false, null, callback);
  },
  showYesNoCancel:function(text, callback) {
    this.show(text, 'Yes', null, 'No', null, true, null, callback);
  },
  showDelete:function(verb, noun, callback) {
    verb = denull(verb, 'delete');
    noun = denull(noun, 'record');
    this.showYesNoCancel('Are you sure you want to ' + verb + ' this ' + noun + '?', callback);
  },
  showDeleteChecked:function(verb, callback) {
    verb = denull(verb, 'delete');
    this.showYesNoCancel('Are you sure you want to ' + verb + ' the checked selection(s)?', callback);
  },
  showDirtyExit:function(callback) {
    var text = 'This record has unsaved changes. Do you want to save before exiting?';
    this.show(text, 'Save and Exit', 'save', "Don't Save, Just Exit", null, true, null,
      function(confirmed) {
        if (confirmed) 
          callback();
        else
          Pop.close();
      });
  },
  /*
   * Close another pop but confirm if entry form has unsaved changes 
   * ex. Pop.Confirm.closeCheckDirty(this, this.form, this.pSave);
   * @arg obj context pop controller
   * @arg EntryForm entryForm
   * @arg fn saveFn, e.g. this.pSave
   */
  closeCheckDirty:function(context, entryForm, saveFn) {
    if (entryForm && entryForm.isRecordChanged()) {
      this.showDirtyExit(function() {
        saveFn.call(context)
      });
    } else {
      Pop.close();
    }
  },
  //
  _pop:null,
  _callback:null,
  _close:function(confirmed) {
    this._callback(confirmed);
    Pop.close();
  },
  _closeYes:function() {
    this._close(true);
  },
  _closeNo:function() {
    if (this._pop.cancel) 
      this._close(false);
    else
      Pop.close();
  },
  _closeCancel:function() {
    Pop.close();
  },
  _build:function(text, yesCap, yesCls, noCap, noCls, incCancel, iconCls) {
    iconCls = denull(iconCls, 'question');
    yesCls = denull(yesCls, 'ok');
    this._pop = Pop.Builder.build(this, 'pop-conf', 'Confirmation Required');
    Pop.Builder.div(iconCls).innerHTML = text;
    var cmdBar = Pop.Builder.cmdBar();
    this._pop.yes = cmdBar.button(yesCap, yesCls, this._closeYes);
    this._pop.no = cmdBar.button(noCap, noCls, this._closeNo);
    this._pop.cancel = (incCancel) ? cmdBar.cancel(this._closeCancel) : null;
  }
}
Pop.Prompt = {
  /*
   * @arg string html prompt text
   * @callback(text) when OK clicked
   */
  show:function(html, callback) {
    this._callback = callback;
    this._build(html);
    Pop.show(this._pop, this._pop.textbox);
  },
  //
  _pOk:function() {
    if (this._callback)
      this._callback(this._pop.textbox.value);
  },
  _pCancel:function() {
    Pop.close();
  },
  //
  _pop:null,
  _callback:null,
  _build:function(html) {
    this._pop = Pop.Builder.build(this, 'pop-prompt', 'Clicktate');
    Pop.Builder.div('question').innerHTML = html;
    this._pop.textbox = appendInto(Pop.Builder.div('mb10'), createTextbox(null, null, 30));
    var cmdBar = Pop.Builder.cmdBar();
    cmdBar.ok(this._pOk);
    cmdBar.cancel(this.p_pCancel);
  }
}
Pop.Working = {
  /*
   * @arg string html text to display (optional, default 'Working')
   * @arg bool locked to hide control box (optional, default false)
   */
  show:function(html, locked) {
    html = denull(html, 'Working');
    this._build();
    if (Pop.isActive(this._pop))
      Pop.close();
    this._bar.innerHTML = html;
    Page.visible(this._pop.ctlbox, locked);
    Pop.show(this._pop);
  },
  close:function() {
    if (Pop.isActive(this._pop))
      Pop.close();
  },
  //
  _pop:null,
  _bar:null,
  _build:function() {
    if (this._pop == null) {
      this._pop = Pop.Builder.build(this, 'pop-work', 'Clicktate', '380px');
      this._bar = Pop.Builder.div('workingbar', 'pop-workingbar');
    }
  }
}
Pop.Log = {
  show:function() {
    Pop._Loader.get('Log', false, function() {
      Log.pop();
    });
  }
}
Pop.Face = {
  zoom:null,
  //
  showAllergies:function(fs, callback) {
  },
  showDiagnoses:function(fs, callback) {
  },
  showMeds:function(fs, callback) {
  },
  showVitals:function(fs, callback) {
  }
}
Pop.Patient = {
  showSelector:function(callback) {
  },
  showEditor:function(callback) {
  }
}
Pop.Preview = {
  /*
   * @arg int cid
   * @arg int type: artifact type
   * @arg int id: artifact ID
   */
  show:function(cid, type, id) {
  }  
}