<?php
require_once 'php/data/rec/cryptastic.php';
require_once '_Upload.php';
//
abstract class FileSpec {
  //
  static $FILENAME;
  static $BASEPATH;  /* leave null to default to same folder as implementing class */
  static $MIME;
  //
  public function setBasePath($path) {
    static::$BASEPATH = $path;
    return $this;
  }
  public function setFilename($filename, $basePath = null) {
    static::$FILENAME = $filename;
    if ($basePath)
      static::$BASEPATH = $basePath;
    return $this;
  }
  public function setMime($mime) {
    static::$MIME = $mime;
    return $this;
  }
  //
  protected static function getFullFilename() {
    return static::getBasePath() . "\\" . static::$FILENAME;
  }
  protected static function getBasePath() {
    if (static::$BASEPATH)
      return static::$BASEPATH;
    $o = new ReflectionClass(get_called_class());
    return realpath(dirname($o->getFileName()));
  }
  protected static function getMime() {
    if (static::$MIME)
      return static::$MIME;
    $ext = static::getExt();
    $mime = geta(static::$EXT_TO_MIME, $ext);
    if ($mime == null)
      throw new UnknownFileType(static::$FILENAME);
    return $mime;
  }
  protected static function getExt() {
    return strtolower(end(explode('.', static::$FILENAME)));
  }
  protected static $EXT_TO_MIME = array(
    'ai'   => 'application/postscript',
    'asf'  => 'video/x-ms-asf',
    'asx'  => 'video/x-ms-asf',
    'avi'  => 'video/x-msvideo',
    'bmp'  => 'image/bmp',
    'doc'  => 'application/msword',
    'dvi'  => 'application/x-dvi',
    'eps'  => 'application/postscript',
    'gif'  => 'image/gif',
    'htm'  => 'text/html',
    'html' => 'text/html',
    'jpeg' => 'image/jpeg',
    'jpg'  => 'image/jpeg',
    'mov'  => 'video/quicktime',
    'mp2'  => 'audio/mpeg',
    'mp3'  => 'audio/mpeg',
    'mpe'  => 'video/mpeg',
    'mpeg' => 'video/mpeg',
    'mpg'  => 'video/mpeg',
    'mpga' => 'audio/mpeg',
    'pdf'  => 'application/pdf',
    'png'  => 'image/png',
    'ppt'  => 'application/vnd.ms-powerpoint',
    'ps'   => 'application/postscript',
    'qt'   => 'video/quicktime',
    'ras'  => 'image/x-cmu-raster',
    'rgb'  => 'image/x-rgb',
    'rm'   => 'audio/x-pn-realaudio',
    'rtf'  => 'text/rtf',
    'swf'  => 'application/x-shockwave-flash',
    'tif'  => 'image/tiff',
    'tiff' => 'image/tiff',
    'txt'  => 'text/plain',
    'wm'   => 'video/x-ms-wm',
    'wma'  => 'audio/x-ms-wma',
    'wmv'  => 'video/x-ms-wmv',
    'xls'  => 'application/vnd.ms-excel',
    'xml'  => 'text/xml',
    'zip'  => 'application/zip');
}
//
/**
 * Generic file  
 * @author Warren Hornsby
 */
abstract class File extends FileSpec {
  //
  static $FILENAME;
  static $BASEPATH;  
  static $MIME;
  //
  protected /*string*/$content;  
  //
  public function getContent() {
    return /*string*/$this->content;
  }
  public function setContent(/*string*/$content) {
    $this->content = $content;
    return $this;
  }
  public function read() {
    $content = static::file_get_contents();
    /*if ($this instanceof AutoEncrypt)
      $content = MyCrypt_Auto::decrypt($content);*/
    $this->setContent($content);
    return $this;
  }
  public function save() {
    $content = $this->getContent();
    /*if ($this instanceof AutoEncrypt)
      $content = MyCrypt_Auto::encrypt($content);*/
    static::file_put_contents($content);
    return $this;
  }
  public function output() {
    static::header();
    echo $this->getContent();
  }
  public function download() {
    $filename = static::$FILENAME;
    static::header();
    header("Content-Disposition: attachment; filename=$filename");
    echo $this->getContent();
  }
  //
  static function fromUpload(/*Upload*/$up) {
    $filename = static::getFullFilename();
    $up->save($filename);
    $me = new static();
    /*if ($me instanceof AutoEncrypt) 
      $this->read()->save();*/
    return /*File*/$me; 
  }
  //
  protected static function header() {
    $mime = static::getMime();
    ob_clean();
    header("Pragma: ");
    header("Cache-Control: ");
    header("Content-Type: $mime"); 
  }
  protected static function fopen_asRead() {
    return static::fopen('rb');
  }
  protected static function fopen_asWrite() {
    return static::fopen('wb');
  }
  protected static function fopen($mode) {
    $filename = static::getFullFilename();
    if (($handle = fopen($filename, $mode, true)) == false)
      throw new FileCannotOpen($filename);
    return $handle;
  }
  protected static function file_get_contents() {
    $filename = static::getFullFilename();
    if (($content = file_get_contents($filename, FILE_USE_INCLUDE_PATH)) == false)
      throw new FileCannotOpen($filename);
    return /*string*/$content;
  } 
  protected static function file_put_contents($content) {
    $filename = static::getFullFilename();
    $result = file_put_contents($filename, $content);
  } 
}
/**
 * Text file composed of lines 
 * @author Warren Hornsby
 */
abstract class TextFile extends File {
  //
  static $FILENAME;
  static $BASEPATH;  
  //
  protected /*string[]*/$lines;
  //
  public function getLines() {
    return $this->lines;
  }
  public function setLines(/*string[]*/$lines) {
    $this->lines = $lines;
    return $this;
  }
  public function getContent() {
    $lines = $this->getLines();
    $content = empty($lines) ? null : implode("\n", $lines); 
    return $content;
  }
  public function setContent(/*string*/$content) {
    $lines = explode("\n", $content);
    $this->setLines($lines);
    return $this;
  }
  public function save() {
    $content = $this->getContent();
    /*if ($this instanceof AutoEncrypt)
      $content = MyCrypt_Auto::encrypt($content);*/
    $handle = static::fopen_asWrite();
    fwrite($handle, $content);
    fclose($handle);
    return $this;
  }
  //
  static function create($lines = null) {
    $me = new static();
    if ($lines)
      $me->setLines($lines);
    return $me;
  }
  static function fetch() {
    $me = new static();
    $me->read();
    return $me;
  }
  protected static function fopen_asRead() {
    return static::fopen('r');
  }
  protected static function fopen_asWrite() {
    return static::fopen('w');
  }
}
/**
 * Text file composed of records (objects)
 * @author Warren Hornsby
 */
abstract class RecFile extends TextFile {
  //
  static $FILENAME;
  static $BASEPATH;  
  static $REC_CLASS;  /* 'MyRec' */ 
  //
  protected /*Rec[]*/$recs; 
  //
  public function getRecs() {
    return $this->recs;
  }
  public function load(/*Rec[]*/$recs) {
    $this->recs = $recs;
    return $this;
  }
  public function getLines() {
    $lines = array();
    foreach ($this->recs as $rec) 
      $lines[] = $rec->toString();  /* to save(), must implement $rec->toString() */
    return $lines;
  }
  public function setLines($lines) {
    $class = static::$REC_CLASS;
    $recs = array();
    foreach ($lines as $line)
      $recs[] = $class::fromString($line);  /* to read(), must implement MyRec::fromString($s) */
    $this->load($recs);
  }
}
//
class FileException extends Exception {}
class FileCannotOpen extends FileException {}
class UnknownFileType extends FileException {}
