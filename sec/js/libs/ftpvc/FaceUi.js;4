/**
 * Face UI Library
 */
var FaceUi = {
  //
  FACE_HX_TAB_MED:0,
  FACE_HX_TAB_SURG:1,
  FACE_HX_TAB_FAM:2,
  FACE_HX_TAB_SOC:3,
  //
  CONTAINS_ALL:1,
  CONTAINS_MEDS:2,
  CONTAINS_ALLERGIES:3,
  CONTAINS_VITALS:4,
  CONTAINS_DIAGNOSES:5,
  CONTAINS_CLIENT:6,
  CONTAINS_HM:7,
  CONTAINS_MEDHX:8,
  CONTAINS_SOCHX:9,
  CONTAINS_SURGHX:10,
  CONTAINS_FAMHX:11,
  CONTAINS_MSG:99, 
  /*
   * Build session anchor
   */
  createSessionAnchor:function(fs, id, asZoom, source) {
    if (id == 0) {
      return (source == 1) ? Html.Span.create('perfs', 'NewCrop') : Html.Span.create('perfs', 'Facesheet');
    } else {
      //var href = buildHrefFn('Includer.getDocOpener_preview', [fs.client.clientId, id, asZoom]);
      var sess = fs.clientHistory.sessions[id];
      var cls = (sess.closed) ? 'icon no-edit-note' : 'icon edit-note';
      return Html.Anchor.create(cls, sess.label, function() {
        Includer.getDocOpener_preview(fs.client.clientId, id, asZoom);
      })
    }
  },
  setParentage:function(parent, child) {
    child.parent = parent;
    child.fs = parent.fs;
    return parent.fs;
  },
  isDeathAge:function(status) {
    return (status == 'Deceased' || status == 'Accidental Death' || status == 'Suicide');
  },
  getDsyncCombo:function(topic) {
    var dsyncCombo = null;
    switch (topic) {
      case 'Drug Use':
        dsyncCombo = 'sochx.drugs';
        break;
      case 'Past Occupations':
        dsyncCombo = 'sochx.occs';
        break;
    }
    return dsyncCombo;
  },
  formatProcDesc:function(proc) {
    var gender = FaceUi.formatGender(proc);
    var age = FaceUi.formatAgeRange(proc);
    var every = FaceUi.formatInterval(proc);
    var a = [];
    if (gender != null) {
      a.push(gender + "s");
    } 
    if (age != null) {
      a.push(age);
    }
    if (every != null) {
      a.push(every);
    }
    var desc = "Recommendations: " + ((a.length == 0) ? "None" : bulletJoin(a)); 
    return desc;
  },
  formatGender:function(proc) {
    return (proc.gender == null) ? null : (proc.gender == "F") ? "Female" : "Male";
  },
  formatIcd:function(proc) {
    return (proc.icd == null) ? null : 'ICD ' + proc.icd;
  },
  formatAgeRange:function(proc) {
    if (proc.after == null && proc.until == null) {
      return null;
    }
    var s = (proc.after) ? "Age " + proc.after : "";
    if (proc.until) {
      if (s == "") {
        s = " Up to age " + proc.until;
      } else {
        s += " to " + proc.until;
      } 
    } else {
      s += " and up";
    }
    return s;
  },
  formatInterval:function(p) {
    if (p && p.every) {
      switch(p["int"]) {
        case 0:
          return (p.every == 1) ? "Annually" : "Every " + p.every + " years";
        case 1:
          return (p.every == 1) ? "Monthly" : "Every " + p.every + " months"; 
        case 2:
          return (p.every == 1) ? "Weekly" : "Every " + p.every + " weeks"; 
        case 3:
          return (p.every == 1) ? "Daily" : "Every " + p.every + " days"; 
      }
    }
    return null;
  },
  intComboArray:function() {
    return {0:"y",1:"m",2:"w",3:"d"};
  },
  /*
   * Test if selected keys are not present in current selection. If so, return true and add new keys to current
   * Note: current must be an initialized array! [] is ok, NULL is not. This is to enforce the byRef manipulation.
   * Ex. selected: ['key1','key2']
   *     current:  ['key2','key3']
   * Returns true and sets
   *     current:  ['key1','key2','key3']   
   */
  isDirty:function(selected, current) {
    if (selected.length == 0) {
      return false;
    }
    var dirty = false;
    var map = this._makeMap(current);
    for (var i = 0; i < selected.length; i++) {
      var id = selected[i];
      if (map[id] == null) {
        current.push(id);
        dirty = true;
      }
    }
    return dirty;
  },
  /*
   * Return sel text array value as a single value
   * e.g. "x" for ["x"], null for null
   */
  single:function(a) {
    return (Array.isEmpty(a)) ? null : a[0];
  },
  /*
   * Return single() from a question
   */
  qSingle:function(q) {
    return FaceUi.single(qSelTextArray(q));
  },
  _makeMap:function(a) {
    var aa = {};
    for (var i = 0; i < a.length; i++) aa[a[i]] = a[i];
    return aa;
  }
}
