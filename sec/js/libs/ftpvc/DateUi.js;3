/**
 * Date UI Library
 */
var DateUi = {
  //
  MONTH_NAMES:['January','February','March','April','May','June','July','August','September','October','November','December'],
  MONTH_ABBR_IX:{'Jan':0,'Feb':1,'Mar':2,'Apr':3,'May':4,'Jun':5,'Jul':6,'Aug':7,'Sep':8,'Oct':9,'Nov':10,'Dec':11},
  //
  APPROX_MONTH_YEAR:1,
  APPROX_YEAR:2,
  /*
   * @arg text: any format string, e.g. 'dd-mmm-yyyy', 'yyyy-mm-dd', 'mm-dd-yy', 'mm-dd-yyyy'
   *            approximates also allowed, e.g. 'in December of 2010', 'Feb 2009', '1966'
   * @return Date (null if can't convert)
   */
  toDate:function(text) {
    if (text == null || ! isString(text)) 
      return null;
    var date;
    if (text.indexOf('-') >= 0) 
      a = text.split('-');
    else
      a = text.split('/');
    if (a.length == 3) 
      date = this._parseDashDelimited(a);
    else 
      date = this._parseSpaceDelimited(text);    
    if (date && date.toString() == 'NaN') 
      date = null;
    return date;
  },
  getMonthName:function(i) {
    return DateUi.MONTH_NAMES[i];
  },
  getMonthAbbr:function(i) {
    return DateUi.MONTH_NAMES[i].substr(0, 3);
  },
  getMonthIndex:function(abbr) {
    return DateUi.MONTH_ABBR_IX[abbr];
  },
  //
  _parseDashDelimited:function(a) {
    var y, m, d;
    if (a[1].length == 3) {  // dd-mmm-yyyy
      y = val(a[2]);
      m = this.getMonthIndex(a[1]);
      d = val(a[0]);
    } else if (a[0].length == 4) {  // yyyy-mm-dd
      y = val(a[0]);
      m = val(a[1]) - 1;
      d = val(a[2]);
    } else {  // mm-dd-yy or mm-dd-yyyy
      y = val(a[2]);
      m = val(a[0]) - 1;
      d = val(a[1]);
      if (y < 100) 
        if (y > 20) 
          y += 1900;
        else 
          y += 2000;
    }
    return new Date(y, m, d);
  },
  _parseSpaceDelimited:function(text) {
    var y, m, d, approx;
    var a = text.split(' ');
    if (a[0] == 'on') {  // 'December 12, 2010'
      a.shift();
      y = val(a[2]);
      m = this.getMonthIndex(a[0].substr(0, 3));
      d = val(a[1]);
    } else {
      d = 1;  // Approximates
      if (a[0] == 'in') 
        a.shift();
      if (a.length == 1) {  // '1966'
        y = val(a[0]);
        m = 0;
        approx = DateUi.APPROX_YEAR;
      } else if (a.length == 2) {  // 'Feb 2009'
        y = val(a[1]);
        m = this.getMonthIndex(a[0]);
        approx = DateUi.APPROX_MONTH_YEAR;
      } else if (a.length == 3) {  // 'December of 2010'
        y = val(a[2]);
        m = this.getMonthIndex(a[0].substr(0, 3));
        approx = DateUi.APPROX_MONTH_YEAR;
      }
    }
    var date = new Date(y, m, d);
    if (approx)
      date.approx = approx; 
    return date;
  }
}
/**
 * Date Value object
 * @arg text: optional, any formatted date string
 */
function DateValue(text) {
  if (text)
    this.setText(text);
}
DateValue.prototype = {
  _date:null,
  //
  setDate:function(date) {
    this._date = date;
  },
  setText:function(text) {
    this.setDate(DateUi.toDate(text));
  },
  setYMD:function(y, m, d) {
    this.setDate(y, m, d);
  },
  getDate:function() {
    return this._date;
  },
  isApprox:function () {
    return (this._date.approx != null);
  },
  isExact:function () {
    return (this._date.approx == null);
  },
  getApprox:function() {
    return this._date.approx;  // DateUi.APPROX_ (or null if exact) 
  },
  getYear:function() {
    return (this._date) ? this._date.getFullYear() : null;
  },
  getMonth:function() {
    return (this._date) ? this._date.getMonth() : null;
  },
  getMonthName:function() {
    return (this._date) ? DateUi.getMonthName(this._date.getMonth()) : null;
  },
  getMonthAbbr:function() {
    return (this._date) ? DateUi.getMonthAbbr(this._date.getMonth()) : null;
  },
  getDay:function() {
    return (this._date) ? lpad(this._date.getDate()) : null;
  },
  toString:function(fmt) {
    if (this._date) { 
      fmt = denull(fmt, DateValue.FMT_DEFAULT);
      switch (fmt) {
        case DateValue.FMT_DEFAULT:
          switch (this.getApprox()) {
            case DateUi.APPROX_MONTH_YEAR:
              return this.getMonthAbbr() + ' ' + this.getYear();
            case DateUi.APPROX_YEAR:
              return this.getYear();
            default:
              return this.getDay() + '-' + this.getMonthAbbr() + '-' + this.getYear();
          }
        case DateValue.FMT_VERBOSE:
          switch (this.getApprox()) {
            case DateUi.APPROX_MONTH_YEAR:
              return this.getMonth() + ' of ' + this.getYear();
            case DateUi.APPROX_YEAR:
              return this.getYear();
            default:
              return this.getMonthName() + ' ' + this.getDay() + ', ' + this.getYear();
          }
        case DateValue.FMT_SENTENCE:
          switch (this.getApprox()) {
            case DateUi.APPROX_MONTH_YEAR:
              return 'in ' + this.getMonth() + ' of ' + this.getYear();
            case DateUi.APPROX_YEAR:
              return 'in ' + this.getYear();
            default:
              return 'on ' + this.getMonthName() + ' ' + this.getDay() + ', ' + this.getYear();
          }
      }
    }
    return '';
  }
}
DateValue.FMT_VERBOSE = 0;  // 'December 14, 2010'
DateValue.FMT_SENTENCE = 1, // 'on December 14, 2010'
DateValue.FMT_DEFAULT = 2,  // '14-Dec-2010'
DateValue.fromDate = function(date) {
  var dv = new DateValue();
  dv.setDate(date);
  return dv;
}
DateValue.fromNow = function() {
  var dv = new DateValue();
  dv.setDate(new Date());
  return dv;
}
DateValue.fromYMD = function(y, m, d) {
  var dv = new DateValue();
  dv.setDate(new Date(y, m, d));
  return dv;
}
DateValue.fromYM = function(y, m) {
  var dv = new DateValue();
  var d = new Date(y, m, 1);
  d.approx = DateUi.APPROX_MONTH_YEAR;
  dv.setDate(d);
  return dv;
}
DateValue.fromY = function(y) {
  var dv = new DateValue();
  var d = new Date(y, 0, 1);
  d.approx = DateUi.APPROX_YEAR;
  dv.setDate(d);
  return dv;
}