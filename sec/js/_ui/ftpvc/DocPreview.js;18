/**
 * Pop DocStubPreview
 */
DocStubPreview = {
  /*
   * @arg DocStub rec to draw first
   * @arg DocStub[] recs (optional, to implement nav bar)
   */
  pop:function(rec, recs) {
    return this.create().pop(rec, recs);
  },
  create:function() {
    var My = this;
    return DocStubPreview = Html.Pop.create('Documentation Preview', 800).extend(function(self) {
      return {
        onupdate:function() {},  // fired on close
        //
        init:function() {
          self.content.addClass('dsp');
          self.navbar = My.NavBar.create(self.content).bubble('onselect', self.navbar_onselect);
          self.viewer = My.Viewer.create(self.content).bubble('onexit', self.close).bubble('onupdate', self.viewer_onupdate);
        },
        reset:function() {
          self.updated = false;
          self.viewer.reset();
        },
        pop:function(rec, recs) {
          self.reset();
          self.show();
          async(function() {
            self.navbar.load(recs, rec);
          })
          return self;
        },
        onclose:function() {
          if (self.updated) 
            self.onupdate();
        },
        //
        navbar_onselect:function(rec) {
          self.viewer.load(rec);
        },
        viewer_onupdate:function() {
          self.updated = true;
        }
      }
    })
  },
  Viewer:{
    create:function(container) {
      var self = Html.Tile.create(container, 'Viewer');
      return self.aug({
        onexit:function() {},
        onupdate:function() {},
        //
        load:function(rec) {
          self.reset();
          self.rec = rec;
          self.draw();
        },
        //
        reset:function() {
          if (self.viewing)
            self.viewing.hide();
          self.viewing = null;
        },
        draw:function() {
          var view = DocView.from(self.rec);
          self.viewing = view.create(self, self.rec).show().bubble('onexit', self).bubble('onupdate', self);
        }
      });
    }
  },
  NavBar:{
    create:function(container) {
      var My = this;
      var self = Html.Tile.create(container);
      return self.aug({
        onselect:function(rec) {},
        //
        init:function() {
          self.prevbox = My.LinkBox.asPrev().set('onnav', self.draw);
          self.onbox = My.OnBox.create(self);
          self.nextbox = My.LinkBox.asNext().set('onnav', self.draw);
          Html.Table.create(self, 'w100').tbody().tr().td(self.prevbox).w(100).td(self.onbox).w(700).td(self.nextbox).w(100);
        },
        load:function(recs, rec) {
          self.recs = recs;
          self._navify(recs);
          self.draw(rec);
        },
        //
        draw:function(rec) {
          self.prevbox.load(rec._prev);
          self.nextbox.load(rec._next);
          self.onbox.load(rec);
          self.onselect(rec);
        },
        _navify:function(recs) {
          var last;
          Array.forEach(recs, function(rec) {
            if (last) {
              last._prev = rec;
              rec._next = last;
            } else {
              rec._next = null;
            }
            last = rec;
          });
        }
      });
    },
    OnBox:{
      create:function(container) {
        var self = Html.Div.create('onbox').into(container);
        return self.aug({
          load:function(rec) {
            self.clean();
            Html.H2.create(rec._type).into(self);
            Html.Div.create('bold').setText(rec.name).into(self);
            Html.Div.create().setText(rec.desc).into(self);
          }
        });
      }
    },
    LinkBox:{
      create:function(cls) {
        var self = Html.Div.create(cls);
        return self.aug({
          onnav:function(rec) {},
          //
          load:function(rec) {
            self.clean();
            self.rec = rec;
            self.anchor = self.createAnchor();
            self.addClassIf('empty', self.anchor == null);
          },
          //
          onclick:function() {
            if (self.rec)
              self.onnav(self.rec);
          },
          onmouseover:function() {
            if (self.anchor) 
              self.addClass('hover');
          },
          onmouseout:function() {
            self.removeClass('hover');
          },
          createAnchor:function() {
            if (self.rec) {
              return AnchorDocStub.create(self.rec, self.onnav).addClass('linkbox').noFocus().into(self);
            }
          }
        });
      },
      asPrev:function() {
        return this.create('linkbox prevbox');
      },
      asNext:function() {
        return this.create('linkbox nextbox');
      }
    }
  }
}
/**
 * DocView
 */
DocView = {
  create:function(container, stub, noCmdBar) {
    return Html.Tile.create(container).extend(function(self) {
      return {
        onexit:function() {},
        onupdate:function() {},
        draw:function() {},
        //
        init:function() {
          self.view = Html.Tile.create(self, 'View');
          if (! noCmdBar) {
            self.table = Html.Table2Col.create(self);
            Html.CmdBar.create(self.table.right).exit(self.exit);
          }
          self.hide();
          // extenders call self.load(stub)
        },
        //
        load:function(stub) {
          self.stub = stub;
          self.view.clean();
          stub.ajax(self).fetchPreview(function(rec) {
            if (rec) {
              self.rec = rec;
              self.draw();
            } else {
              self.exit();
              self.onupdate();
            }
          })
        },
        reload:function() {
          self.stub.resetPreview();
          self.load(self.stub);
          self.onupdate();
        },
        noPreview:function() {
          self.view.setText('Preview is not available for this item.');
        },
        exit:function() {
          self.onexit();
        }
      }
    })
  },
  from:function(stub) {
    switch (stub.type) {
      case C_DocStub.TYPE_SESSION:
        return DocViewSession;
      case C_DocStub.TYPE_MSG:
        return DocViewMsg;
      case C_DocStub.TYPE_APPT:
        return DocViewAppt;
      case C_DocStub.TYPE_ORDER:
        return DocViewOrder;
      case C_DocStub.TYPE_SCAN:
        return DocViewScan;
      case C_DocStub.TYPE_SCAN_XML:
        return DocViewScanXml;
      case C_DocStub.TYPE_RESULT:
        return DocViewResult;
    }
  }
}
DocViewSession = {
  create:function(container, stub, noCmdBar) {
    return DocView.create(container, stub, noCmdBar).extend(function(self) {
      return {
        init:function() {
          self.view.addClass('ViewSession');
          if (self.table)
            Html.CmdBar.create(self.table.left).print(self.print_onclick).button('Open in Console', self.open_onclick, 'note');
          self.load(stub);
        },
        draw:function() {
          if (self.rec._html)
            self.view.html(self.rec._html);
          else
            self.noPreview();
        },
        open_onclick:function() {
          Page.popConsole(self.rec.sessionId, self.reload);
        },
        print_onclick:function() {
        }
      }
    })
  }
}
DocViewMsg = {
  create:function(container, stub, noCmdBar) {
    return DocView.create(container, stub, noCmdBar).extend(function(self) {
      return {
        init:function() {
          self.view.addClass('ViewMsg');
          if (self.table)
            Html.CmdBar.create(self.table.left).print(self.print_onclick).button('Open in Message Editor', self.open_onclick, 'note');
          self.load(stub);
        },
        draw:function() {
          if (self.rec._html)
            self.view.html(self.rec._html);
          else
            self.noPreview();
        },
        open_onclick:function() {
          Page.Nav.goMessage(self.rec.threadId);
        },
        print_onclick:function() {
        }
      }
    })
  }
}
DocViewScan = {
  create:function(container, stub, noCmdBar) {
    return DocView.create(container, stub, noCmdBar).extend(function(self) {
      return {
        init:function() {
          self.view.addClass('ViewScan');
          if (self.table)
            Html.CmdBar.create(self.table.left).print(self.print_onclick);
          self.load(stub);
        },
        draw:function() {
          if (self.rec._html)
            self.view.html(self.rec._html);
        },
        print_onclick:function() {
        }
      }
    })
  }
}
DocViewScanXml = {
  create:function(container, stub, noCmdBar) {
    return DocView.create(container, stub, noCmdBar).extend(function(self) {
      return {
        init:function() {
          self.view.addClass('ViewXml');
          if (self.table)
            Html.CmdBar.create(self.table.left).print(self.print_onclick);
          self.load(stub);
        },
        draw:function() {
          if (self.rec._html)
            self.view.html(self.rec._html);
        },
        print_onclick:function() {
        }
      }
    })
  }
}
DocViewResult = {
  create:function(container, stub, noCmdBar) {
    return DocView.create(container, stub, noCmdBar).extend(function(self) {
      return {
        init:function() {
          self.view.addClass('ViewResult');
          if (self.table)
            Html.CmdBar.create(self.table.left).print(self.print_onclick).button('Edit Procedure/Results', self.open_onclick, 'note');
          self.load(stub);
        },
        draw:function() {
          var proc = self.rec;
          Html.H3.create(proc.Ipc.name).into(self.view);
          var t = Html.Table.create(self.view);
          t.thead().tr().th().w('25%').th('Value').w('10%').th('Range').w('10%').th('Interpret').w('5%').th('Comments').w('50%');
          proc.ProcResults.forEach(function(result) {
            var edit = Html.Anchor.create(null, result.Ipc.name, self.select_onclick.curry(result)); 
            t.tbody().trToggle().th(edit).td(result._value, result.interpretCode).td(result.range).td(result._interpretCode).td(result.comments);
          })
        },
        open_onclick:function() {
          self.working(true);
          Proc.fetch(self.rec.procId, function(proc) {
            self.working(false);
            ProcEntry.pop(proc).bubble('onsave', self.reload).bubble('ondelete', function() {
              self.exit();
              self.onupdate();
            })
          })
        },
        print_onclick:function() {
        },
        select_onclick:function(result) {
          ResultHistoryPop.pop(result);
        }
      }
    })
  }
}
/**
 * AnchorDocStub_Preview
 */
AnchorDocStub_Preview = {
  create:function(rec) {
    if (rec)
      return AnchorDocStub.create(rec, DocStubPreview.pop);
  }
}

