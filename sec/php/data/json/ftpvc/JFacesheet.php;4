<?php
require_once "php/data/json/_util.php";

class JFacesheet {

	public $clientId;
	public $cuTimestamp;       // Last client update timestamp
	public $docs;              // JUser{user_id:} Providers in group
	public $contains;          // 1=all/2=meds/3=allergies...
  public $client;            // JClient
  public $clientHistory;     // JClientHistory
  public $workflow;          // JWorkflow
	public $meds;              // JDataMed[]
  public $activeMeds;        // JDataMed[] Filtered $meds
	public $medsHistByMed;     // JDataMed[]
  public $medsHistByDate;    // JDataMed[]
  public $updatedMed;        // JDataMed
  public $allergies;         // JDataAllergy[]
	public $allergiesHistory;  // JDataAllergy[]
  public $diagnoses;         // JDataDiagnosis[]
	public $diagnosesHistory;  // JDataDiagnosis[]
  public $vitals;            // JDataVital[]
  public $hms;               // JDataHm[] Facesheet recs (summarized by proc)
  public $hmsHistory;        // JDataHm[] All recs
  public $hmProcs;           // LOOKUP_DATA HmProcs{_instance:} procs relevant for client
  public $medhx;             // JDataSyncProcGroup
  public $sochx;             // JDataSyncGroup
  public $surghx;            // JDataSyncProcGroup
  public $famhx;             // JDataSyncFamGroup
  public $immuns;            // DataImmun[]
  public $immunPid;          // pid of immun entry 
  
  // Helpers
  public $audits;  
  
  const CONTAINS_ALL = 1;
  const CONTAINS_MEDS = 2;
  const CONTAINS_ALLERGIES = 3;
  const CONTAINS_VITALS = 4;
  const CONTAINS_DIAGNOSES = 5;
  const CONTAINS_CLIENT = 6;
  const CONTAINS_HM = 7;
  const CONTAINS_MEDHX = 8;
  const CONTAINS_SOCHX = 9;
  const CONTAINS_SURGHX = 10;
  const CONTAINS_FAMHX = 11;
  const CONTAINS_IMMUN = 12;
  const CONTAINS_MSG = 99;  // for messaging
  
	public function __construct($clientId, $contains) {  // properties are optional and set independently
    $this->clientId = $clientId;
    $this->contains = $contains;
    $this->workflow = new JWorkflow();
	}
	private function getCuTimestamp() {
	  return AuditDao::getClientUpdateTimestamp($this->clientId);
	}
	public function out() {
	  $out = "";
    $out = nqq($out, "clientId", $this->clientId);
    $out = nqq($out, "cuTimestamp", $this->getCuTimestamp());
    $out = nqqaa($out, "docs", $this->docs);
    $out = nqqo($out, "contains", $this->contains);
    $out = nqqj($out, "client", $this->client);
    $out = nqqj($out, "clientHistory", $this->clientHistory);
    $out = nqqa($out, "meds", $this->meds);
    $out = nqqa($out, "activeMeds", $this->activeMeds);
    $out = nqqa($out, "medsHistByMed", $this->medsHistByMed);
    $out = nqqa($out, "medsHistByDate", $this->medsHistByDate);
    $out = nqq($out, "updatedMed", $this->updatedMed);
    $out = nqqa($out, "allergies", $this->allergies); 
    $out = nqqa($out, "allergiesHistory", $this->allergiesHistory); 
    $out = nqqa($out, "diagnoses", $this->diagnoses);
    $out = nqqa($out, "diagnosesHistory", $this->diagnosesHistory);
    $out = nqqa($out, "vitals", $this->vitals);
    $out = nqqo($out, "immuns", jsonencode($this->immuns));
    $out = nqq($out, "immunPid", $this->immunPid);
    $out = nqqj($out, "workflow", $this->workflow);
    $out = nqqa($out, "hms", $this->hms);
    $out = nqqa($out, "hmsHistory", $this->hmsHistory);
    $out = nqqo($out, "hmProcs", jsonencode($this->hmProcs));
    $out = nqqj($out, "medhx", $this->medhx);
    $out = nqqj($out, "sochx", $this->sochx);
    $out = nqqj($out, "surghx", $this->surghx);
    $out = nqqj($out, "famhx", $this->famhx);
    $out = nqqo($out, "audits", jsonencode($this->audits));
    return cb($out);    
	}
}
?>