<?php
/**
 * Logger 
 * @author Warren Hornsby
 */
class Logger {
  //
  const LOG_FILE = 'logs/log.txt';
  const ERROR_FILE = 'logs/error.txt';
  //
  /**
   * Append to log file 
   * @param string $msg
   */
  public static function log($msg) {
    $fp = @fopen(self::LOG_FILE, 'a', true);
    if ($fp) { 
      static $lastts;
      static $blank = '                   ';
      $ts = nowNoQuotes();
      if ($lastts == $ts) 
        $ts = $blank;
      else 
        $lastts = $ts;
      $msg = join("\n    $blank", explode("\n", $msg));
      fputs($fp, "$ts $msg\n");
      fclose($fp);
    }
  }
  /**
   * Append to log file (if in test environment)
   * @param string $msg
   */
  public static function debug($msg) {
    if (self::inTestEnvironment()) 
      if (substr($msg, 0, 30) != 'SELECT COUNT(*) FROM msg_inbox')
        self::log(self::formatSql($msg));
  }
  /**
   * PHP print_r to log file (if in test environment)
   * @param mixed $o e.g. array, object
   * @param string $caption (optional wrapper text)
   */
  public static function debug_r($o, $caption = null) {
    if (self::inTestEnvironment()) 
      self::log((($caption) ? "=== $caption === " : '') . self::p_r($o) . (($caption) ? "=== /$caption ===" : ''));  
  }
  protected static function p_r($o) {
    if (is_string($o)) 
      $o = self::formatSql($o);
    return print_r($o, true);     
  }
  protected static function formatSql($s) {
    static $words = array(
      'FROM', 'GROUP BY', 'LEFT JOIN', 'JOIN', 'LIMIT', 'ORDER BY', 'SET', 'VALUES', 'WHERE'); 
    $w = substr($s, 0, 7);
    switch ($w) {
      case 'SELECT ':
        $s = self::addLfs($s, $words);
        $s = str_replace("LEFT\n", "LEFT ", $s);
        if (substr($s, -1, 1) != ';')
          $s .= ';';
        break;
      case 'INSERT ':
      case 'UPDATE ':
      case 'DELETE ':
        $s = self::addLfs($s, $words);
        if (substr($s, -1, 1) != ';')
          $s .= ';';
        break;
    }
    return $s;
  }
  protected static function addLfs(&$s, $words) {
    foreach ($words as $word)
      $s = self::addLf($s, $word);
    return $s;
  }
  protected static function addLf(&$s, $w) {
    return str_replace(" $w", "\n$w", $s);
  }
  /**
   * Output exception to error file
   * @param Exception $exception
   * @return LoggedException (user-friendly exception to throw in place of original)
   */
  public static function logException($exception) {
    if ($exception instanceof UserFriendly)
      return $exception;
    global $myLogin;
    $trace = $exception->getTraceAsString();
    $e = new stdClass();
    $e->id = get($myLogin, 'userId') . substr(strtotime(nowNoQuotes()), 5);
    $e->date = nowNoQuotes();
    $e->exception = get_class($exception);
    $e->message = $exception->getMessage();
    $e->code = $exception->getCode();
    $e->source = currentUrl();
    $e->userId = get($myLogin, 'userId');
    $e->uid = get($myLogin, 'uid');
    $e->name = get($myLogin, 'name');
    $e->sessId = session_id();
    $error = substr(print_r($e, true), 17, -2);
    $fp = @fopen(self::ERROR_FILE, 'a');
    if ($fp) 
      fputs($fp, "$error\n$trace\n");
    return new LoggedException($e->id); 
  }
  //
  protected static function inTestEnvironment() {
    return true;  // for now
    static $should;
    if ($should === null) {
      switch (geta($_SERVER, 'HTTP_HOST')) {
        case 'localhost':
        case 'test.clicktate.com':
          $should = true;
          break;
        default:
          $should = false;
      } 
    } 
    return $should;   
  }
}
/**
 * Exception
 */
interface UserFriendly {}  // Exception text is formatted for use on UI
// 
class LoggedException extends Exception implements UserFriendly {
  public function __construct($errorId) {
    $this->message = "<b>Application error encountered.</b><br><br>If you continue to have problems, please contact our support line and<br>provide the following error code: #$errorId.<br><br>Thank you for your assistance.";
  }
}
?>