/**
 * Pop EntryFolderPop
 */
EntryFolderPop = {
  /*
   * @arg ScanIndex rec
   * @callback() onupdate
   */
  pop:function(rec, onupdate) {
    return Html.Pop.singleton_pop.apply(this, arguments);
  },
  create:function() {
    return Html.DirtyPop.create('Scan Folder', 600).extend(function(self) {
      return {
        onupdate:function() {},
        //
        init:function() {
          self.folder = ScanEntryFolder.create(self.content, true).bubble('onopen', self.folder_onopen).bubble('onupdate', self).bubble('onclose', self.close_asSaved);
          self.content.onmousedown = Zoom.closeAll;
        },
        onpop:function() {
          self.invisible();
        },
        onshow:function(rec, onupdate) {
          self.folder.fetch(rec.scanIndexId);
          self.onupdate = onupdate;
        },
        onclose:function() {
          Zoom.closeAll();
        },
        reset:function() {
          self.folder.reset();
        },
        isDirty:function() {
          return self.folder.isDirty(); 
        },
        save:function() {
          folder.save_onclick();
        },
        //
        folder_onopen:function() {
          self.reposition();
          self.visible();
        },
        folder_onupdate:function() {
          if (self.onupdate)
            self.onupdate();
        }
      }
    })
  }
}
/**
 * ScanEntryFolder
 *   EntryForm form
 *   FileList list
 */
ScanEntryFolder = {
  create:function(container, noTbar) {
    var My = this;
    return Html.Tile.create(container, 'EntryFolder').extend(function(self) {
      return {
        onopen:function() {},
        onclose:function() {},
        onupdate:function() {},
        oncancel:function() {},
        oncheck_file:function(scanFile, checked) {},
        ondetach_file:function(scanFile) {
          scanFile.remove();  // @abstract
        },
        //
        init:function() {
          self.tbar = self.tile(My.Title, 'new-index').bubble('onclick_create', self.open).hideIf(noTbar);
          self.content = Html.Div.create().into(self).hide();
          self.form = My.EntryForm.create(self.content);
          self.form.onresize = self.resize;
          self.list = My.FileList.create(self.content, self).bubble('oncheck_file', self).bubble('ondetach_file', self);
          self.cmd = My.CmdBar.create(self.content, self);
          self.reset();
        },
        reset:function() {
          self.rec = null;
          self.removeClass('update');
          self.tbar.showIf(! noTbar);
          self.content.hide();
          self.closed = self;
          self.form.reset();
          return self;
        },
        fetch:function(sfid) {
          ScanIndex.ajax().fetch(sfid, self.open);
        },
        open:function(rec) {
          self.rec = rec;
          self.addClassIf('update', rec);
          self.tbar.hide();
          self.cmd.showDelIf(rec);
          self.content.show();
          self.form.load(rec);
          self.list.load(rec);
          self.closed = null;
          self.resize();
          self.onopen();
        },
        close:function(updated) {
          self.reset();
          self.onclose();
          if (updated)
            self.onupdate();
          return self;
        },
        add:function(scanFile) {
          if (self.closed)
            self.open();
          self.list.add(scanFile);
        },
        isDirty:function() {
          return self.form.isRecordChanged() || self.list.isDirty();
        },
        setMaxHeight:function(i) {
          self._maxh = i - 20;
          self.resize();
        },
        resize:function() {
          if (! self.closed) {
            var pad = self.form.getHeight() + self.cmd.getHeight();
            self.list.setHeight(self._maxh - pad);
          }
        },
        //
        save_onclick:function() {
          self.working(true);
          var rec = self.form.getRecord();
          Ajax.Scanning.saveIndex(self.form.getRecord(), self.list.getScanFileIds(),  
            function(rec) {
              self.working(false);
              self.close(true);
            })
        },
        del_onclick:function() {
          Pop.Confirm.showYesNo('Are you sure you want to remove this index?<br><br>Note: Only the index will be deleted. Any scanned files in this index will be returned to Unindexed Files.', function() {
            self.working(true);
            Ajax.Scanning.removeIndex(self.rec.scanIndexId, 
              function(id) {
                self.working(false);
                self.close(true);
              });
          });
        },
        cancel_onclick:function() {
          if (self.isDirty()) {
            Pop.Confirm.show('This index record has unsaved changes. Save now?', 'Save Now', 'save', "Don't Save", null, true, null,
              function(confirmed) {
                if (confirmed) {
                  self.save_onclick();
                } else {
                  if (self.list.isDirty())
                    self.oncancel();
                  self.close();
                }
              });
          } else {
            self.close();
          }
        }
      }
    })
  },
  Title:function(self) {
    return {
      onclick_create:function() {},
      //
      init:function() {
        Html.Anchor.create(null, 'Create New...').into(self).bubble('onclick', self, 'onclick_create');
      }
    }
  },
  EntryForm:{
    create:function(container) {
      var ef = Html.EntryForm.create(container, 'first70', {
        onresize:function() {},
        //
        load:function(rec) {
          if (rec) {
            ef.setRecord(rec);
            ef.orderPicker.setClientId(rec.clientId);
            ef.focus('scanType');
          } else {
            ef.reset();
            ef.popClient();
          }
          ef.showScanType();
          ef.showResults(false);
        },
        popClient:function() {
          Zoom.pauseAll();
          ef._popClientPicker('clientId', ef.client_onset);
        },
        client_onset:function(c) {
          Zoom.resumeAll();
          ef.orderPicker.setClientId(c.clientId);
        },
        type_onchange:function() {
          ef.showScanType();
        },
        showResults:function(b) {
          _$('qr3').showIf(b);
          _$('qr4').showIf(b);
          ef.onresize();
        },
        provider_onset:function(rec) {
          if (rec) {
            if (rec.Address_addrFacility) 
              ef.setValue('addrFacility', rec.Address_addrFacility);
            if (rec.area) {
              if (Array.isEmpty(ef.getValue('areas')))
                ef.setValue('areas', [rec.area]); 
            }
          }
        },
        order_onset:function(rec) {
          var type = ef.trackCatToType(rec.trackCat);
          if (type) {
            ef.setValue('scanType', type);
            ef.showScanType();
            if (type == C_ScanIndex.TYPE_RESULT) 
              ef.setValue('ipc', rec.Ipc);
            ef.setValue('providerId', rec.Provider_schedWith);
            ef.setValue('addrFacility', rec.Address_schedLoc);
          }
        },
        trackCatToType:function(tcat) {
          switch (tcat) {
            case C_TrackItem.TCAT_LAB:
            case C_TrackItem.TCAT_NUCLEAR:
            case C_TrackItem.TCAT_RADIO:
            case C_TrackItem.TCAT_TEST:
            case C_TrackItem.TCAT_PROC:
              return C_ScanIndex.TYPE_RESULT;
            case C_TrackItem.TCAT_REFER:
              return C_ScanIndex.TYPE_LETTER;
          }
        },
        showScanType:function() {
          if (ef.getValue('scanType') == C_ScanIndex.TYPE_RESULT) {
            ef.spanipc.show();
            ef.focus('ipc');
          } else {
            ef.spanipc.hide();
          }
          ef.onresize();
        }
      });
      ef.orderPicker = OrderPicker.create();
      ef.li('To', 'fr').select('recipient', C_Docs).check('reviewed', 'Reviewed');
      ef.li().client('clientId', '(Select Patient)', 'Client', ef.client_onset);
      ef.li('Date').date('datePerformed').lbl('Reconcile To').augd(ef.orderPicker, 'Order', ef.order_onset);
      ef.li('Type', 'mb5 mt10').atradio('scanType', C_ScanIndex.TYPES, ef.type_onchange).startSpan('ef-ipc').lbl('for', 'nopad').picker(IpcPicker, 'ipc', 'Ipc').append(Html.Anchor.create('ml5', 'Quick Result...', ef.showResults.curry(true))).endSpan();
      ef.li('Result', null, null, 'qr3').select('interpretCode', C_ProcResult.INTERPRET_CODES, '');
      ef.li('Comments', null, null, 'qr4').textarea('rcomments');
      ef.li('Provider').picker(ProviderPicker, 'providerId', 'Provider', ef.provider_onset).lbl('at', 'nopad').picker(FacilityPicker, 'addrFacility', 'Address_addrFacility');
      ef.li('Area').atab('areas', MultiAreaAtab);
      ef.spanipc = _$('ef-ipc');
      return ef;
    }
  },
  FileList:{
    create:function(container) {
      var self = Html.Div.create('EntryFolderList').into(container);
      return self.aug({
        oncheck_file:function(scanFile, checked) {},
        ondetach_file:function(scanFile, checked) {},
        //
        load:function(rec) {
          this.clean();
          var file;
          if (rec)
            Array.forEach(rec.ScanFiles, function(rec, i) {
              file = ScanFileCheck.create(self, rec, true);
              self.add(file);
            })
          this._recOrig = Json.encode(self.getScanFileIds());
        },
        add:function(scanFile) {
          self.append(scanFile.bubble('oncheck', self, 'oncheck_file').bubble('ondetach', self, 'ondetach_file').bubble('onsortup', self.file_onsortup).bubble('onsortdown', self.file_onsortdown));
        },
        isDirty:function() {
          var _recNow = Json.encode(self.getScanFileIds());
          return (_recNow != self._recOrig);
        },
        getScanFileIds:function() {
          var recs = [];
          if (self.children.length)
            Array.forEach(self.children, function(scanFile) {
              recs.push(scanFile.rec.scanFileId);
            })
          return recs;
        },
        file_onsortup:function(scanFile) {
          if (scanFile.previousSibling) {
            scanFile.before(scanFile.previousSibling);
            Html.Animator.fade(scanFile);
            Html.Animator.scrollTo(self, scanFile);
          }
          Html.Window.cancelBubble();
        },
        file_onsortdown:function(scanFile) {
          if (scanFile.nextSibling) {
            scanFile.after(scanFile.nextSibling);
            Html.Animator.fade(scanFile);
            Html.Animator.scrollTo(self, scanFile);
          }
          Html.Window.cancelBubble();
        }
      });
    }
  },
  CmdBar:{
    create:function(container, context) {
      return Html.CmdBar.create(container).save(context.save_onclick).del(context.del_onclick).cancel(context.cancel_onclick);
    }
  }
}
OrderPicker = {
  create:function() {
    var My = this;
    return Html.Span.create().extend(function(self) {
      return {
        onset:function(rec) {},
        //
        init:function() {
          self.anchor = Html.AnchorAction.asOrder().into(self).bubble('onclick', self.anchor_onclick);
        },
        setClientId:function(cid) {
          self.cid = cid;
        },
        setValue:function(rec) {
          self.load(rec);
        },
        getValue:function() {
          return self.rec;
        },
        load:function(rec) {
          self.reset();
          self.rec = rec;
          if (rec) 
            self.anchor.setText(rec.trackDesc);
        },
        reset:function() {
          self.rec = null;
          self.anchor.setText('(Select Order)');
        },
        anchor_onclick:function() {
          if (self.cid)
            My.Pop.pop(self.cid, self.rec, function(rec) {
              self.setValue(rec);
              self.onset(rec);
            })
        }
      }
    })
  },
  Pop:{
    pop:function(cid, rec, onselect) {
      return Html.Pop.singleton_pop.apply(this, arguments);
    },
    create:function() {
      var My = this;
      return Html.Pop.create('Open Orders', 700).extend(function(self) {
        return {
          init:function() {
            self.table = Html.TableLoader.create_asBlue(self.content).extend(My.Table).bubble('onselect', self.table_onselect);
            self.cb = Html.CmdBar.create(self.content).del(self.del_onclick, 'Select None').exit(self.close);
          },
          onshow:function(cid, rec, onselect) {
            self.onselect = onselect;
            self.cb.showDelIf(rec);
            self.table.load(cid);
          },
          reset:function() {
            self.table.reset();
          },
          table_onselect:function(rec) {
            self.close();
            self.onselect(rec);
          },
          del_onclick:function() {
            self.table_onselect(null);
          }
        }
      })
    },
    Table:function(self) {
      return {
        onselect:function(rec) {},
        //
        init:function() {
          self.thead().trFixed().th('Category').w('15%').th('Item').w('40%').th('Ordered').w('15%').th('Sched/Obtained').w('30%');
          self.setTopFilter();
          self.setHeight(300);
        },
        load:function(cid) {
          self.reset();
          TrackItems.ajax(self).fetch_open(cid, function(recs) {
            self.recs = recs;
            self.draw();
          })
        },
        rowBreaks:function(rec) {
          return [rec._cat];
        },
        rowKey:function(rec) {
          return rec.trackItemId;
        },
        filter:function(rec) {
          return {'Category':rec._cat,'Ordered By':rec._orderedBy};
        },
        add:function(rec, tr) {
          tr.td(rec._cat, 'histbreak').select(AnchorTrackItem, null, null, 'wrap');
          if (rec.orderNotes) 
            Html.Div.create('notes').setText(rec.orderNotes).into(tr._cell);
          tr.td(rec._orderDate, 'nw').td(rec._schedDate, 'nw');
        }
      }
    }
  }
}

//
ClassHover = {
  onmouseover:function() {
    if (! this.className.endsWith('hover'))
      this.className += 'hover';
  },
  onmouseout:function() {
    if (this.className.endsWith('hover'))
      this.className = this.className.substr(0, this.className.length - 5);
  }
}
/**
 * Div ScanFileCheck
 *   ScanFile rec
 *   ImageScanThumb thumb
 *   InputCheck check
 *   Label label
 *   Anchor aremove
 */
ScanFileCheck = {
  create:function(container, rec, checked) {
    var self = Html.Div.create('ScanFile').into(container);
    return self.aug({
      oncheck:function(scanFile, checked) {},
      ondelete:function(scanFile, checked) {},
      onsortup:function(scanFile) {},
      onsortdown:function(scanFile) {},
      ondetach:function(scanFile) {},
      //
      init:function() {
        self.load(rec, checked);
      },
      load:function(rec, checked) {
        self.clean();
        self.rec = rec;
        self.check = Html.InputCheck.create().bubble('onclick', self.check_onclick).into(self).hide();
        self.wrapper = Html.Span.create('wrapper').into(self).bubble('onclick', self.wrapper_onclick);
        self.thumb = ImageScanThumb.create(self, rec, 70).bubble('onrotate', self.thumb_onrotate);
        self.label = Html.Label.create(null, rec.origFilename);
        self.aremove = Html.Anchor.create('remove').tooltip('Delete this file').bubble('onclick', self.aremove_onclick);
        self.up = Html.Anchor.create('up').aug(ClassHover).tooltip('Sort file up').bubble('onclick', self.up_onclick);
        self.down = Html.Anchor.create('down').aug(ClassHover).tooltip('Sort file down').bubble('onclick', self.down_onclick);
        self.detach = Html.Anchor.create('detach').tooltip('Detach this file').bubble('onclick', self.detach_onclick);
        self.ixcmds = Html.Table1Row.create(null, [self.up, self.down, self.detach]);
        Html.Table.create(self.wrapper, 'w100').tbody().tr().td(self.thumb).w('10%').td(self.label, 'p5').w('90%').td(self.aremove, 'rj').td(self.ixcmds, 'rj');
        self.check.checked = checked;
        self.draw();    
      },
      draw:function() {
        self.addClassIf('check', self.check.checked);
        if (self.isChecked()) {
          self.addClass('check');
          self.thumb.shrink(true);
          self.aremove.hide();
          self.ixcmds.show();
        } else {
          self.removeClass('check');
          self.thumb.shrink(false);
          self.aremove.show();
          self.ixcmds.hide();
        }
      },
      reload:function(rec) {
        self.load(rec, self.isChecked());
      },
      isChecked:function() {
        return self.check.checked;
      },
      setChecked:function(value) {
        self.check.checked = value;
        self.draw();
        self.oncheck(self, value);
      },
      resetZoom:function() {
        self.thumb.resetZoom();
      },
      //
      onmouseover:function() {
        if (! self.isChecked())
          self.style.backgroundColor = '#C3FDB8';
      },
      onmouseout:function() {
        if (! self.isChecked())
          self.style.backgroundColor = '';
      },
      thumb_onrotate:function() {
        self.rec.ajax().rotate(function(rec) {
          self.reload(rec);
          self.thumb.preview(true, Zoom.NO_DELAY, Zoom.USE_LAST_POS);
        })
      },
      aremove_onclick:function() {
        self.ondelete(self, self.check.checked);
        Html.Window.cancelBubble();
      },
      detach_onclick:function() {
        Html.Window.cancelBubble();
        Pop.Confirm.showYesNo('Are you sure you want to detach file ' + self.rec.origFilename + '?', function() {
          self.check.checked = false;
          self.draw();
          self.ondetach(self);
        })
      },
      up_onclick:function() {
        self.onsortup(self);
        self.up.onmouseout();
        Html.Window.cancelBubble();
      },
      down_onclick:function() {
        self.onsortdown(self);
        self.down.onmouseout();
        Html.Window.cancelBubble();
      },
      check_onclick:function() {
        self.draw();
        self.oncheck(self, self.check.checked);
      },
      wrapper_onclick:function() {
        if (self.isChecked()) {
          self.thumb.preview(! self.thumb.isPreviewing(), Zoom.NO_DELAY);
        } else {
          self.setChecked(true);
        }
      }
    })
  }
}
/**
 * Image ImageScanThumb
 *   Image zoom
 */
ImageScanThumb = {
  create:function(parent, rec, maxh, maxw) {
    var My = this;
    var h = String.toInt(rec.height || maxh);
    var w = String.toInt(rec.width || maxw);
    var size = ImageScanThumb.resize(h, maxh || 100, w, maxw || 50);
    var MyZoom = (rec._pdf) ? PdfZoom : ImageZoom;
    var max = Html.Window.getViewportDim();
    var zoomsize = ImageScanThumb.resize(h, max.height - 60, w, max.width - 100);
    var self = Html.Image.create(null, rec.src, size.h, size.w).into(parent);
    return self.aug({
      onrotate:function() {},
      //
      init:function() {
        self.parent = parent;
        self.h = size.h;
        self.w = size.w;
        self.rec = rec;
      },
      onmouseover:function() {
        self.preview(true);
      },
      onmouseout:function(e) {
        var to = Html.Window.getEventTo(e);
        if (! (to && to.isChildOf && to.isChildOf(self.zoom)))  
          self.preview(false);  
      },
      isPreviewing:function() {
        return self.zoom && self.zoom.isPreviewing(self);
      },
      preview:function(b, noDelay, useLastPos) {
        if (b) { 
          self.zoom = MyZoom.open(self, zoomsize, noDelay, useLastPos);
          if (self.zoom == null) {
            self._trying = true;
            pause(1, function() {
              if (self.zoom == null && self._trying)
                self.zoom = MyZoom.open(self, zoomsize, noDelay, useLastPos);
            })
          }
        } else {
          self._trying = null;
          MyZoom.close(self, noDelay);
        }
      },
      shrink:function(on) {
        if (on) 
          return self.setHeight(25).setWidth(25);
        else
          return self.setHeight(self.h).setWidth(self.w);
      },
      getInitPos:function() {
        if (parent.thumbInitPos == null)
          parent.thumbInitPos = self.getPosDim();
        return Object.clone(parent.thumbInitPos);
      },
      resetZoom:function() {
        self.preview(false);
        parent.thumbInitPos = null;
      }
    });
  },
  resize:function(h, maxh, w, maxw) {
    var r = h / w;
    if (h > maxh || w > maxw) {
      if (r > 1 && h > maxh) {
        r = maxh / h;
        h = maxh;
        w = w * r;
      } else {
        r = maxw / w;
        w = maxw;
        h = h * r;
      }
    }
    return {'h':h,'w':w,'maxh':maxh,'maxw':maxw};
  }
}
/**
 * Div Zoom
 */
Zoom = {
  NO_DELAY:true,
  USE_LAST_POS:true,
  //
  closeAll:function() {
    ImageZoom.close();
    PdfZoom.close();
  },
  pauseAll:function() {
    ImageZoom.pause(true);
    PdfZoom.pause(true);
  },
  resumeAll:function() {
    ImageZoom.pause(false);
    PdfZoom.pause(false);
  },
  create:function() {
    var My = this;
    return Html.Div.create('Zoom').into().hide().extend(function(self) {
      return {
        //
        init:function() {
          self.setPosition('absolute').invisible();  
          self.cap = My.Cap.create(self).bubble('onclose', self.cap_onclose);
          self.img = Html.Image.create().into(self);
        },
        open:function(thumb, size, noDelay, useLastPos) {
//          if (self.thumb == null)
//            self.load(thumb, size);
//          else if (self.thumb != thumb)
//            if (noDelay)
//              self.load(thumb, size);
//            else
//              return;
          self.load(thumb, size);
          self.preview(true, thumb, noDelay, useLastPos);
          return self;
        },
        close:function(thumb, noDelay) {
          if (thumb == null || self.thumb == thumb) 
            self.preview(false, thumb, noDelay);
        },
        pause:function(b) {
          self.paused = b;
          if (self.paused) 
            self.close();
        },
        //
        load:function(thumb, size) {
          self.hide();
          self.thumb = thumb;
          self.cap.load(thumb);
          self.img.setHeight(size.h).setWidth(size.w).set('src', thumb.src);
          self.previewing = false;
          //self.setWidth(size.maxw + 20);
        },
        cap_onclose:function() {
          self.preview(false);
        },
        onmousedown:Html.Window.cancelBubble,
        onmouseover:function() {
          self.preview(true, self.thumb);
        },
        onmouseout:function(e) {
          var to = Html.Window.getEventTo(e);
          if (to && (to == self.thumb || (to.isChildOf && to.isChildOf(self)))) 
            return;
          if (self.previewing) 
            self.preview(false, self.thumb);
        },
        isPreviewing:function(thumb) {
          return (self.thumb == thumb && self.previewing);
        },
        close_reset:function() {
          self.previewing = false;
          self._changingto = null;
          self.thumb = null;
          self.invisible();
        },
        preview:function(b, thumb, noDelay, useLastPos) {
          if (self.paused)
            return;
          if (thumb == null && ! b) 
            return self.close_reset();
          var delay = (noDelay) ? 0 : 1;
          if (self.thumb == thumb) {
            if (self.previewing == b) {
              self._changingto = null;
            } else {
              self._changingto = b;
              if (b) {
                pause(0.3 * delay, function() {
                  if (self.thumb == thumb && self._changingto) {
                    self.previewing = true;
                    self._changingto = null;
                    if (! useLastPos) {
                      var pos = thumb.getInitPos();
                      pos.left = pos.left + pos.width;
                      pos.top = pos.top - Html.Window.getScrollTop();  // absolute positioned zoom is out of flow
                      self.invisible().show().repos(pos);
                    }
                    self.visible().show();
                  }
                })
              } else {
                pause(0.7 * delay, function() {
                  if (self.thumb == thumb && self._changingto === false) 
                    self.close_reset();
                })
              }
            }
          }
        }
      }
    })
  },
  Cap:{
    create:function(container) {
      return Html.Tile.create(container, 'cap').extend(function(self) {
        return {
          onclose:function() {},
          //
          init:function() {
            //self.table = Html.Table2Col.create(self, null, self.label = Html.Label.create());
            self.table = Html.Table2Col.create(self, null, self.closer = Html.AnchorNoFocus.create(null, 'Close').bubble('onclick', self, 'onclose'));
          },
          load:function(thumb) {
            //self.label.setText(thumb.rec.origFilename);
          }
        }
      })
    }
  }
}
ImageZoom = {
  open:function(thumb, size) {
    return Html.Pop.singleton.call(this).open.apply(this._singleton, arguments);
  },
  close:function(thumb) {
    return Html.Pop.singleton.call(this).close.apply(this._singleton, arguments);
  },
  pause:function(value) {
    Html.Pop.singleton.call(this).pause.apply(this._singleton, arguments);
  },
  create:function() {
    var My = this;
    return Zoom.create().extend(function(self) {
      return {
        init:function() {
          self.cap.extend(My.Cap).bubble('onrotate', function() {
            if (self.thumb.onrotate)
              self.thumb.onrotate();
          })
        }
      }
    })
  },
  Cap:function(self) {
    return {
      onrotate:function() {},
      //
      init:function() {
        Html.AnchorNoFocus.create('rotate', 'Rotate').bubble('onclick', self, 'onrotate').into(self.table.left);
      }
    }
  }
}
PdfZoom = {
  open:function(thumb, size) {
    return Html.Pop.singleton.call(this).open.apply(this._singleton, arguments);
  },
  close:function(thumb) {
    return Html.Pop.singleton.call(this).close.apply(this._singleton, arguments);
  },
  pause:function(value) {
    Html.Pop.singleton.call(this).pause.apply(this._singleton, arguments);
  },
  create:function(thumb) {
    return Zoom.create().extend(function(self) {
      return {
        //
        init:function() {
          self.img.hide();
          self.iframe = Html.IFrame.create(null, null, 450, 350).into(self);
        },
        load:self.load.append(function(thumb, size) {
          self.iframe.set('src', thumb.rec.pdfsrc);
        })
      }
    })
  }    
}
/**
 * AnchorTab MultiAreaAtab
 */
MultiAreaAtab = {
  create:function() {
    return Html.AnchorTab.create().checks(C_Lookups.AREAS, 3, false).okCancel();
  }
}
/**
 * UploadPop ScanUploadPop
 */
ScanUploadPop = {
  pop:function() {
    return Html.Pop.singleton_pop.apply(this, arguments);
  },
  create:function() {
    return Html.UploadPop.create('Upload Scanned Files', 'uploadScans', 5).extend(function(self) {
      return {
        init:function() {
          self.donebox = Html.Div.create('information mb10 pt10').before(self.form).html('Your file(s) were uploaded successfully.<br>You may now select more files to upload, or click Cancel to begin indexing.');
        },
        oncomplete:function() {
          page.reload();
        },
        reset:self.reset.append(function() {
          self.donebox.hide();
        }),
        form_oncomplete_ok:function() {
          self.form.reset();
          self.donebox.show();
        }
      }
    })
  }
}
/**
 * UploadPop BatchUploadPop
 */
BatchUploadPop = {
  pop:function() {
    return Html.Pop.singleton_pop.apply(this, arguments);
  },
  create:function() {
    return Html.UploadPop.create('Upload Batch PDF', 'uploadBatch').extend(function(self) {
      return {
        oncomplete:function(filename) {
          Pop.Working.show('Batch upload successfully.<br>Splitting individual pages from batch PDF...');
          Ajax.Scanning.splitBatch(filename, function() {
            Pop.Working.close();
            page.reload();
          })
        }
      }
    })
  }
}
/**
 * Rec ScanFile
 */
ScanFile = Object.Rec.extend({
  isPdf:function() {
    return this._pdf;
  },
  //
  ajax:function() {
    var worker = Html.Window;
    var self = this;
    return {
      remove:function(callback) {
        Ajax.Scanning.deleteFile(self.scanFileId, callback);
      },
      rotate:function(callback) {
        Ajax.Scanning.rotate(self.scanFileId, worker, callback);
      }
    }
  }
})
ScanFiles = Object.RecArray.of(ScanFile, {
  ajax:function(worker) {
    var worker = worker || Html.Window;
    return {
      fetchUnindexed:function(callback) {
        Ajax.Scanning.getUnindexed(worker, callback);
      },
      fetchIndexedToday:function(callback) {
        Ajax.Scanning.getIndexedToday(worker, callback);
      }
    }
  }
})
ScanIndex = Object.Rec.extend({
  onload:function() {
    this.ScanFiles = ScanFiles.revive(this.ScanFiles);
  },
  ajax:function(worker) {
    var self = this;
    worker = worker || Html.Window;
    return {
      fetch:function(id, callback) {
        Ajax.Scanning.getIndex(id, worker, callback); 
      }
    }
  }  
})