<?php
require_once "php/forms/Form.php";
require_once "php/forms/utils/CommonCombos.php";
require_once "php/dao/RegistrationDao.php";
require_once "php/dao/BillingDao.php";
require_once "php/data/rec/sql/BillCodes.php";

class BillInfoForm extends Form {

  public $user_id;
  public $name;
  public $address1;
  public $address2;
  public $city;
  public $state;
  public $zip;
  public $card_type;
  public $card_number;
  public $exp_month;
  public $exp_year;
  public $balance;
  public $phone;
  public $bill_code;
  public $upfront_charge;
  public $register_text;
  
  // Combo lists
  public $states;

  // UI helpers
  public $mode;  // activating or updating
  public $modeHeader;
  public $modeCaption;
  public $billcodeOnFile;  // for comparing with bill_code to detect change
  
  const MODE_ACTIVATING = 0 ;
  const MODE_REACTIVATING = 1 ;
  const MODE_UPDATING = 2;

  public function __construct() {
    $this->states = CommonCombos::states();
    $this->setMode();
  }

  // Functions
  public function setMode() {
    global $myLogin;
    $this->unot = $myLogin->userId;
    
    
    
    if ($myLogin->onTrial) {
      $this->mode = BillInfoForm::MODE_ACTIVATING; 
      $this->modeHeader = "Activate Account";
      $this->modeCaption = "<p>Thank you for upgrading your trial to a full account. Please provide the following billing information.</p>";
    } else if ($myLogin->active) {
      $this->mode = BillInfoForm::MODE_UPDATING; 
      $this->modeHeader = "Update Billing Information";
      $this->modeCaption = "<p>Make any necessary changes and press Update to apply.</p>";
    } else {
      $this->mode = BillInfoForm::MODE_REACTIVATING;
      $this->modeHeader = "Re-Activate Account";
      if ($myLogin->expireReason == User0::EXPIRE_CARD_EXPIRED) {
        $this->modeCaption = "<p class='red'>" . $myLogin->getInactiveReason() . "</p>";
      } else {
        $this->modeCaption = "";
      }
      $this->modeCaption .= "<p>Please update your billing information as necessary to re-activate your account.</p>";
    }
  }

  public function setFromDatabase($dto) {
    $this->name = $dto->name;
    $this->address1 = $dto->address1;
    $this->address2 = $dto->address2;
    $this->city = $dto->city;
    $this->state = $dto->state;
    $this->zip = $dto->zip;
    $this->card_type = $dto->cardType;
    $this->card_number = $dto->cardNumber;
    $this->exp_month = $dto->expMonth;
    $this->exp_year = $dto->expYear;
    $this->balance = $dto->balance;
    $this->phone = $dto->phone;
    $this->ph_ac = $dto->phoneAc;
    $this->ph_pf = $dto->phonePf;
    $this->ph_nm = $dto->phoneNm;
    $this->bill_code = $dto->billCode->billCode;
    $this->upfront_charge = $dto->billCode->upFrontCharge;
    $this->register_text = $dto->billCode->registerText;
    $this->billcodeOnFile = $this->bill_code;
  }
  
  public function getActivationBillCode() {
    $bc = BillCodes::getForSignUp();
    $this->bill_code = $bc->billCode;
    $this->upfront_charge = $bc->upfrontCharge;
    $this->register_text = $bc->registerText;
  }

  public function setFromPost() {
    $this->unot = $_POST["unot"];
    $this->name = stripslashes($_POST["name"]);
    $this->address1 = stripslashes($_POST["address1"]);
    $this->address2 = stripslashes($_POST["address2"]);
    $this->city = stripslashes($_POST["city"]);
    $this->state = stripslashes($_POST["state"]);
    $this->zip = $_POST["zip"];
    $this->card_type = $_POST["card_type"];
    $this->card_number = $_POST["card_number"];
    $this->exp_month = $_POST["exp_month"];
    $this->exp_year = $_POST["exp_year"];
    $bal = str_replace(",", "", $_POST["balance"]);
    $this->balance = floatval(substr($bal,2,strlen($bal)-2));
    $this->phone = $_POST["phone"];
    $this->bill_code = $_POST["bill_code"];
    $this->upfront_charge = $_POST["upfront_charge"];
    $this->register_text = $_POST["register_text"];
    $this->billcodeOnFile = $_POST["billcodeOnFile"];
  }

  public function validate() {
    $this->resetValidationException();
    $this->addRequired("name", "Name", $this->name);
    $this->addRequired("address1", "Address Line 1", $this->address1);
    $this->addRequired("city", "City", $this->city);
    $this->addRequired("state", "State", $this->state);
    $this->addRequired("zip", "Zip code", $this->zip);
    $this->addRequired("card_number", "Card Number", $this->card_number);
    $this->addRequired("phone", "Phone Number", $this->phone);
    $now_year = date('Y', strtotime("now"));
    $now_mth = date('m', strtotime("now"));
    if ($this->exp_year < $now_year) {
      $this->validationException->add("exp_year", "Credit Card expiration year is invalid.");
    } else {
      if ($this->exp_year == $now_year) {
        if ($this->exp_month < $now_mth) {
          $this->validationException->add("exp_month", "Credit Card expiration month is invalid.");
        }
      }
    }
    $this->throwValidationException();
  }

  public function isBillCodeChanged() {
    return ($this->bill_code != $this->billcodeOnFile);
  }
  
  public function sendMail() {

    //  send mail
    global $myLogin;
    if (! $myLogin->isOnProd()) {
      return;
    }
    $user = RegistrationDao::getUserInfo($myLogin->uid);
    $to = $user["email"];
    if ($this->mode == BillInfoForm::MODE_ACTIVATING) {
      $this->sendActivationMail($to);
      return;
    }
    $message = "\r\n" . $user["name"] . ",\r\n\r\n";
    if ($this->mode == BillInfoForm::MODE_UPDATING) {
      $subject = "Clicktate Account Update";
      $message .= "This email is a notification that your billing/subscription changes have been recorded. Thank you for using Clicktate.";
    } else if ($this->mode == BillInfoForm::MODE_REACTIVATING) {
      $subject = "Clicktate Account Reactivation";
      $message .= "Thank you for updating your billing information. Your account has been re-activated.";
    } else {
      $subject = "Clicktate Billing";
      if ($this->upfront_charge <= 0) {
        $message .= "Thank you for activating your account.";
      } else {
        $message .= "Thank you for activating your account. Your credit card ending in ";
        $message .= substr($this->card_number, strlen($this->card_number)-4, 4);
        $message .= " has been charged $" . number_format($this->balance,2) . ".";
      }
    }
    $message .= "\r\n\r\nWe are glad you enjoy our product and always appreciate ";
    $message .= "any feedback or suggestions. \r\n\r\nThank you,\r\n";
    $message .= "Clicktate User Support";

    $headers = 'From: info@clicktate.com' . "\r\n";
    $headers .= 'Reply-To: info@clicktate.com' . "\r\n";
    $headers .= 'Return-Path: info@clicktate.com' . "\r\n";
    if ($this->mode != BillInfoForm::MODE_UPDATING) {
      $headers .= 'Bcc: activations@clicktate.com' . "\r\n";
    } else {
      $headers .= 'Bcc: info@clicktate.com' . "\r\n";
    }
    $headers .= 'MIME-Version: 1.0' . "\r\n";
    $headers .= 'Content-Type: text/plain; charset=UTF-8' . "\r\n";

    mail($to, $subject, $message, $headers);
  }
  
  public function sendActivationMail($to) {
		$subject = "Clicktate Activation: Next Steps";
		$message = file_get_contents("activate-email.html");
		$message = str_replace("Trial User", $this->name, $message);
		$headers  = 'From: info@clicktate.com' . "\r\n";
		$headers .= 'Reply-To: info@clicktate.com' . "\r\n";
		$headers .= 'Return-Path: info@clicktate.com' . "\r\n";
		$headers .= 'Bcc: info@clicktate.com' . "\r\n";
		$headers .= 'MIME-Version: 1.0' . "\r\n";
		$headers .= 'Content-Type: text/html; charset=UTF-8' . "\r\n";
		mail($to, $subject, $message, $headers);    
  }
}
?>