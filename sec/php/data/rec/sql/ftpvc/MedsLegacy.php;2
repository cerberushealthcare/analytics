<?php
require_once 'php/data/rec/sql/_DataRec.php';
//
/**
 * Medications (Legacy)
 * @author Warren Hornsby
 */
class MedsLegacy extends Meds {
  /**
   * Build face recs from unprocessed session history
   * @param int cid
   */
  public static function rebuildFromSessions($cid) {
    $sessions = SessionMed::fetchAllUnbuilt($cid);
    $last = end($sessions);
    if ($last) { 
      Rec::sort($sessions, new RecSort('name', '-date', '-dateUpdated', 'quid'));
      $meds = FaceMed::fetchAll($cid);
      foreach ($sessions as $sess) {
        $key = $sess->getKeyValue();
        $med = geta($meds, $key);
        if ($med) {
          if ($sess->isNewerThan($med)) {
            if ($sess->isDiscontinued()) {
              $med->deactivate();
            } else {
              $med->setFromSession($sess);
              $med->save();
            }
            $meds[$key] = $med;
          }
        } else {
          $med = FaceMed::fromSession($sess);
          $med->active = ! $sess->isDiscontinued();
          $med->save();
          $meds[$key] = $med;
        }
      }
      self::checkExpiration($meds);
      SessionMed::markAsBuilt($last);
    }
  }
  /**
   * Get active facesheet records
   * @param int $cid
   * @return array(FaceMed,..)
   */
  public static function getActive($cid) {
    self::rebuildFromSessions($cid);
    $recs = FaceMed::fetchAllActive($cid);
    Rec::sort($recs, new RecSort('expires', 'name'));
    return $recs; 
  }
  /**
   * Get facesheet records by name
   * @param int $cid
   * @return array(name=>FaceMed,..)
   */
  public static function getByName($cid) {
    return FaceMed::fetchAll($cid);
  }
  /**
   * Get history by date
   * @param int $cid
   * @param [FaceMed,..] $actives (optional)
   * @return array(SessionMed,..)
   */
  public static function getHistoryByDate($cid, $actives = null) {
    $recs = SessionMed::fetchAll($cid);
    SessionMed::addDateOnly($recs);
    Rec::sort($recs, new RecSort('-_dateOnly', 'name', '-date'));
    return $recs;
  }
  /**
   * Get history by name
   * @param int $cid
   * @param [FaceMed,..] $actives (optional)
   * @return array(SessionMed,..)
   */
  public static function getHistoryByName($cid, $actives = null) {
    $recs = SessionMed::fetchAll($cid);
    Rec::sort($recs, new RecSort('name', '-date'));
    return $recs;
  }
  /**
   * Save record from UI
   * @param stdClass $o JSON object
   * @return Med
   */
  public static function save($o) {
    global $myLogin;
    $rec = FaceMed::fromUi($o, $myLogin->userGroupId);
    if ($rec->getPkValue()) 
      $med = FaceMed::fetch($rec->getPkValue());
    else
      $med = FaceMed::fetchActiveKeyMatch($rec);
    if ($med) {
      switch ($med->compareName($rec)) {
        case FaceMed::CMP_NAMES_DIFFERENT:
          $med = null;
          break;
        case FaceMed::CMP_NAME_SAME_DOSAGE_DIFF:
          $med->deactivate();
          $med = null;
          break;
      }
    }
    if ($med) {
      $rec->setPkValue($med->getPkValue());
      AuditMed::copyUpdate($med);
    } else {
      $rec->setPkValue(null);
      AuditMed::copyAdd($rec);
    }
    $rec->rx = null;
    $rec->active = true;
    $rec->setExpires();
    $rec->save();
    return $rec;
  }
  /**
   * Deactivate record from UI
   * @param int $id
   * @return Med
   */
  public static function deactivate($id) { 
    $med = FaceMed::fetch($id);
    if ($med) {
      $med->deactivate();
      AuditMed::copyDeactivate($med);
      return $med;
    }
  }
  /**
   * Save audit records for printing RX
   * @param [Med,..] $meds
   * @return Med last one updated
   */
  public static function auditRxPrint($meds) {
    foreach ($meds as $m) {
      $med = FaceMed::fetch($m->dataMedId);
      $med->date = nowShortNoQuotes();
      $med->active = true;
      $med->rx = $m->rx;
      $med->save();
      if ($med->rx) { 
        $id = AuditMed::copyRx($med);
        Auditing::logPrintRx($med->clientId, $id);
      }
    }
    return $med;
  }
  /**
   * @return string static JSON of Med data object 
   */
  public static function getStaticJson() {
    return Med::getStaticJson();
  }
  //
  private static function checkExpiration($meds) {
    foreach ($meds as $med) 
      if ($med->isExpired())
        $med->deactivate();
  }
}
//
/**
 * Medication
 */
class Med extends DataRec {
  //
  public $dataMedId;
  public $userGroupId;
  public $clientId;
  public $sessionId;
  public $date;  
	public $quid;
	public $index;
	public $name;
	public $amt;
	public $freq;
	public $asNeeded;
	public $meals;
	public $route;
	public $length;
	public $disp;
	public $text;
	public $rx;
	public $active;   
	public $expires;
	public $dateUpdated;
	public $source;
  //
	public function getSqlTable() {
    return 'data_meds';
  }
  public function getKey() {
    return 'name';
  }
  public function getJsonFilters() {
    return array(
      'date' => JsonFilter::informalDate(),
      'dateUpdated' => JsonFilter::informalDateTime());
  }
  /**
   * @return true if a legacy-created med
   */
  public function isSourceLegacy() {
    return $this->source == null || $this->source == 0;
  }
  /**
   * @return string 
   */
  public function formatSig() {
    $sig = array();
    if (! isBlank($this->amt))
      $sig[] = $this->amt; 
    if (! isBlank($this->freq))
      $sig[] = $this->freq;
    if (! isBlank($this->route)) 
      $sig[] = $this->route;
    if ($this->asNeeded) 
      $sig[] = 'as needed';
    if ($this->meals) 
      $sig[] = 'with meals';
    if (! isBlank($this->length))
      $sig[] = " for $this->length";
    return implode(' ', $sig);
  }
}
/**
 * Medication Face Record
 */
class FaceMed extends Med {
  //
  const CMP_NAMES_DIFFERENT = 0;
  const CMP_NAME_SAME_DOSAGE_DIFF = 1;
  const CMP_NAMES_IDENTICAL = 2;
  //
  public function setFromSession($sess) {
    $rec = clone $sess;
    parent::_copyNonNullValues($this, $rec);
    if ($sess->isPlanAdded()) 
      $this->setExpires($this->date);
  }
  public function deactivate() {
    parent::_deactivate($this);
  }
  //
  /**
   * @return true if designated long-term or without a set length 
   */
  public function isLongTerm() { 
    return (trim($this->length) == '' || $this->length == 'long-term');
  }
  /**
   * @return bool
   */
	public function isExpired() {
	  if ($this->expires) 
	    return isPast($this->expires);
	}
	/**
	 * @param Med $med
	 * @return int CMP_
	 */
	public function compareName($med) {
	  if ($this->name == $med->name)
      return self::CMP_NAMES_IDENTICAL;
    $a1 = explode('(', $this->name);
    $a2 = explode('(', $med->name);
    if ($a1[0] == $a2[0])
      return self::CMP_NAME_SAME_DOSAGE_DIFF;
    else
      return self::CMP_NAMES_DIFFERENT;
  }
  /**
   * Set expiration date
   * @param string $date (optional)
   */
	public function setExpires($date = null) {
	  if ($date == null)
	    $date = $this->date;
	  if ($this->isLongTerm()) {
	    $this->expires = null;
	    $this->length = null;
	  } else {
	    if (strpos($this->length, 'day') > 0) {
        $days = intval($this->length); 
        $dt = strtotime($date);
	      $dt = mktime(0, 0, 0, date('n', $dt), date('j', $dt) + $days, date('Y', $dt));  // add days
	      $this->expires = date('Y-m-d', $dt);
	    }
	  }
	}
  //
  /**
   * @param object $o JSON
   * @param int ugid
   * @return Med
   */
  public static function fromUi($o, $ugid) {
    $med = new FaceMed();
    $med->dataMedId = $o->id;
    $med->userGroupId = $ugid;
    $med->clientId = $o->clientId;
    $med->name = $o->name;
    $med->amt = $o->amt;
    $med->freq = $o->freq;
    $med->asNeeded = $o->asNeeded;
    $med->meals = $o->meals;
    $med->route = $o->route;
    $med->length = $o->length;
    $med->disp = $o->disp;
    $med->text = $o->text;
    $med->date = nowNoQuotes();
    return $med;
  }
  /**
   * @param SessionMed $sess
   * @return FaceMed
   */
  public static function fromSession($sess) {
    return parent::_faceFromSession($sess, __CLASS__);
  } 
	/**
   * @param int $id
   * @return FaceMed
   */
  public static function fetch($id) {
    return parent::_fetchFace($id, __CLASS__);
  }
  /**
   * @param int $cid
   * @return array(name=>FaceMed,..) 
   */
  public static function fetchAll($cid) {
    return parent::_fetchFaces($cid, __CLASS__);
  }
  /**
   * @param int $cid
   * @return array(FaceMed,..)
   */
  public static function fetchAllActive($cid) {
    return parent::_fetchActiveFaces($cid, __CLASS__);
  }
  /**
   * @param FaceMed $med
   * @return FaceMed (if one exists; may be the same as that supplied)
   */
  public static function fetchActiveKeyMatch($med) {
    return parent::_fetchActiveKeyMatch($med);
  }
  /**
   * @param int $cid
   * @return FaceMed
   */
  public static function asCriteria($cid) {
    return parent::_asFaceCriteria($cid, __CLASS__);
  }  
}
//
/**
 * Medication Session Record
 */
class SessionMed extends Med implements NoAudit {
	//
  const QUID_CURRENT       = 'meds.meds.@addMed';
  const QUID_ADD           = 'med mgr.medMgr.@addMed';
  const QUID_DISCONTINUE   = 'med mgr.medMgr.@dcMed';
  const QUID_REFILL        = 'med mgr.medMgr.@rfMed'; 
  const QUID_FS_ADD        = 'fs.add'; 
  const QUID_FS_CHANGE     = 'fs.change'; 
  const QUID_FS_DEACTIVATE = 'fs.deactivate'; 
  const QUID_FS_RX         = 'fs.rx';
  const QUID_MSG_REFILL    = 'response.callInRx.@rfMed';
  //
  public function __clone() {
    parent::__clone();
    $this->quid = null;
    $this->index = null;
    $this->rx = null;
    $this->amt = nullify($this->amt);
    $this->freq = nullify($this->freq);
    $this->asNeeded = nullify($this->asNeeded);
    $this->meals = nullify($this->meals);
    $this->route = nullify($this->route);
    $this->length = nullify($this->length);
    $this->disp = nullify($this->disp);
    $this->text = nullify($this->text);
  }
  public function toJsonObject() {
    $o = parent::toJsonObject();
    $o->quid = $this->getQuidText();
    return $o;
  }
  protected function getQuidText() {
    switch ($this->quid) {
      case self::QUID_ADD:
      case self::QUID_FS_ADD:
      case 'plan.plan.@addMed':
      case 'plan.meds.@addMed':
        return 'Added';
      case self::QUID_CURRENT:
        return 'Listed';
      case self::QUID_DISCONTINUE:
      case 'plan.meds.@dcMed':
      case 'plan.plan.@dcMed':
        return 'Discontinued';
      case self::QUID_FS_CHANGE:
        return 'Changed';
      case self::QUID_FS_DEACTIVATE:
        return 'Deactivated';
      case self::QUID_REFILL:
      case self::QUID_MSG_REFILL:
      case 'plan.plan.@rfMed':
        return 'Refilled';
      case self::QUID_FS_RX:
        return 'Printed';
    }
  }
  /**
   * @return true if added from plan (from a session)
   */
  public function isPlanAdded() {
    return ($this->quid == self::QUID_ADD);
  }
  /**
   * @return true if marked discontinued 
   */
  public function isDiscontinued() {
    switch ($this->quid) {
      case self::QUID_DISCONTINUE:
      case 'plan.meds.@dcMed':
      case 'plan.plan.@dcMed':
        return true;
      default:
        return false;
    }
  }
  //
  /**
   * @param int $cid
   * @return array(SessionMed,..)
   */
  public static function fetchAll($cid) {
    $c = self::asCriteria($cid);
    return self::fetchAllBy($c);
  }
  /**
   * @param int $cid
   * @return array(SessionMed,..)
   */
  public static function fetchAllUnbuilt($cid) {
    return parent::_fetchAllUnbuilt($cid, __CLASS__);
  }
	/**
   * @param SessionMed $sess last session record (e.g. highest PK) @see fetchAllUnbuilt()
   */
  public static function markAsBuilt($sess) {
    parent::_markAsBuilt($sess);
  }
  /**
   * Add _dateOnly field to meds in array
   * @param [SessionMed,..] $meds
   * @return array(SessionMed,..)
   */
  public static function addDateOnly(&$meds) {
    foreach ($meds as &$med) 
      $med->_dateOnly = dateToString($med->date);
    return $meds;
  }
  /**
   * Sync active flags of history with current actives  
   * @param [SessionMed,..] $meds
   * @param [FaceMed,..] $actives
   */
  public static function syncActiveFlags(&$meds, $actives) {
    foreach ($meds as &$med) 
      $med->active = geta($actives, $med->getKey() != null);
  }
  /**
   * @param int $cid
   * @return SessionMed
   */
  public static function asCriteria($cid) {
    $c = parent::_asSessCriteria($cid, __CLASS__);
    $c->quid = CriteriaValue::notEquals(self::QUID_CURRENT);
    $c->name = CriteriaValue::isNotNull();
    return $c;
  }
}
/**
 * Medication Face Audit Record (SID=0)
 */
class AuditMed extends Med implements NoAudit {
  /**
   * @param string $quid Med:QUID_
   * @return int pk of new audit
   */
  public static function copy($face, $quid) {
    $rec = parent::_auditFromFace($face, __CLASS__);
    $rec->quid = $quid;
    $rec->save();
    return $rec->dataMedId;
  }
  public static function copyUpdate($face) {
    self::copy($face, SessionMed::QUID_FS_CHANGE);
  }
  public static function copyAdd($face) {
    self::copy($face, SessionMed::QUID_FS_ADD);
  }
  public static function copyDeactivate($face) {
    self::copy($face, SessionMed::QUID_FS_DEACTIVATE);
  }
  public static function copyRx($face) {
    return self::copy($face, Med::QUID_FS_RX);
  }
}
?>