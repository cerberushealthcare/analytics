<?php
require_once 'php/data/rec/sql/_SqlRec.php';
/**
 * Leveled Access Data Rec
 * For tables with mix of app-level (UGID=0) and group-level (UGID=#) records
 */
abstract class SqlLevelRec extends SqlRec {
  /*
  public $someId;
  public $userGroupId;
  public ..  // rest of fields 
  */
  const APP_LEVEL_UGID = '0';
  //
  public function getPkFieldCount() {
    return 2;
  }
  public function isAppLevel() {
    return self::isAppLevelUgid($this->userGroupId);
  }
  public function setUserGroupCriteria($ugid) {
    $this->userGroupId = CriteriaValues::_or(CriteriaValue::equals(self::APP_LEVEL_UGID), CriteriaValue::equals($ugid)); 
  }
  public function setAppLevelCriteria() {
    $this->userGroupId = self::APP_LEVEL_UGID;
  }
  //
  /**
   * Fetch topmost level for primary key
   * @param int $id
   * @param int $ugid
   * @return SqlLevelRec for group-level if exists, else app-level
   */
  static function fetchTopLevel($id, $ugid) {
    $c = new static($id);
    $c->setUserGroupCriteria($ugid);
    $recs = self::fetchAllBy($c->setFetchCriteria(), new RecSort('-userGroupId'));
    return current($recs);
  }
  static function fetchAppLevel($id) {
    $c = new static($id);
    $c->setAppLevelCriteria();
    return self::fetchOneBy($c);
  }
  /**
   * @param int $ugid
   * @return SqlLevelRec 
   */
  static function asCriteria($ugid) {
    $c = new static();
    $c->setUserGroupCriteria($ugid);
    return $c; 
  }
  static function asAppLevelCriteria() {
    $c = new static();
    $c->setAppLevelCriteria();
    return $c;
  }
  static function isAppLevelUgid($ugid) {
    return $ugid == self::APP_LEVEL_UGID;
  }
  //
  protected function authenticateUserGroupId($ugid, $forReadOnly = false) {
    if ($ugid instanceof CriteriaValues) {
      $ugids = $ugid->getInnerValues();
      foreach ($ugids as $ug) 
        $this->authenticateUserGroupId($ug, $forReadOnly);
    } else {
      if (self::isAppLevelUgid($ugid)) {
        if ($forReadOnly) {
          return;  // OK for all to read
        } else {
          global $myLogin;
          if ($myLogin->isAdmin())  
            return;  // OK for admins to update
          else
            throw new SecurityException('Admin-only operation for ' . $this->getMyName());
        }
      }
      parent::authenticateUserGroupId($ugid, $forReadOnly);
    }
  }
}
/**
 * Client Level Rec
 * Adds client-level (non-null CID) to app-level and group-level
 */
abstract class SqlClientLevelRec extends SqlLevelRec {
  /*
  public $someId;
  public $userGroupId;
  public $clientId;
  public ..  // rest of fields 
  */
  const GROUP_LEVEL_CID = '0';
  //
  public function getPkFieldCount() {
    return 3;
  }
  public function isGroupLevel() {
    return ! $this->isAppLevel() && self::isGroupLevelCid($this->clientId);
  }
  public function isClientLevel($cid = null) {
    return ($cid) ? $this->clientId == $cid : $this->clientId > 0;
  }
  public function setClientLevelCriteria($cid) {
    if ($cid)
      $this->clientId = CriteriaValues::_or(CriteriaValue::equals(self::GROUP_LEVEL_CID), CriteriaValue::equals($cid));
    else
      $this->clientId = self::GROUP_LEVEL_CID; 
  }
  //
  /**
   * Fetch topmost level for primary key
   * @param int $id
   * @param int $ugid
   * @param int $cid (optional)
   * @return SqlLevelRec for client-level if exists, else group-level if exists, else app-level
   */
  static function fetchTopLevel($id, $ugid, $cid = null) {
    $c = new static($id);
    $c->setUserGroupCriteria($ugid);
    $c->setClientLevelCriteria($cid);
    $recs = self::fetchAllBy($c->setFetchCriteria(), new RecSort('-clientId, -userGroupId'));
    return current($recs);
  } 
  /**
   * Fetch topmost levels 
   * @param int $ugid
   * @param int $cid (optional)
   */
  static function fetchTopLevels($ugid, $cid = null) {
    $c = new static();
    $c->setUserGroupCriteria($ugid);
    $c->setClientLevelCriteria($cid);
    if ($cid) {
      $j1 = new static();
      $j1->userGroupId = CriteriaValue::greaterThanNumeric('T0.user_group_id');
      $j2 = new static();
      $j2->userGroupId = CriteriaValue::equalsNumeric('T0.user_group_id');
      $j2->clientId = CriteriaValue::greaterThanNumeric('T0.client_id'); 
      $c->JoinSelf = CriteriaJoin::notExists(array($j1, $j2), 'ipc');
    }
    $recs = self::fetchAllBy($c->setFetchCriteria());
    return $recs;
  }
  /**
   * @param int $ugid
   * @param int cid (optional)
   * @return SqlClientLevelRec 
   */
  static function asCriteria($ugid, $cid = null) {
    $c = parent::asCriteria($ugid);
    $c->setClientLevelCriteria($cid);
    return $c;
  }
  static function isGroupLevelCid($cid) {
    return $cid == self::GROUP_LEVEL_CID;
  }
  //
  protected function authenticateClientId($clientId, $forReadOnly = false) {
    if ($clientId instanceof CriteriaValues) {
      $cids = $clientId->getInnerValues();
      foreach ($cids as $cid) 
        $this->authenticateClientId($cid, $forReadOnly);
    } else {
      if (! self::isGroupLevelCid($clientId))
        parent::authenticateClientId($clientId, $forReadOnly);
    }
  }
}
