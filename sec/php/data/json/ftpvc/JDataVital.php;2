<?php
require_once 'php/data/json/_util.php';

/**
 * Vitals
 * Facesheet Data Record
 *
 * Organization:
 *   ugid, cid,..
 *     sid>0, date=DOS, index=oix  // built from closed note
 *     sid=NULL, agent             // facesheet summary record
 */
class JDataVital {
  //
  public $id;
  public $userGroupId;
  public $clientId;
  public $sessionId;
  public $date;     // '2009-05-20'
  public $pulse;
  public $resp;
  public $bpSystolic;
  public $bpDiastolic;
  public $bpLoc;
  public $temp;
  public $wt;
  public $wtUnits;
  public $height;
  public $hc;
  public $hcUnits;
  public $wc;
  public $wcUnits;
  public $o2Sat;
  public $o2SatOn;
  public $bmi;
  public $htUnits;
  public $updated;
  //
  // Date helpers
  public $time;
  public $dateText; // 'Today 1:30PM'
  public $dateCal;  // '02-Jun-2009'
  //
  // Metric equivalents
  public $htcm;  
  public $wtkg;
  //
  // Chron age assigned after construction, for graphing
  public $cagey;
  public $cagem;  
  //
  const SQL_FIELDS = 'data_vitals_id, user_group_id, client_id, session_id, date, pulse, resp, bp_systolic, bp_diastolic, bp_loc, temp, wt, wt_units, height, ht_units, hc, hc_units, wc, wc_units, o2_sat, o2_sat_on, bmi, date_updated';
  //
  public static $propsToQuid = array(
      'pulse'        => 'vitals.pulse',
      'resp'         => 'vitals.rr', 
      'bpSystolic'   => 'vitals.sbp', 
      'bpDiastolic'  => 'vitals.dbp', 
      'bpLoc'        => 'vitals.loc', 
      'temp'         => 'vitals.temp', 
      'wt'           => 'vitals.#Weight', 
      'wtUnits'      => 'vitals.lbsKgs', 
      'height'       => 'vitals.#Height', 
      'htUnits'      => 'vitals.unitsHt', 
      'hc'           => 'vitals.#hc', 
      'hcUnits'      => 'vitals.inCm', 
      'wc'           => 'vitals.#wc', 
      'wcUnits'      => 'vitals.inCmWC', 
      'o2Sat'        => 'vitals.#O2Sat', 
      'o2SatOn'      => 'vitals.O2SatOn', 
      'bmi'          => 'vitals.bmi' 
      );

      public function __construct($id, $userGroupId, $clientId, $sessionId, $date, $pulse, $resp, $bpSystolic, $bpDiastolic, $bpLoc, $temp, $wt, $wtUnits, $height, $htUnits, $hc, $hcUnits, $wc, $wcUnits, $o2Sat, $o2SatOn, $bmi, $updated) {
        $this->id = $id;
        $this->userGroupId = $userGroupId;
        $this->clientId = $clientId;
        $this->sessionId = $sessionId;
        $this->date = dateToString($date);
        $this->dateText = formatInformalDate($date, true);
        $time = formatTime($date);
        if ($time)
          $this->time = $time; 
          $this->dateText .= " $time";          
        $this->dateCal = formatDate($date);
        $this->pulse = ($pulse == 'Reviewed') ? null : $pulse;
        $this->resp = $resp;
        $this->bpSystolic = $bpSystolic;
        $this->bpDiastolic = $bpDiastolic;
        $this->bpLoc = $bpLoc;
        $this->temp = $temp;
        $this->wt = $wt;
        $this->wtUnits = $wtUnits;
        $this->height = $height;
        $this->htUnits = $htUnits;
        if ($this->height) {
          $this->htcm = $this->height * 2.54;  // todo standardize
        }
        if ($this->wt) {
          $this->wtkg = $this->wt * 0.45359;
        }
        $this->hc = $hc;
        $this->hcUnits = $hcUnits;
        $this->wc = $wc;
        $this->wcUnits = $wcUnits;
        $this->o2Sat = $o2Sat;
        $this->o2SatOn = $o2SatOn;
        $this->bmi = $bmi;
        $this->updated = $updated;
      }
      public function getBp() {
        return $this->bpSystolic . $this->bpDiastolic . ' ' . $this->bpLoc;
      }
      public function getO2() {
        $s = $this->o2Sat;
        if ($s != null) {
          $s .= ' - ' . $this->o2SatOn;
        }
        return $s;
      }
      public function getAllValues() {
        $a = array();
        if ($this->pulse != null) {
          $a[] = 'Pulse: ' . $this->pulse;
        }
        if ($this->resp != null) {
          $a[] = 'Resp: ' . $this->resp;
        }
        if ($this->bpSystolic != null) {
          $a[] = 'BP: ' . $this->getBp();
        }
        if ($this->temp != null) {
          $a[] = 'Temp: ' . $this->temp;
        }
        if ($this->wt != null) {
          $a[] = 'Wt: ' . $this->wt;
        }
        if ($this->height != null) {
          $a[] = 'Height: ' . $this->height;
        }
        if ($this->hc != null) {
          $a[] = 'HC: ' . $this->hc;
        }
        if ($this->wc != null) {
          $a[] = 'WC: ' . $this->wc;
        }
        if ($this->o2Sat != null) {
          $a[] = 'O2: ' . trim($this->o2Sat . ' ' . $this->o2SatOn);
        }
        if ($this->bmi != null) {
          $a[] = 'BMI: ' . $this->bmi;
        }
        return $a;
      }
      public function out() {
        $out = '';
        $out = nqq($out, 'id', $this->id);
        $out = nqq($out, 'clientId', $this->clientId);
        $out = nqq($out, 'sessionId', $this->sessionId);
        $out = nqq($out, 'date', $this->date);
        $out = nqq($out, 'time', $this->time);
        $out = nqq($out, 'dateText', $this->dateText);
        $out = nqq($out, 'dateCal', $this->dateCal);
        $out = nqq($out, 'cagey', $this->cagey);
        $out = nqq($out, 'cagem', $this->cagem);
        $out = nqq($out, 'pulse', $this->pulse);
        $out = nqq($out, 'resp', $this->resp);
        $out = nqq($out, 'bp', $this->getBp());
        $out = nqq($out, 'bpSystolic', $this->bpSystolic);
        $out = nqq($out, 'bpDiastolic', $this->bpDiastolic);
        $out = nqq($out, 'bpLoc', $this->bpLoc);
        $out = nqq($out, 'temp', $this->temp);
        $out = nqq($out, 'wt', $this->wt);
        $out = nqq($out, 'wtUnits', $this->wtUnits);
        $out = nqq($out, 'wtkg', $this->wtkg);
        $out = nqq($out, 'height', $this->height);
        $out = nqq($out, 'htcm', $this->htcm);
        $out = nqq($out, 'htUnits', $this->htUnits);
        $out = nqq($out, 'hc', $this->hc);
        $out = nqq($out, 'hcUnits', $this->hcUnits);
        $out = nqq($out, 'wc', $this->wc);
        $out = nqq($out, 'wcUnits', $this->wcUnits);
        $out = nqq($out, 'o2Sat', $this->o2Sat);
        $out = nqq($out, 'o2SatOn', $this->o2SatOn);
        $out = nqq($out, 'o2', $this->getO2());
        $out = nqq($out, 'bmi', $this->bmi);
        $out = nqqas($out, 'all', $this->getAllValues());
        return cb($out);
      }
      public function anyDataSet() {
        return (
        $this->pulse != null ||
        $this->resp != null ||
        $this->bpSystolic != null ||
        $this->temp != null ||
        $this->wt != null ||
        $this->height != null ||
        $this->hc != null ||
        $this->wc != null ||
        $this->o2Sat != null);
      }
      public function copySetData($dto) {
        if ($dto->pulse != null) {
          $this->pulse = $dto->pulse;
        }
        if ($dto->resp != null) {
          $this->resp = $dto->resp;
        }
        if ($dto->bpSystolic != null) {
          $this->bpSystolic = $dto->bpSystolic;
          $this->bpDiastolic = $dto->bpDiastolic;
          $this->bpLoc = $dto->bpLoc;
        }
        if ($dto->temp != null) {
          $this->temp = $dto->temp;
        }
        if ($dto->wt != null) {
          $this->wt = $dto->wt;
          $this->wtUnits = $dto->wtUnits;
        }
        if ($dto->height != null) {
          $this->height = $dto->height;
          $this->htUnits = $dto->htUnits;
        }
        if ($dto->bmi != null) {
          $this->bmi = $dto->bmi;
        }
        if ($dto->hc != null) {
          $this->hc = $dto->hc;
          $this->hcUnits = $dto->hcUnits;
        }
        if ($dto->wc != null) {
          $this->wc = $dto->wc;
          $this->wcUnits = $dto->wcUnits;
        }
        if ($dto->o2Sat != null) {
          $this->o2Sat = $dto->o2Sat;
          $this->o2SatOn = $dto->o2SatOn;
        }
      }

      // Static functions
      public static function copy($dto) {
        return new JDataVital(
        null,
        $dto->userGroupId,
        $dto->clientId,
        $dto->sessionId,
        $dto->date,
        $dto->pulse,
        $dto->resp,
        $dto->bpSystolic,
        $dto->bpDiastolic,
        $dto->bpLoc,
        $dto->temp,
        $dto->wt,
        $dto->wtUnits,
        $dto->height,
        $dto->htUnits,
        $dto->hc,
        $dto->hcUnits,
        $dto->wc,
        $dto->wcUnits,
        $dto->o2Sat,
        $dto->o2SatOn,
        $dto->bmi,
        $dto->updated
        );
      }
}
?>