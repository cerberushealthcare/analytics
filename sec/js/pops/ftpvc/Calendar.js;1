/**
 * Calendar Pop Controller
 * Requires: Pop.js, DateUi.js
 */
var Calendar = {
  callback:null,
  //
  date:null,
  now:null,
  //
  todayVal:null,
  year:null, 
  month:null,
  //
  cboMonth:null,
  cboYear:null,
  tbody:null,
  title:null,
  today:null,
  //
  ONE_DAY:86400000,
  START_YEAR:1900,
  /*
   * Show calendar pop
   * - value: optional
   * - callback(DateValue) on calendar save
   */
  pop:function(value, callback) {
    this.load(value, callback);
    Pop.show('pop-cal', Pop.POS_MOUSE);
  },
  load:function(value, callback) {
    this.callback = callback;
    this.tbody = $('cal-tbody');
    this.title = $('cal-title');
    this.today = $('cal-today');
    this.set(value);
  },
  set:function(value) {
    this.now = new Date();
    this.todayVal = (new Date(this.now.getFullYear(), this.now.getMonth(), this.now.getDate())).valueOf();
    this.date = DateUi.toDate(value);
    var d = (this.date) ? this.date : this.now;
    this.year = d.getFullYear();
    this.month = d.getMonth();
    this._loadCombos();
    this._drawCalendar();
  },
  setByCombos:function() {
    this.month = this.cboMonth.selectedIndex;
    this.year = val(this.cboYear.value);
    this._drawCalendar();
  },
  setToday:function() {
    this.month = this.now.getMonth();
    this.year = this.now.getFullYear();
    this._drawCalendar();
  },
  onClick:function() {
    var dv = null;
    if (window.event && window.event.srcElement) {
      var day = window.event.srcElement.day;
      if (day) {
        dv = DateValue.fromYMD(this.year, this.month, day);
      }
    }
    if (dv) { 
      this.callback(dv);
      Pop.close();
    }
  },
  nextMonth:function() {
    if (this.month == 11) {
      this.month = 0;
      this.year++;
    } else {
      this.month++;
    }
    this._drawCalendar();
  },
  prevMonth:function() {
    if (this.month == 0) {
      this.month = 11;
      this.year--;
    } else {
      this.month--;
    }
    this._drawCalendar();
  },
  pClose:function() {
    Pop.close();
  },
  //
  _loadCombos:function() {
    if (this.cboMonth == null) {
      this.cboMonth = $('cal-month');
      this.cboYear = $('cal-year');
      for (var m = 0; m < 12; m++)
        addOpt(this.cboMonth, m, DateUi.getMonthName(m));
      for (var y = Calendar.START_YEAR, ly = this.now.getFullYear() + 10; y <= ly; y++) 
        addOpt(this.cboYear, y, y);
    }
  },
  _setCombos:function() {
    this.cboMonth.selectedIndex = this.month;
    this.cboYear.selectedIndex = this.year - Calendar.START_YEAR;
  },
  _drawCalendar:function() {
    this.title.innerText = DateUi.getMonthName(this.month) + ' ' + this.year;
    this._setCombos();
    var dFirstOfMonth = new Date(this.year, this.month, 1);  // first Sunday to display
    var dCounter = new Date(dFirstOfMonth.valueOf() - dFirstOfMonth.getDay() * Calendar.ONE_DAY);
    var todayShown = false;
    var tr, td;
    for (var row = 0; row < 6; row++) {
      tr = this.tbody.rows[row];
      for (var cell = 0; cell < 7; cell++) {
        td = tr.cells[cell];
        if (dCounter.getMonth() == this.month) {
          td.day = dCounter.getDate();
          td.innerText = td.day;
          if (this._equalsSetDate(dCounter)) 
            td.className = 'setting';
          else 
            if (dCounter.valueOf() == this.todayVal) { 
              td.className = 'today';
              todayShown = true;
            } else {
              td.className = (cell == 0 || cell == 6) ? 'weekend' : 'day';
            }
        } else {
          td.innerHTML = '&nbsp;';
          td.className = 'offDay';
        }
        dCounter.setDate(dCounter.getDate() + 1);
      }
    }
    this.today.style.visibility = (todayShown) ? 'hidden' : '';
  },
  _equalsSetDate:function(d) {
    return this.date && d.getMonth() == this.date.getMonth() && d.getFullYear() == this.date.getFullYear() && d.getDate() == this.date.getDate();
  }
};
