<?php
require_once 'php/data/json/_util.php';

/**
 * Allergy 
 * Facesheet Data Record
 * 
 * Organization:
 *   ugid, cid,..
 *     sid>0, date=DOS, index=oix  // built from closed note
 *     sid=NULL, agent             // facesheet summary record
 */
class JDataAllergy {
  //
  public $id;
  public $userGroupId;
  public $clientId;
  public $sessionId;
  public $date;  // dos
  public $index;
  public $agent;
  public $reactions;
  public $active;
  public $updated;
  public $source;
  //
  const SQL_FIELDS = 'data_allergies_id, user_group_id, client_id, session_id, date, `index`, agent, reactions, active, date_updated, source';
  const QUID = 'allerNew.!addAllergy';
  //
  const SOURCE_INTERNAL    = 0;
  const SOURCE_NEWCROP     = 1; 
  //
  public function __construct($id, $userGroupId, $clientId, $sessionId, $date, $index, $agent, $reactions, $active, $updated, $source) {
    $this->id = $id;
    $this->userGroupId = $userGroupId;
    $this->clientId = $clientId;
    $this->sessionId = $sessionId;
    $this->date = $date;
    $this->index = $index;
    $this->agent = $agent;
    $this->reactions = $reactions;
    $this->active = $active;
    $this->updated = $updated;
    $this->source = $source;
	}
	public function out() {
    $out = '';
    $out = nqq($out, 'id', $this->id);
    $out = nqq($out, 'clientId', $this->clientId);
    $out = nqq($out, 'sessionId', $this->sessionId);
    $out = nqq($out, 'date', formatDate($this->date));
    $out = nqq($out, 'index', $this->index);
    $out = nqq($out, 'agent', $this->agent);
    $out = nqqo($out, 'reactions', $this->reactions);
    $out = nqqo($out, 'active', $this->active);
    $out = nqqo($out, 'source', $this->source);
    return cb($out);
	}
	/**
	 * Get json-encoded reactions value as PHP array
	 * Returns array('reaction',..)
	 */
	public function getReactions() {
	  return jsondecode($this->reactions);
	}
	//
	/**
	 * Static builder (clone)
	 * @param JDataAllergy $dto
	 * @return JDataAllergy
	 */
  public static function copy($dto) { 
    return new JDataAllergy(
        null,
        $dto->userGroupId,
        $dto->clientId,
        $dto->sessionId,
        $dto->date,
        $dto->index,
        $dto->agent,
        $dto->reactions,
        $dto->active,
        $dto->updated,
        $dto->source);
  }
  /**
   * Static builders
   * @param int $ugid
   * @param int $cid 
   * @param array $allergies; see NewCrop->getCurrent()
   * @return array('agent'->JDataAllergy,..)
   */
  public static function fromNewCropAllergies($ugid, $cid, $allergies) {
    $dtos = array();
    foreach ($allergies as $allergy) {
      $dto = JDataAllergy::fromNewCropAllergy($ugid, $cid, $allergy);
      $dtos[$dto->agent] = $dto;
    }
    return $dtos;
  }
  /**
   * Static builder
   * @param int $ugid
   * @param int $cid 
   * @param object $allergy; see NewCrop->getCurrent()
   * @return JDataAllergy
   */
  public static function fromNewCropAllergy($ugid, $cid, $allergy) {
    return new JDataAllergy(
      null,
      $ugid,
      $cid,
      null,
      nowNoQuotes(),
      null,
      $allergy->Allergy,
      null,
      true,
      null,
      JDataAllergy::SOURCE_NEWCROP
      );
  }
}
?>