<?php
require_once 'php/data/rec/sql/_SchedRec.php';
require_once 'php/data/rec/sql/_ClientRec.php';
//
/**
 * Scheduling
 * @author Warren Hornsby
 */
class Scheduling {
  //
  /** Get appointments */
  static function /*Appt[]*/getAppts($date = null/*today*/, $providerId = null/*mine*/, $days/*to include*/ = 1) {
    global $login;
    if ($providerId == null) 
      $providerId = $login->docId;
    if ($login->cerberus)
      $recs = Appt_Cerberus::fetchAll($login->userGroupId, $date, $days, $providerId, $login->cerberus);
    else
      $recs = Appt::fetchAll($login->userGroupId, $date, $days, $providerId);
    $recs = Appt::addPasts($recs);
    return RecSort::sort($recs, 'date', 'timeStart');
  }
  static function getAppts_2weeks($date, $providerId) {
    return static::getAppts($date, $providerId, 14);
  }
  /** Get appt history */
  static function getHistory($cid) {
    return Appt::fetchHistory($cid);
  }
} 
//
class Appt extends SchedRec {
  //
  public $schedId;
  public $userId;  
  public $userGroupId;
  public $clientId;
  public $date;
  public $timeStart;
  public $duration;
  public $closed;
  public $status;
  public $comment;
  public $type;
  public $schedEventId;
  public /*Client_Appt*/$Client;
  //
  public function toJsonObject(&$o) {
    parent::toJsonObject($o);
    $o->_date = formatLongDate($o->date);
    $o->_date2 = date("D, d-M-Y", strtotime($o->date));
  }
  public function addPast($today, $now) {
    if ($this->date < $today) {
      $this->_past = 1;
    } else if ($this->date == $today) {
      $time = new Military($this->timeStart);
      if ($time->minus($now) < 0)
        $this->_past = 1;
    }
  }
  //
  static function fetchAll($ugid, $date, $days = 1, $userId = null) {
    $date = $date ? dateToString($date) : nowShortNoQuotes();
    $c = new static();
    $c->userGroupId = $ugid;
    if ($days == 1) 
      $c->date = $date;
    else 
      $c->date = CriteriaValue::betweenDates(array($date, futureDate($days, 0, 0, $date)));
    $c->userId = $userId;
    $c->Client = Client_Appt::asJoin();
    return static::fetchAllBy($c, null, 500);
  }
  static function fetchHistory($cid) {
    $c = new static();
    $c->clientId = $cid;
    return static::fetchAllBy($c, new RecSort('-date', '-timeStart'));
  }
  static function addPasts($recs) {
    $now = Military::asNow();
    $today = nowShortNoQuotes() . ' 00:00:00';
    foreach ($recs as &$rec)
      $rec->addPast($today, $now);
    return $recs;
  }
}
class Appt_Cerberus extends Appt {
  //
  public $schedId;
  public $userId;  
  public $userGroupId;
  public $clientId;
  public $date;
  public $timeStart;
  public $duration;
  public $closed;
  public $status;
  public $comment;
  public $type;
  public $schedEventId;
  public /*Client_Appt*/$Client;
  public /*CR_Appt*/$CrAppt;
  //
  public function toJsonObject(&$o) {
    $o->_label = $this->getLabel($this->CrAppt->reason, $this->CrAppt->status);
    $o->_date = formatLongDate($o->date);
    $o->_date2 = date("D, d-M-Y", strtotime($o->date));
  }
  //
  static function fetchAll($ugid, $date, $days, $userId, $practiceId) {
    require_once 'php/c/patient-billing/CerberusBilling.php';
    $recs = CerberusBilling::fetchAppts($userId, $date, $days);
    return static::all($recs, $userId, $ugid, $practiceId);
  }
  static function all(/*CR_Appt[]*/$recs, $userId, $ugid, $practiceId) {
    $us = array();
    foreach ($recs as $rec) 
      $us[] = static::from($rec, $userId, $ugid, $practiceId);
    return $us;
  }
  static function from(/*CR_Appt*/$rec, $userId, $ugid, $practiceId) {
    $me = new static();
    $me->userId = $userId;
    $me->userGroupId = $ugid;
    $me->clientId = $rec->agency_clientid;
    $d = strtotime($rec->appt_start);
    $me->date = date('Y-m-d', $d) . ' 00:00:00';
    $me->timeStart = intval(date('Gi', $d));
    $me->duration = $rec->duration_min;
    if ($rec->agency_clientid) {
      $cid = ApiIdXref_Cerberus::lookupClientId($practiceId, $rec->agency_clientid); 
      $me->clientId = $cid;
      if ($cid)
        $me->Client = Client_Appt::fetch($cid);
    } else { 
      $me->comment = $rec->lastname;
      $me->schedEventId = 999;
    }
    $me->CrAppt = $rec;
    return $me;
  }
}
class Client_Appt extends ClientStub {
  //
  public function asJoin() {
    $me = new static();
    $me->Address = ClientAddress::asJoinHome();
    return $me;
  }
}
class ApptEdit extends Appt {
  //
  public function getAuditLabel() {
    return $this->getLabel();
  }
  public function getAuditRecName() {
    return 'Appointment';
  }
  static function from(/*JSched*/$o, $ugid = null) {
    $me = new static($o);
    if ($ugid)
      $me->userGroupId = $ugid;
    $me->date = dateToString($o->date);
    $me->closed = toBoolInt($o->closed);
    $me->schedId = get($o, 'id');
    $me->timestamp = $me->date . ' ' . SchedDao::div($o->timeStart, 100) . ':' . ($o->timeStart % 100);
    return $me;
  }
  //
  protected function hasClientId() {
    return $this->clientId > 0;
  }
}
class SchedEvent extends SchedEventRec {
  //
  public $schedEventId;
  public $rpType;
  public $rpEvery;
  public $rpUntil;
  public $rpOn;
  public $rpBy;
  public $comment;
  //
  public function getAuditRecName() {
    return 'Schedule Event';
  }
  //
  static function from(/*JSchedEvent*/$o) {
    $me = new static();
    $me->schedEventId = get($o, 'id');
    $me->rpType = $o->type;
    $me->rpEvery = $o->every;
    $me->rpUntil = dateToString($o->until);
    $me->rpOn = $o->on;
    $me->rpBy = $o->by;
    $me->comment = $o->comment;
    return $me;
  }
}