/**
 * PortalPage MessagingPage
 */
MessagingPage = PortalPage.extend(function(self) {
  return {
    onbodyload:function() {
      PageTile.create();
    }
  }
})
PageTile = {
  create:function() {
    return Html.Tile.create(window.content).extend(function(self) {
      return {
        STATES:{LISTING:0,EDITING:1},
        //
        init:function() {
          self.tiles = Html.Tiles.create(self, [
            self.list = ListTile.create(self)
              .bubble('onselect', self.list_onselect)
              .bubble('oncompose', self.list_oncompose),
            self.edit = EditTile.create(self)
              .bubble('onpost', self.draw_asListing.curry('Your message was sent.'))
              .bubble('onreturn', self.draw_asListing)]);
          self.draw(self.STATES.LISTING); 
        },
        draw:function(state) {
          if (state == self.STATES.LISTING) 
            self.list.select().load();
          else
            self.edit.select().load(self.thread);
        },
        draw_asListing:function(msg) {
          self.draw(self.STATES.LISTING);
          if (String.is(msg))
            PopMsg.create().show(msg);
        },
        draw_asEditing:function() {
          self.draw(self.STATES_EDITING);
        },
        list_onselect:function(thread) {
          self.thread = thread;
          self.draw_asEditing();
        },
        list_oncompose:function() {
          self.thread = null;
          self.draw_asEditing();
        }
      }
    })
  }
}
EditTile = {
  create:function(container) {
    var My = this;
    return Html.Tile.create(container, 'Message').extend(function(self) {
      return {
        onpost:function() {},
        onreturn:function() {},
        //
        init:function() {
          self.head = Html.H1.create().into(self);
          self.posts = Html.Tile.create(self, 'Posts');
          self.reply = My.ReplyTile.create(self)
            .bubble('onpost', self)
            .bubble('onreturn', self);
          self.back = ReturnAnchor.create(self, 'Back to Messages');
        },
        load:function(thread) {
          self.head.setText((thread && thread.subject) || 'New Message');
          if (thread) {
            self.back.hide();
            self.posts.clean().setHeight(100).working(true);
            Ajax.Messaging.openThread(thread.threadId, function(thread) {
              self.thread = thread;
              self.reply.load(thread);
              self.posts.setHeight().working(false);
              self.draw();
              self.back.show();
            })
          } else {
            self.thread = null;
            self.reply.load();
            self.draw();
          }
        },
        draw:function() {
          self.posts.clean();
          if (self.thread) {
            self.thread.MsgPosts.forEach(function(post) {
              My.Post.create(post).into(self.posts);
            })
          }
        }
      }
    })
  },
  ReplyTile:{
    create:function(container) {
      var My = this;
      return Html.Tile.create(container).extend(function(self) {
        return {
          onpost:function() {},
          onreturn:function() {},
          //
          init:function() {
            self.tiles = Html.Tiles.create(self, [
              self.reply = Html.AnchorAction.asNote('Post a reply').into(self)
                .bubble('onclick', self.reply_onclick),
              self.editor = My.Editor.create(self)
                .bubble('onpost', self)
                .bubble('oncancel', self.editor_oncancel)]);
          },
          load:function(thread) {
            self.thread = thread;
            self.editor.load(self.thread);
            if (self.thread)
              self.reply.select();
            else
              self.editor.select();
          },
          reply_onclick:function() {
            self.editor.select();
          },
          editor_oncancel:function() {
            if (self.thread)
              self.reply.select();
            else
              self.onreturn();
          }
        }
      })
    },
    Editor:{
      create:function(container) {
        return Html.Tile.create(container, 'Editor').extend(function(self) {
          return {
            onpost:function() {},
            oncancel:function() {},
            //
            init:function() {
              Html.Table2Col.create(Html.Div.create('Author').into(self)).left.setText('New Post');
              var div = Html.Tile.create(self, 'EditorC');
              Html.Label.create(null, 'Send To:').into(div);
              self.sendto = Html.Select.create(C_SendTos).into(div);
              self.input = Html.DirtyTextArea.create().setRows(6).into(div);
              self.cmd = Html.CmdBar.create(self).button('Send Now', self.send_onclick, 'send').cancel(self.cancel_onclick);
            },
            load:function(thread) {
              self.thread = thread;
              self.input.clean();
              if (thread)
                self.sendto.setValue(thread.creatorId);
            },
            ontileselect:function() {
              self.input.setFocus();
            },
            getSendTos:function() {
              return [self.sendto.getValue()];
            },
            getBody:function() {
              return '<p>' + self.input.getValue() + '</p>';
            },
            send_onclick:function() {
              if (! self.input.isDirty()) 
                return alert('Please type a message before sending.');
              self.working(function() {
                if (self.thread) {
                  Ajax.Messaging.postReply(self.thread.threadId, self.getSendTos(), self.getBody(), function() {
                    self.working(false);
                    self.onpost();
                  })
                } else {
                  Ajax.Messaging.newThread('Portal Message', self.getSendTos(), self.getBody(), function() {
                    self.working(false);
                    self.onpost();
                  })
                }
              })
            },
            cancel_onclick:function() {
              self.oncancel();
            }
          }
        })
      }
    }
  },
  Post:{
    create:function(post) {
      var My = this;
      return Html.Div.create('Post').extend(function(self) {
        return {
          //
          init:function() {
            self.authorc = Html.Div.create('Author').into(self);
            self.author = Html.Table2Col.create(self.authorc);
            self.body = Html.Div.create('Body').into(self);
            self.draw();
          },
          draw:function() {
            self.authorc.addClassIf('self', post.authorId == me.portalUserId);
            self.author.left.setText(post.author);
            self.author.right.setText(post.dateCreated);
            self.body.html(post.body);
            if (post.Stub) 
              My.Preview.create(post.Stub).into(self);
          }
        }
      })
    },
    Preview:{
      create:function(stub) {
        return Html.Div.create('Preview').extend(function(self) {
          return {
            //
            init:function() {
              switch (stub.type) {
                case C_DocStub.TYPE_SESSION:
                  self.html(stub.Preview._html);
                case C_DocStub.TYPE_SCAN:
                  self.addScans(stub.Preview.ScanFiles);
              }
            },
            addScans:function(files) {
              var maxw = Html.Window.getViewportDim().width - 80;
              files.each(function(file) {
                if (file._pdf)
                  self.addPdf(file, maxw);
                else
                  self.addImage(file, maxw);
              })
            },
            addImage:function(file, maxw) {
              Html.Tile.create(self, 'ScanImage')
                .add(Html.Image.create('ScanImage', file.src)
                  .setSizeWithin(file.height, file.width, null, maxw));
            }
          }
        })
      }
    }
  }
}
ListTile = {
  create:function(container) {
    var My = this;
    return Html.Tile.create(container, 'ListTile').extend(function(self) {
      return {
        onselect:function(thread) {},
        oncompose:function() {},
        //
        init:function() {
          self.head = Html.H1.create('Messages').into(self);
          self.stubs = Html.Tile.create(self, 'Stubs');
          var actions = Html.Tile.create(self, 'Actions');
          self.compose = Html.AnchorAction.asNote('Compose a new message').into(actions).bubble('onclick', self, 'oncompose'),
          self.back = ReturnAnchor.create(self);
        },
        load:function() {
          self.back.hide();
          self.stubs.clean().setHeight(100).working(true);
          Ajax.Messaging.getMyInboxThreads(function(threads) {
            self.threads = threads;
            self.stubs.setHeight().working(false);
            self.draw();
            self.back.show();
          })          
        },
        draw:function() {
          self.stubs.clean();
          if (self.threads.isEmpty()) {
            self.stubs.add(Html.Span.create('none', 'You have no messages.'));
          } else { 
            self.threads.forEach(function(thread) {
              My.Stub.create(thread).into(self.stubs).bubble('onselect', self);
            })
          }
        }
      }
    })
  },
  Stub:{
    create:function(thread) {
      var My = this;
      return Html.HoverableDiv.create('Stub').extend(function(self) {
        return {
          onselect:function(thread) {},
          //
          init:function() {
            self.topic = Html.Div.create('Topic').into(self);
            self.post = Html.Div.create('Post').into(self);
            self.draw();
          },
          draw:function() {
            self.addClassIf('read', thread.isRead());
            self.topic.setText(thread.subject);
            self.post.add(Html.Span.create('bold').setText('Last post:'));
            self.post.add(Html.Span.create('ml5').setText(self.getPostText(thread.Inbox.MsgPost)));
          },
          getPostText:function(p) {
            return p.dateCreated + ' by ' + p.author;
          },
          onclick:function() {
            self.onselect(thread);
          }
        }
      })
    }
  }
}
