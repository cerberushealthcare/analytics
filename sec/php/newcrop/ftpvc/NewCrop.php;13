<?php
require_once 'php/newcrop/data/NCScript.php';
require_once 'php/newcrop/data/SoapData.php';
require_once 'php/dao/UserDao.php';
require_once 'php/dao/FacesheetDao.php';
require_once 'php/data/rec/sql/NcUser.php';
require_once 'php/data/rec/sql/UserStub.php';
/**
 * New Crop integration class
 */
class NewCrop {
  //
  private /*Credentials*/ $credentials;
  private $clickThruUrl;
  private $wsHost;
  // 
  const FROM_XML_RESPONSE = true;
  /**
   * Constructor
   */
  public function __construct() {
    $this->env = UserStub::getEnv();
    switch ($this->env) {
      case UserStub::ENV_PRODUCTION:
        // TODO
        break;
      case UserStub::ENV_TEST:
      case UserStub::ENV_LOCAL:
        $this->credentials = new Credentials('clicktate', 'demo', 'demo');
        $this->clickThruUrl = 'https://preproduction.newcropaccounts.com/InterfaceV7/RxEntry.aspx'; 
        $this->wsHost = 'https://preproduction.newcropaccounts.com/v7/WebServices';
        break;
    }
  }
  /**
   * Build <form> XML to submit to NewCrop's click thru quick start
   * @param(opt) int $cid
   * @param(opt) string $dest NewCrop landing page
   * @param(opt) string @renewalRequestIdentifier from Update1.GetAllRenewalRequests
   * @return array('url'=>'form-post-url','xml'=>'form-xml-content')
   * @throws DomDataRequiredException if missing required elements
   */
  public function buildClickThru($cid = null, $dest = RequestedPageType::COMPOSE, $renewalRequestIdentifier = null) {
    $user = UserDao::getMyUser();
    $users = $this->getMyUsers();
    $fs = null;
    if ($cid) 
      $fs = FacesheetDao::getLegacyClickThru($cid);
    $script = new NCScript(
      CredentialsType::fromCredentials($this->credentials),
      UserRoleType::fromUser($users['me']),
      new DestinationType($dest),
      AccountType::fromUser($user),
      LocationType::fromUserClient($user, get($fs, 'client')),
      LicensedPrescriberType::fromUser($users['lp']),
      StaffType::fromUser(geta($users, 'staff')),
      PatientType::fromClient(get($fs, 'client'), get($fs, 'allergies'), get($fs, 'diagnoses')),
      PrescriptionRenewalResponseType::fromId($renewalRequestIdentifier),
      OutsidePrescriptionType::fromMeds(get($fs, 'activeMeds')));
    return array(
      'url' => $this->clickThruUrl,
      'xml' => $script->toXml());
  }
  private function getMyUsers() {
    $userMe = UserStub::fetchMe();
    $usersInRoles = NcUser::fetchUsersInTypes($userMe->userGroupId);
    switch ($userMe->NcUser->userType) {
      case UserType::LP:
        $userLp = $userMe;
        $userStaff = current($usersInRoles[UserType::STAFF]);
        break;
      case UserType::STAFF:
        $userLp = current($usersInRoles[UserType::LP]);
        $userStaff = $userMe;
        break;
    }
    return array(
      'me' => $userMe,
      'lp' => $userLp,
      'staff' => $userStaff);
  }
  /**
   * Pull account status
   * @return AccountStatusDetail  // see https://preproduction.newcropaccounts.com/v7/WebServices/Patient.asmx?op=GetAccountStatus
   */
  public function pullAcctStatus() {
    global $myLogin;
    $soap = $this->createSoap($this->getPatientWsUrl());
    $param = new GetAccountStatusParam(
      SoapCredentials::fromCredentials($this->credentials),
      SoapAccount::fromUgid($myLogin->userGroupId),
      $myLogin->userGroupId,
      $myLogin->uid);
    $response = $soap->GetAccountStatus($param);
    return $this->getResponseDetail(
      $response, 
      'GetAccountStatusResult', 
      'accountStatusDetail');
  }
  /**
   * Pull account status details for multiple status 
   * @return array(
   *   'DrReview'=>[StatusDetail,..],
   *   'StaffProcessing'=>[StatusDetail,..],
   *   'FailedElectronicRx'[StatusDetail,..],
   *   'FailedFax'=>[StatusDetail,..])
   */
  public function pullAcctStatusDetails() {
    $statuses = array(
      GetAccountStatusDetailParam::STATUS_DR_REVIEW => null,
      GetAccountStatusDetailParam::STATUS_STAFF_PROC => null,
      GetAccountStatusDetailParam::STATUS_FAILED_ERX => null,
      GetAccountStatusDetailParam::STATUS_FAILED_FAX => null);
    foreach ($statuses as $status => &$recs)
      $recs = $this->pullAcctStatusDetail($status);
    return $statuses;
  }
  /**
   * Pull account status detail
   * @param string $sectionType  // GetAccountStatusDetailParam.STATUS_
   * @return [StatusDetail,..]   // see https://preproduction.newcropaccounts.com/v7/WebServices/Update1.asmx?op=GetAccountStatusDetail
   */
  public function pullAcctStatusDetail($sectionType) {
    global $myLogin;
    $return = null;
    $soap = $this->createSoap($this->getUpdate1WsUrl());
    $param = new GetAccountStatusDetailParam(
      SoapCredentials::fromCredentials($this->credentials),
      SoapAccount::fromUgid($myLogin->userGroupId),
      //new SoapAccount('demo', 'demo'),
      $myLogin->userGroupId,
      //'DEMOLOC1',
      $myLogin->uid,
      //'DEMOLP1',
      $sectionType,
      GetAccountStatusDetailParam::NO_SCHEMA);
    print_r($param);
    exit;
    $response = $soap->GetAccountStatusDetail($param);
    return $this->getResponseDetail(
      $response, 
      'GetAccountStatusDetailResult', 
      'StatusDetailDataSet',
      'StatusDetail',
      NewCrop::FROM_XML_RESPONSE);
  }
  /**
   * Pull all renewal requests
   * @return [RenewalSummaryV2,..]  // see https://preproduction.newcropaccounts.com/v7/WebServices/Update1.asmx?op=GetAllRenewalRequestsV2
   */
  public function pullRenewalRequests() {
    global $myLogin;
    $soap = $this->createSoap($this->getUpdate1WsUrl());
    $param = new GetAllRenewalRequestsV2Param(
      SoapCredentials::fromCredentials($this->credentials),
      SoapAccount::fromUgid($myLogin->userGroupId),
      //new SoapAccount('demo', 'demo'),
      $myLogin->userGroupId,
      //'DEMOLOC1',
      $myLogin->uid);
      //'DEMOLP1');
    $response = $soap->GetAllRenewalRequestsV2($param);
    return $this->getResponseDetail(
      $response, 
      'GetAllRenewalRequestsV2Result', 
      'renewalSummaryArray',
      'RenewalSummaryV2');
  }
  /**
   * Pull current allergy/med list 
   * @param int $cuid
   * @return array(
   *   'med'=>array(PatientDrugDetail,..),         // see https://preproduction.newcropaccounts.com/v7/WebServices/Patient.asmx?op=GetPatientFullMedicationHistory 
   *   'allergy'=>array(PatientAllergyDetail,..))  // see https://preproduction.newcropaccounts.com/v7/WebServices/Patient.asmx?op=GetPatientAllergyHistory
   * @throws SoapResultException if result not 'OK'
   */
  public function pullCurrentMedAllergy($cid) {
    global $myLogin;
    $soap = $this->createSoap($this->getPatientWsUrl());
    $param = new GetPatientHistoryParam(
      SoapCredentials::fromCredentials($this->credentials),
      SoapAccount::fromUgid($myLogin->userGroupId),
      new SoapPatient($cid),
      new SoapRxReq(),
      new SoapPtInfoReq('test', 'test'));  // TODO what goes in soapptinforeq?
    return array(
      'med' => $this->buildMedHistory($soap, $param),
      'allergy' => $this->buildAllergyHistory($soap, $param));
  }
  //
  private function createSoap($url) {
    $orig = error_reporting();
    error_reporting(0);
    $soap = new SoapClient($url);
    error_reporting($orig);
    if ($soap) 
      return $soap;
    else
      throw new NewCropException('Unable to create SOAP client');
  }
  private function buildAllergyHistory($soap, $param) {
    $response = $soap->GetPatientAllergyHistory($param);
    return $this->getResponseDetail(
      $response, 
      'GetPatientAllergyHistoryResult', 
      'patientAllergyDetail',
      'PatientAllergyDetail');
  }
  private function buildMedHistory($soap, $param) {
    $response = $soap->GetPatientFullMedicationHistory($param);
    return $this->getResponseDetail(
      $response, 
      'GetPatientFullMedicationHistoryResult', 
      'patientDrugDetail',
      'PatientDrugDetail');
  }
  /*
   * Extract response objects from NewCrop SOAP return:
   *   <GetPatientAllergyHistoryResponse>  // $responseNodeName
   *     <result>                          // use for $responseNodeName if $useXmlResponse=true 
   *       <Status>OK</Status>
   *       <XmlResponse>..</XmlResponse>   // $useXmlResponse=true to get from here 
   *       ..
   *     </result>
   *     <patientAllergyDetail>            // $detailNodeName
   *       <PatientAllergyDetail>          // $arrayNodeName, if you want to return an array of these
   *         ..
   *       </PatientAllergyDetail>
   *     </patientAllergyDetail>
   */
  private function getResponseDetail($response, $responseNodeName, $detailNodeName, $arrayNodeName = null, $useXmlResponse = false) {
    $return = null;
    if ($response != null) {
      $response = $response->$responseNodeName;
      $result = ($useXmlResponse) ? $response : $response->result;
      SoapResultException::throwIfNotOk($result);
      if ($useXmlResponse) {
        $xmlResponse = DomData::parseXml(base64_decode($result->XmlResponse));
        $detail = get($xmlResponse, $detailNodeName);                
      } else {
        $detail = get($response, $detailNodeName);
      }
      if ($detail) {
        if ($arrayNodeName == null) 
          $return = $detail;
        else {
          $records = get($detail, $arrayNodeName);
          $return = (is_array($records)) ? $records : array($records);
        }
      }
    } 
    return $return;
  }
  // Web service URLs
  private function getPatientWsUrl() {
    return "$this->wsHost/Patient.asmx?WSDL"; 
  }
  private function getUpdate1WsUrl() {
    return "$this->wsHost/Update1.asmx?WSDL";
  }
}
/**
 * Credentials 
 */
class Credentials {
  public $partner;
  public $name;
  public $password;
  //
  public function __construct($partner, $name, $password) {
    $this->partner = $partner;
    $this->name = $name;
    $this->password = $password;
  }
}
/**
 * Exceptions
 */
class NewCropException extends Exception {
}
?>