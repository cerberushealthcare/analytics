/**
 * ScanEntryFolder
 *   EntryForm form
 *   FileList list
 */
ScanEntryFolder = {
  create:function(container) {
    var My = this;
    return Html.Tile.create(container, 'EntryFolder').extend(function(self) {
      return {
        onopen:function() {},
        onclose:function() {},
        onupdate:function() {},
        oncancel:function() {},
        oncheck_file:function(scanFile, checked) {},
        ondelete_file:function(scanFile, checked) {},
        //
        init:function() {
          self.tbar = My.Title.create(self).bubble('onclick_create', self.open);
          self.content = Html.Div.create().into(self).hide();
          self.form = My.EntryForm.create(self.content);
          self.list = My.FileList.create(self.content, self).bubble('oncheck_file', self).bubble('ondelete_file', self);
          self.cmd = My.CmdBar.create(self.content, self);
          self.rec = null;
        },
        fetch:function(sfid) {
          ScanIndex.ajax().fetch(sfid, self.open);
        },
        open:function(rec) {
          self.rec = rec;
          self.addClassIf('update', rec);
          self.tbar.hide();
          self.cmd.showDelIf(rec);
          self.content.show();
          self.form.load(rec);
          self.list.load(rec);
          self.closed = null;
          self.onopen();
        },
        close:function(updated) {
          self.rec = null;
          self.removeClass('update');
          self.tbar.show();
          self.content.hide();
          self.closed = self;
          self.onclose();
          if (updated)
            self.onupdate();
          return self;
        },
        add:function(scanFile) {
          if (self.closed)
            self.open();
          self.list.add(scanFile);
        },
        isDirty:function() {
          return self.form.isRecordChanged() || self.list.isDirty();
        },
        //
        save_onclick:function() {
          self.working(true);
          var rec = self.form.getRecord();
          Ajax.Scanning.saveIndex(self.form.getRecord(), self.list.getScanFileIds(),  
            function(rec) {
              self.working(false);
              self.close(true);
            })
        },
        del_onclick:function() {
          Pop.Confirm.showYesNo('Are you sure you want to remove this index?<br><br>Note: Only the index will be deleted. Any scanned files in this index will be returned to Unindexed Files.', function() {
            self.working(true);
            Ajax.Scanning.removeIndex(self.rec.scanIndexId, 
              function(id) {
                self.working(false);
                self.close(true);
              });
          });
        },
        cancel_onclick:function() {
          if (self.isDirty()) {
            Pop.Confirm.show('This index record has unsaved changes. Save now?', 'Save Now', 'save', "Don't Save", null, true, null,
              function(confirmed) {
                if (confirmed) {
                  self.save_onclick();
                } else {
                  if (self.list.isDirty())
                    self.oncancel();
                  self.close();
                }
              });
          } else {
            self.close();
          }
        }
      }
    })
  },
  Title:{
    create:function(container) {
      var self = Html.Tile.create(container, 'new-index');
      return self.aug({
        onclick_create:function() {},
        //
        init:function() {
          Html.Anchor.create(null, 'Create New...').into(self).bubble('onclick', self, 'onclick_create');
        }
      });
    }
  },
  EntryForm:{
    create:function(container) {
      var ef = Html.EntryForm.create(container, 'first50', {
        load:function(rec) {
          if (rec) {
            ef.setRecord(rec);
            ef.focus('scanType');
          } else {
            ef.reset();
            ef.popClient();
          }
        },
        popClient:function() {
          ef._popClientPicker('clientId');
        },
        type_onchange:function() {
          ef.showScanType();
        },
        type_onpop:function() {
          ef.spanipc.hide();
        },
        provider_onset:function(rec) {
          if (rec) {
            if (rec.Address_addrFacility) 
              ef.setValue('addrFacility', rec.Address_addrFacility);
            if (rec.area) {
              if (Array.isEmpty(ef.getValue('areas')))
                ef.setValue('areas', [rec.area]); 
            }
          }
        },
        showScanType:function() {
          if (ef.getValue('scanType') == C_ScanIndex.TYPE_RESULT) {
            ef.spanipc.show();
            ef.focus('ipc');
          } else {
            ef.spanipc.hide();
          }
        }
      });
      ef.li('To', 'fr').select('recipient', C_Docs).check('reviewed', 'Reviewed');
      ef.li().client('clientId', '(Select Patient)', 'Client');
      ef.li('Type', 'mt5').atradio('scanType', C_ScanIndex.TYPES, ef.type_onchange, ef.type_onpop).startSpan('ef-ipc').lbl('for', 'nopad').picker(IpcPicker, 'ipc', 'Ipc_ipc').endSpan();
      ef.li('Provider', 'mt10').picker(ProviderPicker, 'providerId', 'Provider', ef.provider_onset).lbl('at', 'nopad').picker(FacilityPicker, 'addrFacility', 'Address_addrFacility');
      ef.li('Date', 'nopad').date('datePerformed');
      ef.li('Area', 'mt5').atab('areas', MultiAreaAtab);
      ef.spanipc = _$('ef-ipc');
      ef.showScanType();
      return ef;
    }
  },
  FileList:{
    create:function(container) {
      var self = Html.Div.create('EntryFolderList').into(container);
      return self.aug({
        oncheck_file:function(scanFile, checked) {},
        ondetach_file:function(scanFile, checked) {},
        //
        load:function(rec) {
          this.clean();
          var file;
          if (rec)
            Array.forEach(rec.ScanFiles, function(rec) {
              file = ScanFileCheck.create(self, rec, true);
              self.add(file);
            })
          this._recOrig = Json.encode(self.getScanFileIds());
        },
        add:function(scanFile) {
          self.append(scanFile.bubble('oncheck', self, 'oncheck_file').bubble('ondetach', self, 'ondetach_file').bubble('onsortup', self.file_onsortup).bubble('onsortdown', self.file_onsortdown));
        },
        isDirty:function() {
          var _recNow = Json.encode(self.getScanFileIds());
          return (_recNow != self._recOrig);
        },
        getScanFileIds:function() {
          var recs = [];
          if (self.children.length)
            Array.forEach(self.children, function(scanFile) {
              recs.push(scanFile.rec.scanFileId);
            })
          return recs;
        },
        file_onsortup:function(scanFile) {
          if (scanFile.previousSibling)
            scanFile.before(scanFile.previousSibling);
          Html.Window.cancelBubble();
        },
        file_onsortdown:function(scanFile) {
          if (scanFile.nextSibling)
            scanFile.after(scanFile.nextSibling);
          Html.Window.cancelBubble();
        }
      });
    }
  },
  CmdBar:{
    create:function(container, context) {
      return Html.CmdBar.create(container).save(context.save_onclick).del(context.del_onclick).cancel(context.cancel_onclick);
    }
  }
}
ClassHover = {
  onmouseover:function() {
    if (! this.className.endsWith('hover'))
      this.className += 'hover';
  },
  onmouseout:function() {
    if (this.className.endsWith('hover'))
      this.className = this.className.substr(0, this.className.length - 5);
  }
}
/**
 * Div ScanFileCheck
 *   ScanFile rec
 *   ImageScanThumb thumb
 *   InputCheck check
 *   Label label
 *   Anchor remove
 */
ScanFileCheck = {
  create:function(container, rec, checked) {
    var self = Html.Div.create('ScanFile').into(container);
    return self.aug({
      oncheck:function(scanFile, checked) {},
      ondelete:function(scanFile, checked) {},
      onsortup:function(scanFile) {},
      onsortdown:function(scanFile) {},
      ondetach:function(scanFile) {},
      //
      init:function() {
        self.load(rec, checked);
      },
      load:function(rec, checked) {
        self.clean();
        self.rec = rec;
        self.check = Html.InputCheck.create().bubble('onclick', self.check_onclick).into(self).hide();
        self.wrapper = Html.Span.create('wrapper').into(self).bubble('onclick', self.wrapper_onclick);
        self.thumb = ImageScanThumb.create(self, rec, 70).bubble('onrotate', self.thumb_onrotate);
        self.label = Html.Label.create(null, rec.origFilename);
        self.remove = Html.Anchor.create('remove').tooltip('Delete this file').bubble('onclick', self.remove_onclick);
        self.up = Html.Anchor.create('up').aug(ClassHover).tooltip('Sort file up').bubble('onclick', self.up_onclick);
        self.down = Html.Anchor.create('down').aug(ClassHover).tooltip('Sort file down').bubble('onclick', self.down_onclick);
        self.detach = Html.Anchor.create('detach').tooltip('Detach this file').bubble('onclick', self.detach_onclick);
        self.ixcmds = Html.Table1Row.create(null, [self.up, self.down, self.detach]);
        Html.Table.create(self.wrapper, 'w100').tbody().tr().td(self.thumb).w('10%').td(self.label, 'p5').w('90%').td(self.remove, 'rj').td(self.ixcmds, 'rj');
        self.check.checked = checked;
        self.draw();    
      },
      draw:function() {
        self.addClassIf('check', self.check.checked);
        if (self.isChecked()) {
          self.addClass('check');
          self.thumb.shrink(true);
          self.remove.hide();
          self.ixcmds.show();
        } else {
          self.removeClass('check');
          self.thumb.shrink(false);
          self.remove.show();
          self.ixcmds.hide();
        }
      },
      reload:function(rec) {
        self.load(rec, self.isChecked());
      },
      isChecked:function() {
        return self.check.checked;
      },
      setChecked:function(value) {
        self.check.checked = value;
        self.draw();
        self.oncheck(self, value);
      },
      resetZoom:function() {
        self.thumb.resetZoom();
      },
      //
      onmouseover:function() {
        self.style.backgroundColor = '#C3FDB8';
      },
      onmouseout:function() {
        self.style.backgroundColor = '';
      },
      thumb_onrotate:function() {
        self.rec.ajax().rotate(function(rec) {
          self.reload(rec);
          self.thumb.preview(true);
        })
      },
      remove_onclick:function() {
        self.ondelete(self, self.check.checked);
        Html.Window.cancelBubble();
      },
      detach_onclick:function() {
        self.ondetach(self);
        Html.Window.cancelBubble();
      },
      up_onclick:function() {
        self.onsortup(self);
        self.up.onmouseout();
        Html.Window.cancelBubble();
      },
      down_onclick:function() {
        self.onsortdown(self);
        self.down.onmouseout();
        Html.Window.cancelBubble();
      },
      check_onclick:function() {
        self.draw();
        self.oncheck(self, self.check.checked);
      },
      wrapper_onclick:function() {
        if (self.isChecked()) {
          self.thumb.preview(! self.thumb.isPreviewing(), true);
        } else {
          self.setChecked(true);
        }
      }
    })
  }
}
/**
 * Image ImageScanThumb
 *   Image zoom
 */
ImageScanThumb = {
  create:function(parent, rec, maxh, maxw) {
    var My = this;
    var h = String.toInt(rec.height || maxh);
    var w = String.toInt(rec.width || maxw);
    var size = ImageScanThumb.resize(h, maxh || 100, w, maxw || 50);
    var MyZoom = (rec._pdf) ? PdfZoom : ImageZoom;
    var zoomsize = ImageScanThumb.resize(h, 500, w, 400);
    var self = Html.Image.create(null, rec.src, size.h, size.w).into(parent);
    return self.aug({
      onrotate:function() {},
      //
      init:function() {
        self.parent = parent;
        self.h = size.h;
        self.w = size.w;
        self.rec = rec;
        //if (rec._pdf) 
          //self.zoom = My.PdfZoom.create(self);
        //else 
          //self.zoom = My.ImageZoom.create(self, ImageScanThumb.resize(h, 500, w, 400)).bubble('onrotate', self);
        self.aug({
          onmouseover:function() {
            self.preview(true);
          },
          onmouseout:function(e) {
            var to = Html.Window.getEventTo(e);
            if (! (to && to.isChildOf && to.isChildOf(self.zoom)))  
              self.preview(false);  
          }
        })
      },
      isPreviewing:function() {
        return self.zoom && self.zoom.isPreviewing(self);
      },
      preview:function(b, noDelay) {
        if (b) 
          self.zoom = MyZoom.open(self, zoomsize, noDelay).bubble('onrotate', self);
        else
          self.zoom = MyZoom.close(self, noDelay);
      },
      shrink:function(on) {
        if (on) 
          return self.setHeight(25).setWidth(25);
        else
          return self.setHeight(self.h).setWidth(self.w);
      },
      getInitPos:function() {
        if (parent.thumbInitPos == null)
          parent.thumbInitPos = self.getPosDim();
        return Object.clone(parent.thumbInitPos);
      },
      resetZoom:function() {
        self.preview(false);
        parent.thumbInitPos = null;
//        if (self.zoom) {
//          self.zoom.hide();
//          parent.thumbInitPos = null;
//        }
      }
    });
  },
  resize:function(h, maxh, w, maxw) {
    var r = h / w;
    if (h > maxh || w > maxw) {
      if (r > 1 && h > maxh) {
        r = maxh / h;
        h = maxh;
        w = w * r;
      } else {
        r = maxw / w;
        w = maxw;
        h = h * r;
      }
    }
    return {'h':h,'w':w,'maxh':maxh,'maxw':maxw};
  }
}
/**
 * Div Zoom
 */
Zoom = {
  open:function(thumb, size, noDelay) {
    return Html.Pop.singleton.call(this).open.apply(this._singleton, arguments);
  },
  close:function(thumb, noDelay) {
    return Html.Pop.singleton.call(this).close.apply(this._singleton, arguments);
  },
  create:function() {
    var My = this;
    return Html.Div.create('Zoom').into().hide().extend(function(self) {
      return {
        //
        init:function() {
          self.setPosition('absolute').invisible();  
          self.cap = My.Cap.create(self);
          self.img = Html.Image.create().into(self);
        },
        open:function(thumb, size, noDelay) {
          if (self.thumb != thumb)
            self.load(thumb, size);
          self.preview(true, thumb, noDelay);
          return self;
        },
        close:function(thumb, noDelay) {
          if (self.thumb == thumb) 
            self.preview(false, thumb, noDelay);
        },
        //
        load:function(thumb, size) {
          self.hide();
          self.thumb = thumb;
          self.cap.load(thumb);
          self.img.setHeight(size.h).setWidth(size.w).set('src', thumb.src);
          self.previewing = false;
          self.setWidth(size.maxw + 20);
        },
        onmouseover:function() {
          self.preview(true, self.thumb);
        },
        onmouseout:function(e) {
          var to = Html.Window.getEventTo(e);
          if (to && (to == self.thumb || (to.isChildOf && to.isChildOf(self)))) 
            return;
          if (self.previewing) 
            self.preview(false, self.thumb);
        },
        isPreviewing:function(thumb) {
          return (self.thumb == thumb && self.previewing);
        },
        preview:function(b, thumb, noDelay) {
          var delay = (noDelay) ? 0 : 1;
          if (self.thumb == thumb) {
            if (self.previewing != b) {
              self.set('previewing', b);
              if (b) {
                pause(0.3 * delay, function() {
                  if (self.thumb == thumb && self.previewing) {
                    var pos = thumb.getInitPos();
                    pos.left = pos.left + pos.width;
                    self.show().repos(pos);
                    self.visible().show();
                  }
                })
              } else {
                pause(0.7 * delay, function() {
                  if (self.thumb == thumb && ! self.previewing) 
                    self.invisible();
                })
              }
            }
          }
        }
      }
    })
  },
  Cap:{
    create:function(container) {
      return Html.Tile.create(container, 'cap').extend(function(self) {
        return {
          init:function() {
            self.table = Html.Table2Col.create(self, null, self.label = Html.Label.create());
          },
          load:function(thumb) {
            self.label.setText(thumb.rec.origFilename);
          }
        }
      })
    }
  }
}
ImageZoom = {
  open:function(thumb, size) {
    return Html.Pop.singleton.call(this).open.apply(this._singleton, arguments);
  },
  close:function(thumb) {
    return Html.Pop.singleton.call(this).close.apply(this._singleton, arguments);
  },
  create:function() {
    var My = this;
    return Zoom.create().extend(function(self) {
      return {
        onrotate:function() {},
        //
        init:function() {
          self.cap.extend(My.Cap).bubble('onrotate', self);
        }
      }
    })
  },
  Cap:function(self) {
    return {
      onrotate:function() {},
      //
      init:function() {
        Html.AnchorNoFocus.create('rotate', 'Rotate').bubble('onclick', self, 'onrotate').into(self.table.left);
      }
    }
  }
}
PdfZoom = {
  open:function(thumb, size) {
    return Html.Pop.singleton.call(this).open.apply(this._singleton, arguments);
  },
  close:function(thumb) {
    return Html.Pop.singleton.call(this).close.apply(this._singleton, arguments);
  },
  create:function(thumb) {
    return Zoom.create().extend(function(self) {
      return {
        //
        init:function() {
          self.img.hide();
          self.iframe = Html.IFrame.create(null, null, 450, 350).into(self);
        },
        load:self.load.append(function(thumb, size) {
          self.iframe.set('src', thumb.rec.pdfsrc);
        })
      }
    })
  }    
}
/**
 * AnchorTab MultiAreaAtab
 */
MultiAreaAtab = {
  create:function() {
    return Html.AnchorTab.create().checks(C_Lookups.AREAS, 3).okCancel();
  }
}
/**
 * UploadPop ScanUploadPop
 */
ScanUploadPop = {
  pop:function() {
    return Html.Pop.singleton_pop.apply(this, arguments);
  },
  create:function() {
    return Html.UploadPop.create('Upload Scanned Files', 'uploadScans', 5).extend(function(self) {
      return {
        init:function() {
          self.donebox = Html.Div.create('information mb10 pt10').before(self.form).html('Your file(s) were uploaded successfully.<br>You may now select more files to upload, or click Cancel to begin indexing.');
        },
        oncomplete:function() {
          page.reload();
        },
        reset:self.reset.append(function() {
          self.donebox.hide();
        }),
        form_oncomplete_ok:function() {
          self.form.reset();
          self.donebox.show();
        }
      }
    })
  }
}
/**
 * UploadPop BatchUploadPop
 */
BatchUploadPop = {
  pop:function() {
    return Html.Pop.singleton_pop.apply(this, arguments);
  },
  create:function() {
    return Html.UploadPop.create('Upload Batch PDF', 'uploadBatch').extend(function(self) {
      return {
        oncomplete:function(filename) {
          Pop.Working.show('Batch upload successfully.<br>Splitting individual pages from batch PDF...');
          Ajax.Scanning.splitBatch(filename, function() {
            Pop.Working.close();
            page.reload();
          })
        }
      }
    })
  }
}
/**
 * Rec ScanFile
 */
ScanFile = Object.Rec.extend({
  isPdf:function() {
    return this._pdf;
  },
  //
  ajax:function() {
    var worker = Html.Window;
    var self = this;
    return {
      remove:function(callback) {
        Ajax.Scanning.deleteFile(self.scanFileId, callback);
      },
      rotate:function(callback) {
        Ajax.Scanning.rotate(self.scanFileId, worker, callback);
      }
    }
  }
})
ScanFiles = Object.RecArray.of(ScanFile, {
  ajax:function() {
    var worker = Html.Window;
    return {
      fetchUnindexed:function(callback) {
        Ajax.Scanning.getUnindexed(worker, callback);
      },
      fetchIndexedToday:function(callback) {
        Ajax.Scanning.getIndexedToday(worker, callback);
      }
    }
  }
})
ScanIndex = Object.Rec.extend({
  //
  ajax:function() {
    var worker = Html.Window;
    return {
      fetch:function(id, callback) {
        Ajax.Scanning.getIndex(id, worker, callback); 
      }
    }
  }  
})