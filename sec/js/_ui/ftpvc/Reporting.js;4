/**
 * Tile ReportCriteriaView 
 */
ReportCriteriaView = {
  create:function(container) {
    var My = this;
    return Html.Tile.create(container, 'ReportCriteriaView').extend(function(self) {
      return {
        init:function() {
          self.list = My.List.create(self);
          Html.CmdBar.create(self).button('Generate Report', self.generate_onclick, 'report');
          self.table = My.Table.create(Html.Tile.create(self, 'mt10'));
        },
        /*
         * @arg ReportCriteria report
         */
        load:function(report) {
          self.report = report;
          self.list.load(report);
        },
        generate_onclick:function() {
          self.table.working(function() {
            Ajax.Reporting.generate(self.report, function(recs) {
              self.table.working(false);
              self.table.load(recs);
            })
          });
        }
      }
    })
  },
  Table:{
    create:function(container) {
      return Html.TableLoader.create(container).extend(function(self) {
        return {
          init:function() {
            self.setHeight(350);
            self.thead().trFixed().th('Patient');
          },
          add:function(rec, tr) {
            tr.td(AnchorClient_Facesheet.create(rec));
          }
        }
      })
    }
  },
  List:{
    create:function(container) {
      var My = this;
      return Html.Ul.create().into(container).extend(function(self) {
        return {
          load:function(report) {
            Html.Window.flickerFixedRows();
            self.report = report;
            self.clean();
            self.add(0, My.ReportAnchor.create(report.name));
            self.add(1, My.Rec.create(report.Rec).bubble('onupdate', self.onupdate));
            Array.forEach(report.Rec.Joins, function(join) {
              self.add(1, My.JoinAnchor.create(report, join).bubble('onupdate', self.onupdate));
              Array.forEach(join.Recs, function(rec) {
                self.add(2, My.Rec.create(rec).bubble('onupdate', self.onupdate));
              });
              self.add(2, My.AnotherJoinRecAnchor.create(join).bubble('onupdate', self.onupdate));
            });
            self.add(1, My.JoinAnchor.create(report).bubble('onupdate', self.onupdate));
          },
          add:function(level, e) {
            return self.li('l' + level).add(e);
          },
          onupdate:function() {
            self.load(self.report);
          }
        }
      })
    },
    ReportAnchor:{
      create:function(name) {
        return Html.AnchorAction.create('Report', name);
      }
    },
    AnotherJoinRecAnchor:{
      /*
       * @arg RepCritJoin join
       */
      create:function(join) {
        return Html.AnchorAction.create('red', 'Another...').extend(function(self) {
          return {
            onupdate:function() {},
            //
            onclick:function() {
              Ajax.Reporting.getJoin(join.table, function(j) {
                overlayWorking(false);
                join.addRec(j.Recs[0]);
                self.onupdate();
              })
              
            }
          }
        })
      }
    },
    JoinAnchor:{
      /*
       * @arg ReportCriteria report
       * @arg RepCritJoin join (optional)
       */
      create:function(report, join) {
        var text = (join) ? join.JTS[join.jt] : 'add...';
        var cls = (join) ? 'Join' : 'Join red';
        return Html.AnchorAction.create(cls, text).extend(function(self) {
          return {
            onupdate:function() {},
            //
            onclick:function() {
              if (join)
                JoinTypePop.pop(join, self.onupdate);
              else
                NewJoinPop.pop(report, self.onupdate);
            }
          }
        })
      }
    },
    Rec:{
      /*
       * @arg RepCritRec rec
       */
      create:function(rec) {
        return Html.Span.create().extend(function(self) {
          return {
            onupdate:function(rec) {},
            //
            init:function() {
              Html.Span.create('Record', rec._name).into(self);
              Html.Anchor.create('Summary', rec.summary(), self.anchor_onclick).into(self);
            },
            anchor_onclick:function() {
              CritRecEntryPop.pop(rec).bubble('onsave', function(update) {
                rec = update;
                self.onupdate();
              });
            }
          }
        })
      }
    }
  }
}
/**
 * Join pops
 */
JoinTypePop = {
  /*
   * @arg RepCritJoin join
   * @callback() on update
   */
  pop:function(join, callback) {
    var jts = Map.invert(Map.extract(join.JTS, join.allowable()));
    QDummyPop.pop('Join Type', Map.keys(jts), join.JTS[join.jt], function(value) {
      join.update(jts[value]);
      callback();
    })
  }
}
NewJoinPop = {
  /*
   * @arg ReportCriteria report
   * @callback() on update
   */
  pop:function(report, callback) {
    QDummyPop.pop('Join Table', RepCritJoin.TABLES, null, function(value) {
      overlayWorking(true);
      Ajax.Reporting.getJoin(value, function(join) {
        overlayWorking(false);
        report.addJoin(join);
        callback();
      })
    })
  }
}
/**
 * Pop CritRecEntryPop 
 */ 
CritRecEntryPop = {
  /*
   * @arg RepCritRec rec 
   */
  pop:function(rec) {
    return this.create().pop(rec);
  },
  create:function() {
    return CritRecEntryPop = Html.Pop.create('Entry', 500).extend(function(self) {
      return {
        onsave:function(rec) {},
        //
        init:function() {
          self.form = CritRecForm.create(self.content).bubble('onchange', self.form_onchange);
          self.cb = Html.CmdBar.create(self.content).save(self.save_onclick).cancel(self.close);
        },
        pop:function(rec) {
          self.setCaption(rec._name + ' Criteria');
          self.dirty = false;
          self.form.load(rec);
          self.show();
          return self;
        },
        //
        isDirty:function() {
          return self.dirty;
        },
        form_onchange:function() {
          self.dirty = true;
        },
        close:function(saved) {
          if (saved) 
            Pop.close(true);
          else
            Pop.Confirm.closeCheckDirty(self, self.save_onclick);
        },
        save_onclick:function() {
          self.onsave(self.form.getRec());
          self.close(true);
        }
      }
    })
  }
} 
/**
 * Tile CritRecForm
 */
CritRecForm = {
  create:function(container) {
    var My = this;
    return Html.Tile.create(container, 'CritRecEntry').extend(function(self) {
      return {
        onchange:function() {},
        //
        init:function() {
          self.table = Html.Table.create().into(self).tbody();
        },
        /*
         * @arg RepCritRec rec
         */
        load:function(rec) {
          self.rec = rec;
          self.table.clean();
          self.entries = [];
          rec.forEachValue(function(cv) {
            self.entries.push(My.CritValueEntry.create(self.table.tr(), cv).bubble('onchange', self));
          })
        },
        /*
         * @return RepCritRec updated record
         */
        getRec:function() {
          self.entries.forEach(function(entry) {
            self.rec.update(entry.getValue());
          }) 
          return self.rec;
        }
      }
    })
  },
  CritValueEntry:{
    /*
     * @arg TrAppender tr
     * @arg RepCritValue cv 
     */
    create:function(tr, cv) {
      var My = this;
      return Html.Span.create('CritValueEntry').extend(function(self) {
        return {
          onchange:function() {},
          //
          init:function() {
            self.tr = tr._tr(); 
            tr.td(self.label = Html.Span.create('FidLabel'), 'Label');
            self.tdOp = tr.td(self.op = Html.Select.create().bubble('onchange', self.toggle), 'Op')._cell;
            self.tdSpans = tr.td(self.spans = My.Spans.create().bubble('onchange', self), 'Spans')._cell;
            self.load(cv);
          },
          load:function(cv) {
            self.cv = cv;
            self.op.load(Map.extract(RepCritValue.OPS, cv.getFixedOps()), '');
            self.spans.load(cv);
            self.label.text(cv.fid);
            self.op.setValue(cv.op);
            self.spans.setValue(cv.value);
            return self;
          },
          getValue:function() {
            return self.cv.update(self.op.getValue(), self.spans.getValue());
          },
          //
          toggle:function() {
            self.tr.addClassIf('sel', self.op.getValue());
            self.spans.toggle(self.op.getValue());
            self.onchange();
          }
        }
      })
    },
    Spans:{
      create:function() {
        var My = this;
        return Html.Span.create().extend(function(self) {
          return {
            onchange:function() {},
            //
            init:function() {
              self.spanSingle = My.spanSingle.create(self).bubble('onchange', self);
              self.spanBetween = My.SpanBetween.create(self).bubble('onchange', self);
              self.spanSelect = My.SpanSelect.create(self).bubble('onchange', self);
              self.spanPicker = My.SpanPicker.create(self).bubble('onchange', self);
              self.hide();
            },
            /*
             * @arg RepCritValue cv
             */
            load:function(cv) {
              self.cv = cv;
              if (cv.getFixedValues)
                self.spanSelect.load(cv);
              else if (cv.getPicker)
                self.spanPicker.load(cv);
            },
            toggle:function(op) {
              switch (op) {
                case '':
                  self.hide();
                  break;
                case RepCritValue.OP_BETWEEN:
                case RepCritValue.OP_AGERANGE:
                  self.showBetween();
                  break;
                case RepCritValue.OP_IS:
                case RepCritValue.OP_IS_NOT:
                  if (self.cv.getFixedValues)
                    self.showSelect();
                  else
                    self.showPicker();
                  break;
                case RepCritValue.OP_NULL:
                case RepCritValue.OP_NOT_NULL:
                  self.hide();
                  break;
                default:
                  self.showSingle();
              }
            },
            hide:function() {
              self.spanSingle.hide();
              self.spanBetween.hide();
              self.spanSelect.hide();
              self.spanPicker.hide();
              self.span = null;
            },
            showSingle:function() {
              self.spanBetween.hide();
              self.spanSelect.hide();
              self.spanPicker.hide();
              self.span = self.spanSingle.show();
            },
            showBetween:function() {
              self.spanSingle.hide();
              self.spanSelect.hide();
              self.spanPicker.hide();
              self.span = self.spanBetween.show();
            },
            showSelect:function() {
              self.spanSingle.hide();
              self.spanBetween.hide();
              self.spanPicker.hide();
              self.span = self.spanSelect.show();
            },
            showPicker:function() {
              self.spanSingle.hide();
              self.spanBetween.hide();
              self.spanSelect.hide();
              self.span = self.spanPicker.show();
            },
            setValue:function(value) {
              if (self.span)
                self.span.setValue(value);
            },
            getValue:function() {
              if (self.span)
                return self.span.getValue();
            }
          }
        })  
      },
      spanSingle:{
        create:function(container) {
          return Html.Span.create().into(container).extend(function(self) {
            return {
              onchange:function() {},
              //
              init:function() {
                self.input = Html.InputText.create().into(self).bubble('onchange', self);
              },
              show:function() {
                Html._proto.show.call(self);
                self.input.setFocus();
                return self;
              },
              setValue:function(value) {
                self.input.setValue(value);
              },
              getValue:function() {
                return self.input.getValue();
              }
            }
          })
        }
      },
      SpanBetween:{
        create:function(container) {
          return CritRecForm.CritValueEntry.Spans.spanSingle.create(container).extend(function(self) {
            return {
              onchange:function() {},
              //
              init:function() {
                self.input.setSize(5);
                self.label = Html.Label.create('p5', 'and').into(self);
                self.input2 = Html.InputText.create(null).setSize(5).into(self).bubble('onchange', self);
              },
              setValue:function(value) {
                var a = value.split(',');
                self.input.setValue(a[0]);
                self.input2.setValue((a.length > 0) ? a[1] : null);
              },
              getValue:function(value) {
                var a = [self.input.getValue(), self.input2.getValue()];
                return a.join(',');
              }
            }
          })
        }
      },
      SpanSelect:{
        create:function(container) {
          return Html.Span.create().into(container).extend(function(self) {
            return {
              onchange:function() {},
              //
              load:function(cv) {
                self.cv = cv;
                self.select = Html.Select.create(cv.getFixedValues()).into(self).bubble('onchange', self.select_onchange);
                self._saveText();
              },
              show:function() {
                Html._proto.show.call(self);
                self.select.setFocus();
                return self;
              },
              setValue:function(value) {
                self.select.setValue(value);
              },
              getValue:function() {
                return self.select.getValue();
              },
              //
              _saveText:function() {
                self.cv._text = self.select.getText();
              },
              select_onchange:function() {
                self._saveText();
                self.onchange();
              }
            }
          })
        }
      },
      SpanPicker:{
        create:function(container) {
          return Html.Span.create().into(container).extend(function(self) {
            return {
              onchange:function() {},
              //
              load:function(cv) {
                self.cv = cv;
                self.picker = cv.getPicker().create().into(self).bubble('onset', self);
              },
              show:function() {
                Html._proto.show.call(self);
                self.picker.setFocus();
                return self;
              },
              setValue:function(value) {
                self.picker.set(self.cv._rec);
              },
              getValue:function() {
                return self.picker.getValue();
              },
              onset:function(rec) {
                self.cv._text = self.picker.getText();
                self.cv._rec = rec;
              }
            }
          })
        }
      }
    }
  }
}
/**
 * Rec ReportCriteria
 *   RepCritRec Rec
 */
ReportCriteria = Object.Rec.extend({
  //
  onload:function(json) {
    this.Rec = RepCritRec.revive(this.Rec);
  },
  addJoin:function(join) {
    this.Rec.Joins.push(join);
  }
})
/**
 * Rec RepCritRec
 *   RepCritJoin[] Joins
 */
RepCritRec = Object.Rec.extend({
  //
  _name:'Record',  // @abstract
  _getReviveProto:function(json) {
    switch (json._class) {
      case 'Client_Rep':
        return RepCrit_Client;
      case 'Diagnosis_Rep':
        return RepCrit_Diagnosis;
      case 'Med_Rep':
        return RepCrit_Med;
      case 'Allergy_Rep':
        return RepCrit_Allergy;
      case 'Proc_Rep':
        return RepCrit_Proc;
      case 'ProcResult_Rep':
        return RepCrit_ProcResult;
      case 'Immun_Rep':
        return RepCrit_Immun;
      case 'Vital_Rep':
        return RepCrit_Vital;
      default:
        return this;
    }
  },
  onload:function(json) {
    for (var fid in json) 
      if (fid == 'Joins')  
        this.Joins = RepCritJoin.reviveAll(json.Joins);
      else if (this._isCritValue(fid)) 
        this[fid] = this._getCritValueProto(fid).revive(json[fid], this._getFidLabel(fid));
  },
  /*
   * @callback(RepCritValue)
   */
  forEachValue:function(callback) {
    for (var fid in this)
      if (this[fid] && this[fid].fid)
        callback(this[fid]);
  },
  /*
   * @arg RepCritValue cv
   */
  update:function(cv) {
    self[cv.fid] = cv;
  },
  /*
   * @return string
   */
  summary:function() {
    var s = [];
    this.forEachValue(function(cv) {
      if (cv.hasData()) 
        s.push(cv.summary());
    })
    return (s.length == 0) ? 'Any' : s.join(' and ');
  },
  //
  _isCritValue:function(fid) {
    if (fid != '_class') 
      return true;
  },
  _getCritValueProto:function(fid) {
    return RepCritValue;  
  },
  _getFidLabel:function(fid) {
    return this._fixLabel(fid);
  },
  _fixLabel:function(fid) {
    return fid.substr(0, 1).toUpperCase() + fid.substr(1).replace(/([A-Z])/g, function($1){return " "+$1.toUpperCase()});
  }
})
/**
 * RepCritRec Subclasses
 */
RepCrit_Client = RepCritRec.extend({
  _name:'Patients',
  _getCritValueProto:function(fid) {
    switch (fid) {
      case 'birth':
        return RepCritValueAge;
      case 'sex':
        return RepCritValueSex;
      case 'deceased':
        return RepCritValueBool;
      case 'ethnicity':
        return RepCritValueFixed.from(C_Client.ETHNICITIES);
      case 'race':
        return RepCritValueFixed.from(C_Client.RACES);
      default:
        return RepCritValue;
    }
  },
  _getFidLabel:function(fid) {
    switch (fid) {
      case 'uid':
        return 'Patient ID';
      case 'birth':
        return 'Age';
      default:
        return RepCritRec._getFidLabel.call(this, fid);
    }
  }
})
RepCrit_Diagnosis = RepCritRec.extend({
  _name:'Diagnoses',
  _getCritValueProto:function(fid) {
    switch (fid) {
      case 'status':
        return RepCritValueFixed.from(C_Diagnosis.STATUSES);
      default:
        return RepCritValue;
    }
  },
  _getFidLabel:function(fid) {
    switch (fid) {
      case 'icd':
        return 'ICD Code';
      case 'text':
        return 'Description';
      default:
        return RepCritRec._getFidLabel.call(this, fid);
    }
  }
})
RepCrit_Med = RepCritRec.extend({
  _name:'Medications',
  _getCritValueProto:function(fid) {
    switch (fid) {
      case 'active':
        return RepCritValueBool;
      default:
        return RepCritValue;
    }
  }
})
RepCrit_Allergy = RepCritRec.extend({
  _name:'Allergies',
  _getCritValueProto:function(fid) {
    switch (fid) {
      case 'active':
        return RepCritValueBool;
      default:
        return RepCritValue;
    }
  }
}) 
RepCrit_Proc = RepCritRec.extend({
  _name:'Procedures',
  _getCritValueProto:function(fid) {
    switch (fid) {
      case 'ipc':
        return RepCritValuePicker.from(IpcPicker);
      case 'providerId':
        return RepCritValuePicker.from(ProviderPicker);
      default:
        return RepCritValue;
    }
  },
  _getFidLabel:function(fid) {
    switch (fid) {
      case 'ipc':
        return 'IPC';
      default:
        return RepCritRec._getFidLabel.call(this, fid);
    }
  }
}) 
RepCrit_ProcResult = RepCritRec.extend({
  _name:'Results',
  _getCritValueProto:function(fid) {
    switch (fid) {
      case 'ipc':
        return RepCritValuePicker.from(IpcPicker);
      case 'value':
        return RepCritValueNumeric;
      case 'interpretCode':
        return RepCritValueFixed.from(C_ProcResult.INTERPRET_CODES);
      default:
        return RepCritValue;
    }
  },
  _getFidLabel:function(fid) {
    switch (fid) {
      case 'ipc':
        return 'IPC';
      case 'interpretCode':
        return 'Interpretation'
      default:
        return RepCritRec._getFidLabel.call(this, fid);
    }
  }
}) 
RepCrit_Vital = RepCritRec.extend({
  _name:'Vitals',
  _getCritValueProto:function(fid) {
    switch (fid) {
      default:
        return RepCritValueNumeric;
    }
  },
  _getFidLabel:function(fid) {
    switch (fid) {
      case 'bpSystolic':
        return 'Systolic';
      case 'bpDiastolic':
        return 'Diastolic';
      case 'wt':
        return 'Weight';
      case 'hc':
        return 'Head';
      case 'wc':
        return 'Waist';
      case 'bmi':
        return 'BMI';
      default:
        return RepCritRec._getFidLabel.call(this, fid);
    }
  }
}) 
/**
 * Rec RepCritJoin
 *   RepCritRec[] Recs
 */
RepCritJoin = Object.Rec.extend({
  //
  onload:function() {
    if (this.Recs) 
      RepCritRec.reviveAll(this.Recs);
  },
  allowable:function() {
    if (this.Recs && this.Recs.length > 1)
      return [this.JT_HAVE_ONE, this.JT_HAVE_ALL, this.JT_NOT_HAVE_ANY];
    else
      return [this.JT_HAVE, this.JT_NOT_HAVE];
  },
  update:function(jt) {
    this.jt = jt;
  },
  addRec:function(rec) {
    this.Recs.push(rec);
    if (this.isSingleType())  
      this.jt = this.JT_HAVE_ALL;
  },
  isSingleType:function() {
    return this.jt == this.JT_HAVE || this.jt == this.JT_HAVE_NOT;
  }
})
/**
 * Rec RepCritValue
 */
RepCritValue = Object.Rec.extend({
  //
  onload:function(json, i) {
    this.fid = i;
  },
  /*
   * @arg String op
   * @arg String value
   */
  update:function(op, value) {
    this.op = String.nullify(op);
    this.value = String.nullify(value);
    return this;
  },
  isValueless:function() {
    return this.op == RepCritValue.OP_NULL || this.op == RepCritValue.OP_NOT_NULL;  
  },
  hasData:function() {
    return this.op && (this.value || this.isValueless());
  },
  /*
   * @return string
   */
  summary:function() {
    var s = this.fid.toUpperCase() + ' ' + this.OPS[this.op];
    if (! this.isValueless())
      s += ' "' + (this._text ? this._text : this.value) + '"';
    return s;
  },
  //
  getFixedOps:function() {  
    return [RepCritValue.OP_EQ, RepCritValue.OP_NEQ, RepCritValue.OP_START, RepCritValue.OP_CONTAIN, RepCritValue.OP_NULL, RepCritValue.OP_NOT_NULL];
  }
})
/**
 * RepCritValue Subclasses
 */
RepCritValueNumeric = RepCritValue.extend({
  getFixedOps:function() {
    return [RepCritValue.OP_EQ, RepCritValue.OP_NEQ, RepCritValue.OP_LTN, RepCritValue.OP_GTN, RepCritValue.OP_BETWEEN, RepCritValue.OP_NULL, RepCritValue.OP_NOT_NULL];  
  }
})
RepCritValueAge = RepCritValue.extend({ 
  getFixedOps:function() {
    return [RepCritValue.OP_EQ, RepCritValue.OP_NEQ, RepCritValue.OP_OLDER, RepCritValue.OP_YOUNGER, RepCritValue.OP_AGERANGE, RepCritValue.OP_NULL, RepCritValue.OP_NOT_NULL];
  }
})
RepCritValueFixed = RepCritValue.extend({
  getFixedOps:function() {
    return [RepCritValue.OP_IS, RepCritValue.OP_IS_NOT]; 
  },
  from:function(values) {
    return this.extend({
      getFixedValues:function() {
        return values;
      }
    }) 
  }
})
RepCritValueSex = RepCritValueFixed.from({'M':'Male','F':'Female'});
RepCritValueBool = RepCritValueFixed.from({'1':'Yes','0':'No'});
//
RepCritValuePicker = RepCritValue.extend({
  getFixedOps:function() {
    return [RepCritValue.OP_IS, RepCritValue.OP_IS_NOT];  
  },
  from:function(picker) {
    return this.extend({
      getPicker:function() {
        return picker;
      }
    })
  }
})
