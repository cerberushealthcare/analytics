<?php
require_once "php/data/db/User.php";
require_once "php/data/db/UserGroup.php";
require_once "php/data/ui/Permissions.php";

class LoginResult {  // global $myLogin

  public $uid;  // user's login ID
  public $pw;  // user's login password
  public $name;  // user's name
  public $sessionId;  // php session ID
  public $success;  // true if login succeeded (ID and password valid)
  public $userId;  // user's USERS table ID
  public $userGroupId;  // user's USER_GROUPS table ID
  public $usageLevel;  // 0=basic, 1=EMR, 2=ePrescribe
  public $userType;  // user's USER_TYPE setting
  public $admin;  // true if Clicktate admin
  public $subscription;  // 0=trial, 1=paying, 2=free
  public $active;  // true if user's account still active
  public $onTrial;  // true if still a trial account
  public $daysLeft;  // days left until trial expires / CC expires
  public $expireReason;  // why account is not active
  public $permissions;  // access levels for site functions
  public $onProd;  // true if on production environment
  public $estAdjust;  // EST timezone adjustment
  public $pwExpired;  // true if pw has expired
  public $vistaFonts;  // true if can render Calibri
  public $ie;  // IE version (6/7/8, null if not IE)
  public $hideStickies = array(); 
  
  private $gotDbFromEnv = false;

  // Called once userType and active established
  public function setPermissions() {
    $this->permissions = new Permissions($this->userType, $this->active, $this->usageLevel);
    if ($this->onTrial && $this->uid != 'padmasrikanth' && $this->uid != 'mloula2') {
      $this->permissions->accessTemplates = Permissions::ACCESS_NONE;
    }
  }
  
  // Helper functions
  public function isAdmin() {
    return $this->admin;
  }
  public function isBasic() {
    return $this->usageLevel == UserGroup::USAGE_LEVEL_BASIC;
  }
  public function isEmr() {
    return $this->usageLevel >= UserGroup::USAGE_LEVEL_EMR;
  }
  public function isErx() {
    return $this->usageLevel == UserGroup::USAGE_LEVEL_EPRESCRIBE;
  }
  public function isDoctor() {
    return $this->userType == User::USER_TYPE_DOCTOR;
  }
  public function isInactiveDoctor() {
    return LoginResult::isDoctor() && ! $this->active;
  }
  public function isNeedNewBilling() {
    return User::isExpireNeedNewBilling($this->expireReason);
  }
  public function isLoginNotAllowed() {
    return User::isExpireNoLogin($this->expireReason);
  }
  public function getInactiveReason() {
    return User::getExpireReasonDesc($this->expireReason);
  }
  public function isOnProd() {
    if (! $this->gotDbFromEnv) {
      $this->onProd = (dbFromEnv() == "emr");
      $this->gotDbFromEnv = true;
    }
    return $this->onProd;
  }
  
  // Static functions
  public static function testingLabel() {
    $prefix = substr($_SERVER['HTTP_HOST'], 0, 4);
    if ($prefix == "loca") {
      // return "<span style='font-size:21pt; font-weight:bold; font-family:Calibri; color:#1e90ff; vertical-align:top; padding-left:5px; letter-spacing:1px;'>LOCAL MACHINE</span>";
    } else if ($prefix == "test") {
      return "<span style='font-size:21pt; font-weight:bold; font-family:Calibri; color:orange; vertical-align:top; padding-left:5px; letter-spacing:1px;'>TEST</span>";
    } 
  }
}
?>
