/**
 * EntryForm
 * Entry form / data record builder
 * Requires: EntryForm.css
 */
/*
 * EntryForm constructor
 * - ul: parent <ul> to contain this form; ul.eform will be set to this instance
 * - firstLabelClass: optional, default 'first'
 * After construction, use addLi/append methods to build empty form and define the record 
 */
function EntryForm(ul, firstLabelClass) {
  EntryForm._newInstance(this);
  this.ul = _$(ul);
  this.ul.addClass('eform');
  this.setFirstLabelClass(firstLabelClass);
  this.ul.eform = this;
  this.appender.ef = this;
  this.ul.clean();
  this.fields = {};
  this._dirty = false;
}
/*
 * EntryForm class defs
 */
EntryForm.prototype = {
  ul:null,          // parent <ul>
  fields:null,      // {fid:e} for constructing data record
  _li:null,
  _e:null,          // last cached element 
  _dirty:null, 
  _onChangeAny:null,    // callback
  _i:null,          // instance index
  //
  /*
   * Assign class of first label for each row
   * @arg string className (optional, default 'first')
   */
  setFirstLabelClass:function(className) {
    this.ul.firstLabelClass = className || 'first';
  },
  /*
   * Start <li> entry
   * @arg string labelText (optional)
   * @arg string labelClass (optional)
   * @arg string id of <li> (optional)
   */
  li:function(labelText, className, labelClass, id) {
    var li = this.ul.li(className);
    li.id = id;
    this._li = _$(li);
    if (labelText) 
      this.appendLabel(labelText, labelClass);
    this.appender.ef = this;
    return this.appender;
  },
  line:function(cls) {
    return this.li(null, cls);
  },
  appender:{
    ef:null,
    id:function(id){this.ef[id]=_$(this.ef._li);return this},
    start:function(id){this.ef[id]=_$(this.startSpan());return this},
    end:function(){return this.endSpan()},
    append:function(e){return this.ef.append(e)},
    span:function(text, cls){return this.ef.appendSpan(text, cls)},
    lbl:function(text, cls){return this.ef.appendLabel(text || '', cls)},
    lbln:function(text){return this.ef.appendLabel(text || '', 'nopad')},
    lblf:function(fid, cls){if(cls==null){cls='nopad'}return this.ef.appendLabelFid(fid, cls)},
    check:function(fid, text, onchange){return this.ef.appendLabelCheck(fid, text, onchange)},
    textbox:function(fid, size, maxlen){return this.ef.appendTextbox(fid, size, null, null, maxlen)},
    password:function(fid, size, maxlen){return this.ef.appendPassword(fid, size, null, null, maxlen)},
    textarea:function(fid, rows, id){return this.ef.appendTextArea(fid, null, null, rows, id)},
    rtb:function(fid, rows, id){return this.ef.appendRtb(fid, rows, id)},
    picker:function(picker, fid, recFid, onset){return this.ef.appendRecordPicker(picker, fid, recFid, onset)},
    client:function(fid, recFid, defaultText){return this.ef.appendClientPicker(fid, recFid, defaultText)},
    select:function(fid, list, blankText, onchange){return this.ef.appendSelect(fid, list, blankText, null, null, onchange)},
    atab:function(fid, at, onchange, onpop){return this.ef.appendAnchorTab(fid, at.create(), null, null, null, onchange, onpop)},
    atradio:function(fid, list, onchange, onpop){return this.ef.appendAnchorTab(fid, Html.AnchorTab.create().radios(list).cancelOnly(), null, null, null, onchange, onpop)},
    date:function(fid, onset){return this.ef.appendDateInput(fid, null, null, onset)},
    datetime:function(fid, onset){return this.ef.appendDateTimeInput(fid, null, null, onset)},
    qdate:function(fid){return this.ef.appendQuestionDate(fid)},
    augd:function(p, fid){return this.ef.appendAugmented(p, fid)},
    h2:function(fid, blankText){return this.ef.appendH2(fid, blankText)},
    h3:function(fid, blankText){return this.ef.appendH3(fid, blankText)},
    ro:function(fid, cls){return this.ef.appendReadOnly(fid, cls)},
    readonly:function(text){return this.ef.appendSpan(text, 'rof')},
    hidden:function(fid){return this.ef.appendField(fid)},
    startSpan:function(id){return this.ef.startSpan(id)},
    endSpan:function(){return this.ef.endSpan()}
  },
  startSpan:function(id) {
    var span = Html.Span.create().setId(id);
    span.li = this._li;
    this.append(span);
    this._li = span;
    if (id)
      this[id] = _$(id);
    return this.appender;
  },
  endSpan:function() {
    this._li = this._li.li;
    return this.appender;
  },
  /*
   * Append non-field element
   * - labelText, labelClass: optional
   */
  append:function(e, labelText, labelClass) {
    this.appendLabel(labelText, labelClass);
    this._li.appendChild(e);
    return this.appender;
  },
  /*
   * Append label
   */
  appendLabel:function(labelText, labelClass) {
    if (labelText != null) {
      labelClass = labelClass || this._li.innerHTML ? null : this.ul.firstLabelClass;
      this._li.appendChild(Html.Label.create(labelClass, labelText));
    }
    return this.appender;
  },
  appendLabelFid:function(fid, className) {
    var e = Html.Label.create(className, '');
    e.aug({
      ftype:EntryForm._FTYPE_AUGMENTED,
      setValue:function(value) {
        e.setText(value);
      },
      getValue:function() {
        return e.innerText;
      }
    });
    this._cacheAndAppend(fid, e);
    return this.appender;
  },
  appendRtb:function(fid, rows, id) {
    id = id || 'rtb__';
    var ta = Html.TextArea.create('rtb').setId(id).setRows(rows || 4).into(this._li);
    //tinyMCE.init({mode:'exact',elements:id,theme:'simple'});
    tinyMCE.init({
      // General options
      mode : "exact",
      elements: id,
      theme : "advanced",
      plugins : "autolink,lists,spellchecker,pagebreak,style,layer,table,save,advhr,advimage,advlink,emotions,iespell,inlinepopups,insertdatetime,preview,media,searchreplace,print,contextmenu,paste,directionality,fullscreen,noneditable,visualchars,nonbreaking,xhtmlxtras,template",

      // Theme options
      theme_advanced_buttons1 : "bold,italic,underline,strikethrough,|,justifyleft,justifycenter,justifyright,justifyfull,|,bullist,numlist,|,outdent,indent,blockquote,|,forecolor,backcolor,|,cut,copy,paste,pastetext,pasteword,|,search,replace,|,iespell,|,undo,redo",
      theme_advanced_buttons2 : "tablecontrols,|,link,unlink,anchor,image,hr,charmap,emotions,media,sub,sup,|,cleanup,help,code,|,fullscreen,|,preview",
      theme_advanced_buttons3 : "",
      //theme_advanced_buttons4 : "insertlayer,moveforward,movebackward,absolute,|,styleprops,spellchecker,|,cite,abbr,acronym,del,ins,attribs,|,visualchars,nonbreaking,template,blockquote,pagebreak,|,insertfile,insertimage",
      theme_advanced_toolbar_location : "top",
      theme_advanced_toolbar_align : "left",
      //theme_advanced_statusbar_location : "bottom",
      //theme_advanced_resizing : true,

      // Skin options
      skin : "o2k7",
      skin_variant : "silver"
});
    ta.aug({
      ftype:EntryForm._FTYPE_AUGMENTED,
      setValue:function(html) {
        html = this.elimlfs(html);
        if (tinyMCE.get(id))
          tinyMCE.get(id).setContent(html);
        else
          ta.value = html;
      },
      getValue:function() {
        if (tinyMCE.get(id))
          return this.elimlfs(tinyMCE.get(id).getContent());
        else
          return ta.value;
      },
      elimlfs:function(s) {
        return (s) ? s.replace(/(\r\n|\n|\r)/gm,"") : '';    
      }
    })
    this._cacheAndAppend(fid, ta);
    return this.appender;
  },
  /*
   * Append <span>
   */
  appendSpan:function(text, className) {
    this.append(Html.Span.create(className, text));
    return this.appender;
  },
  /*
   * Append field entry element
   * - fid: field ID of data record
   * - e: optional HTML element to store field's value
   *      may be null to reserve space (hidden field)   
   * - labelText, labelClass: optional
   */
  appendField:function(fid, e, labelText, labelClass) {
    this.appendLabel(labelText, labelClass);
    var self = this;
    if (e) 
      e.onchange = function() {
        self._callOnChangeAny(e);
      }
    this._cacheAndAppend(fid, e);
    return this.appender;
  },
  /*
   * Append textbox
   * - size: optional
   */
  appendTextbox:function(fid, size, labelText, labelClass, maxlen) {
    this.appendLabel(labelText, labelClass);
    this._cacheAndAppend(fid, Html.InputText.create().setSize(size).setMaxLength(maxlen));
    return this.appender;
  },
  /*
   * Append password
   * - size: optional
   */
  appendPassword:function(fid, size, labelText, labelClass, maxlen) {
    this.appendLabel(labelText, labelClass);
    this._cacheAndAppend(fid, Html.InputPassword.create().setSize(size).setMaxLength(maxlen));
    return this.appender;
  },
  /*
   * Append textarea
   */
  appendTextArea:function(fid, labelText, labelClass, rows, id) {
    this.appendLabel(labelText, labelClass);
    var ta = Html.TextArea.create().setId(id).setRows(rows || 4);
    this._cacheAndAppend(fid, ta);
    return this.appender;
  },
  /*
   * Append select
   * - list: {key:text,..}
   * - blankText: optional, see ui.createSelect
   */
  appendSelect:function(fid, list, blankText, labelText, labelClass, onchange) {
    this.appendLabel(labelText, labelClass);
    //this._cacheAndAppend(fid, createSelect(null, null, Map.from(list), null, blankText, onchange));
    var sel = Html.Select.create(Map.from(list), blankText);
    if (onchange)
      sel.onchange = onchange;
    this._cacheAndAppend(fid, sel);
    return this.appender;
  },
  /*
   * Append AnchorTab
   * - maxWidth: optional
   */
  appendAnchorTab:function(fid, at, labelText, labelClass, maxWidth, onchange, onpop) {
    if (onchange)
      at.setOnchange(onchange);
    if (onpop)
      at.setOnpop(onpop);
    this.appendLabel(labelText, labelClass);
    if (maxWidth) {
      var span = Html.Span.create('fwidth').add(at.anchor);
      span.style.width = maxWidth;
      this._cacheAndAppend(fid, at.anchor, span);
    } else {
      this._cacheAndAppend(fid, at.anchor);  
    }
    return this.appender;
  },
  /*
   * Append record picker 
   * @arg obj picker either class or instance e.g. IpcPicker or IpcPicker.create()
   * @arg string fid 'providerId'
   * @arg string recFid 'Provider' for assigning value via setRecord()
   */
  appendRecordPicker:function(picker, fid, recFid, onset) {
    var p = (picker.create) ? picker.create() : picker;
    if (onset) 
      p.onset = onset;
    p.ftype = EntryForm._FTYPE_REC_PICKER;
    p.recFid = recFid;
    this._cacheAndAppend(fid, p);
    return this.appender;
  },
  /*
   * Append any element augmented with setValue/getValue
   */
  appendAugmented:function(proto, fid) {
    var e = (proto.create) ? proto.create() : proto;
    e.ftype = EntryForm._FTYPE_AUGMENTED,
    this._cacheAndAppend(fid, p);
    return this.appender;
  },
  /*
   * Append label check
   */
  appendLabelCheck:function(fid, labelText, onchange) {
    var e = Html.LabelCheck.create(labelText, null);
    e.aug({
      onclick_check:function(lcheck) {
        if (onchange)
          onchange(lcheck);
      },
      ftype:EntryForm._FTYPE_AUGMENTED,
      setValue:function(value) {
        e.setChecked(value);
      },
      getValue:function() {
        return e.isChecked();
      }
    })
    this._cacheAndAppend(fid, e);
    return this.appender;
  },
  /*
   * Append readonly  
   */
  appendReadOnly:function(fid, cls) {
    cls = (cls) ? 'rof ' + cls : 'rof';
    var e = Html.Span.create(cls);
    e.aug({
      ftype:EntryForm._FTYPE_AUGMENTED,
      setValue:function(value) {
        if (String.isBlank(value))
          e.html('&nbsp; &nbsp; &nbsp; &nbsp;');
        else
          e.html(value);
      },
      getValue:function() {
        return e.innerText;
      }
    });
    this._cacheAndAppend(fid, e);
    return this.appender;
  },
  /*
   * Append header  
   */
  appendH3:function(fid, blankText) {
    var e = Html.H3.create(blankText);
    blankText = blankText || '&nbsp; &nbsp; &nbsp; &nbsp;'; 
    e.aug({
      ftype:EntryForm._FTYPE_AUGMENTED,
      setValue:function(value) {
        if (String.isBlank(value))
          e.html(blankText);
        else
          e.setText(value);
      },
      getValue:function() {
        return e.innerText;
      }
    });
    if (fid) {
      this._cacheAndAppend(fid, e);
    } else {
      this._li.appendChild(e);
    }
    return this.appender;
  },
  appendH2:function(fid, blankText) {
    var e = Html.H2.create(blankText);
    blankText = blankText || '&nbsp; &nbsp; &nbsp; &nbsp;'; 
    e.aug({
      ftype:EntryForm._FTYPE_AUGMENTED,
      setValue:function(value) {
        if (String.isBlank(value))
          e.html(blankText);
        else
          e.setText(value);
      },
      getValue:function() {
        return e.innerText;
      }
    });
    if (fid) {
      this._cacheAndAppend(fid, e);
    } else {
      this._li.appendChild(e);
    }
    return this.appender;
  },
  /*
   * Append date question pop 
   */
  appendQuestionDate:function(fid) {
    var e = QuestionDateEntry.create();
    e.aug({
      ftype:EntryForm._FTYPE_AUGMENTED,
      setValue:e.setText,
      getValue:e.getText
    });
    this._cacheAndAppend(fid, e);
    return this.appender;
  },
  /*
   * Append client picker
   * @arg a: <a> tag with text defaulted, no href necessary (optional)
   * Props assigned to <a> upon selection:
   *   value: cid
   *   innerText: name
   *   client: JClient
   */
  appendClientPicker:function(fid, a, recFid, labelText, labelClass) {
    fid = fid || 'clientId';
    this.appendLabel(labelText, labelClass);
    if (! Html.is(a)) {
      var text = a || 'Select a patient';
      a = createAnchor(null, null, 'client', text);
    }
    a.ftype = EntryForm._FTYPE_CLIENTPICKER;
    a.defaultText = a.innerText;
    a.href = 'javascript:';
    var self = this;
    a.onclick = function() {
      self._popClientPicker(fid);
    };
    a.recFid = recFid;
    this._cacheAndAppend(fid, a);      
    return this.appender;
  },
  /*
   * Append DateInput
   */
  appendDateInput:function(fid, labelText, labelClass, onset) {
    this.appendLabel(labelText, labelClass);
    var di = new DateInput(null, null, onset);
    di.span.ftype = EntryForm._FTYPE_DATEINPUT;
    this._cacheAndAppend(fid, di.span);
    return this.appender;
  },
  /*
   * Append DateTimeInput
   */
  appendDateTimeInput:function(fid, labelText, labelClass, onset) {
    this.appendLabel(labelText, labelClass);
    var di = new DateTimeInput(null, null, onset);
    di.span.ftype = EntryForm._FTYPE_DATETIMEINPUT;
    this._cacheAndAppend(fid, di.span);
    return this.appender;
  },
  /*
   * Append calendar picker
   */
  appendCalendar:function(fid, labelText, labelClass) {
    this.appendLabel(labelText, labelClass);
    var i = Html.InputText.create().setId(id).setSize(10);
    i.ftype = EntryForm._FTYPE_CALENDAR;
    this._cacheAndAppend(fid, i);
    this.append(createAnchor(fid, 'javascript:Pop.Calendar.showFromTextbox("' + fid + '")', 'cal'));
    return this.appender;
  },
  /*
   * Assign onChange handler to last field appended, calling fn(value, e)
   */
  setOnChange:function(fn) {
    this._e.efOnChange = fn;
    return this.appender;
  },
  /*
   * Assign onDirty handler for entire form, calling fn(record)
   */
  setOnChangeAny:function(fn) {
    this._onChangeAny = fn;
  },
  _callOnChangeAny:function(e) {
    if (this._onChangeAny) {
      this._onChangeAny();
    }
  },
  /*
   * Assign field values by record
   * Any fields referenced in record but not appended to form will be treated as hidden fields
   * Temp/object field names (e.g. rec.Client, rec._name) are excluded 
   * @arg record {fid:value,..}
   */
  setRecord:function(record) {
    this.reset();
    if (record) {
      this._recOrig = null;
      var e, value;
      for (var fid in record) {
        if (fid in this.fields) {
          e = this.fields[fid];
          if (! Function.is(e)) {
            value = (e.recFid) ? record[e.recFid] : record[fid];
            this.setValue(fid, value);
          }
        } else {
          value = record[fid];
          this._cacheAndAppend(fid, this._newHidden(value));
          this.setValue(fid, record[fid]);
        }
      }
    } else {
      this.reset();
    } 
    this._dirty = false;
    this.resetRecordChanged();
  },
  setFields:function(record) {
    this.setRecord(record, true);
  },
  isColumnFid:function(fid) {
    var c = fid.substr(0, 1);
    return ! (c == '_' || c == c.toUpperCase());
  },
  /*
   * Renders value to cached UI element 'e' 
   */
  setValue:function(fid, value) {
    var e = this.fields[fid];
    var oldValue = this._readValue(e);
    this._renderValue(e, value);
    var newValue = this._readValue(e);
    if (newValue != oldValue) {
      this._setDirty();
      if (e.efOnChange) 
        e.efOnChange(newValue, e);
    }
  },
  _renderValue:function(e, value) {  // value may be null
    switch (e.ftype) {
      case EntryForm._FTYPE_TEXTAREA:
        if (value)
          setValue_(e, this.stripslashes(value));
        else
          setValue_(e, null);
        break;
      case EntryForm._FTYPE_TEXTINPUT:
      case EntryForm._FTYPE_COMBO:
        setValue_(e, value);
        break;
      case EntryForm._FTYPE_HIDDEN:
        e.value = value;
        break;
      case EntryForm._FTYPE_CHECKBOX:
        e.checked = (value == true);
        break;
      case EntryForm._FTYPE_ATAB:
        e.anchorTab.setValue(value);
        break;
      case EntryForm._FTYPE_CALENDAR:
        setValue_(e, formatDate(value));
        break;
      case EntryForm._FTYPE_DATEINPUT:
        e.dateInput.setText(value);
        break;
      case EntryForm._FTYPE_REC_PICKER:
        e.set(value);  // Rec 
        break;
      case EntryForm._FTYPE_DATETIMEINPUT:
        e.dateTimeInput.setText(value);
        break;
      case EntryForm._FTYPE_CLIENTPICKER:
        e.client = value;  // JClient
        e.innerText = (e.client) ? e.client.name : e.defaultText;
        break; 
      default:
        e.setValue(value);
    }
    if (e.onchange)
      e.onchange();
  },
  stripslashes:function(str) {
    return (str + '').replace(/\\(.?)/g, function (s, n1) {
      switch (n1) {
      case '\\':
          return '\\';
      case '0':
          return '\u0000';
      case '':
          return '';
      default:
          return n1;
      }
    })
  },
  /*
   * Reset field values
   */
  reset:function() {
    for (var fid in this.fields) {
      this.setValue(fid, null);
    }
    this.resetRecordChanged();
    return this;
  },
  /*
   * Returns true if record has changed
   */
  isRecordChanged:function() {
    if (this._recOrig) {
      var _recNow = this.serialize();
      var changed = _recNow != this._recOrig;
      return changed;
    }
  },
  resetRecordChanged:function() {
    this._recOrig = this.serialize();
  },
  clearRecordChanged:function() {
    this._recOrig = null;
  },
  focus:function(fid) {
    if (fid == null) 
      for (fid in this.fields)
        break;
    var e = this.fields[fid];
    if (e) 
      Page.focus(e);
  },
  hideField:function(fid) {
    var e = this.fields[fid];
    if (e.hide)
      e.hide();
  },
  showField:function(fid) {
    var e = this.fields[fid];
    if (e.show)
      e.show();
  },
  showIf:function(id, test) {
    var e = this[id];
    if (e) 
      e.showIf(test);
  },
  /*
   * Returns UI element
   */
  getField:function(fid) {
    var e = this.fields[fid];
    if (e.ftype == EntryForm._FTYPE_ATAB) 
      e = e.anchorTab;
    return e;
  },
  /*
   * Build record from entry form values
   * @arg bool onlyDefinedFields (optional, default false)
   * @return {fid:value,..}
   */
  getRecord:function(onlyDefinedFields) {
    var record = {};
    for (var fid in this.fields) {
      e = this.fields[fid];
      if (! onlyDefinedFields || e.ftype != EntryForm._FTYPE_HIDDEN) 
        record[fid] = this.getValue(fid);
    }
    return record;
  },
  /*
   * @return string JSON encoded object of defined fields
   */
  serialize:function() {
    return Json.encode(this.getRecord(true));
  },
  /*
   * Apply defined entry form values to record
   * @arg object rec
   * @return rec 
   */
  applyTo:function(rec) {
    var form = this.getRecord(true);
    return (rec) ? Object.augment(rec, form) : form;
  },
  /*
   * Returns rendered value of cached UI element 'e'
   */
  getValue:function(fid) {
    var e = this.fields[fid];
    return this._readValue(e);
  },
  /*
   * Returns true if any form field changed
   */
  isDirty:function() {
    return this._dirty;
  },
  clearDirty:function() {
    this._dirty = false;
  },
  show:function(on) {
    Page.show(this.ul, on);
  },
  _setDirty:function() {
    this._dirty = true;
  },
  _popClientPicker:function(fid, noCacheMouse) {
    var self = this;
    if (! noCacheMouse)
      Pop.cacheMousePos();
    PatientSelector.pop(function(client) {
      self.setValue(fid, client);
    });
  },
  _cacheAndAppend:function(fid, e, eAppend) {  // eAppend required only if different than e, e.g. a <span> surrounding <e> 
    if (e) {
      if (e.ftype == null) 
        e.ftype = this._getFieldType(e);
      if (e.ftype != EntryForm._FTYPE_HIDDEN) 
        this._li.appendChild(eAppend || e);
      if (e.onchange)
        e.onchange.append(this._callOnChangeAny.bind(this));
      else
        e.onchange = this._callOnChangeAny.bind(this);
    } else {
      e = EntryForm._HIDDEN_ELEMENT;
    }
    this.fields[fid] = e;
    this._e = e;
  },
  _readValue:function(e) {
    var value = null;
    switch (e.ftype) {
      case EntryForm._FTYPE_TEXTINPUT:
      case EntryForm._FTYPE_TEXTAREA:
      case EntryForm._FTYPE_COMBO:
      case EntryForm._FTYPE_CALENDAR:
        value = String.trim(e.value);
        break;
      case EntryForm._FTYPE_HIDDEN:
      case EntryForm._FTYPE_REC_PICKER:
        value = e.value;
        break;
      case EntryForm._FTYPE_CHECKBOX:
        value = e.checked;
        break;
      case EntryForm._FTYPE_ATAB:
        value = e.anchorTab.getValue();
        break;
      case EntryForm._FTYPE_DATEINPUT:
        value = e.dateInput.getText();
        break;
      case EntryForm._FTYPE_DATETIMEINPUT:
        value = e.dateTimeInput.getText();
        break;
      case EntryForm._FTYPE_CLIENTPICKER:
        value = (e.client) ? e.client.clientId : null;
        break;
      default:
        value = e.getValue();
    }
    return value;
  },
  _getFieldType:function(e) {
    var ftype = null;
    if (e.tagName == 'INPUT') {
      ftype = (e.type == 'checkbox') ? EntryForm._FTYPE_CHECKBOX : EntryForm._FTYPE_TEXTINPUT; 
    } else if (e.tagName == 'SELECT') {
      ftype = EntryForm._FTYPE_COMBO;
    } else if (e.tagName == 'TEXTAREA') {
      ftype = EntryForm._FTYPE_TEXTAREA;      
    } else if (e.tagName == 'A') {
      ftype = EntryForm._FTYPE_ATAB;
    }
    return ftype;
  },
  _newHidden:function(value) {
    return {
      'ftype':EntryForm._FTYPE_HIDDEN,
      'value':value
      };
  }
}
// Field types
EntryForm._FTYPE_TEXTINPUT = 0;
EntryForm._FTYPE_COMBO = 1;
EntryForm._FTYPE_CHECKBOX = 2;
EntryForm._FTYPE_TEXTAREA = 3;
EntryForm._FTYPE_ATAB = 4;
EntryForm._FTYPE_CLIENTPICKER = 5;
EntryForm._FTYPE_CALENDAR = 6;
EntryForm._FTYPE_DATEINPUT = 7;
EntryForm._FTYPE_DATETIMEINPUT = 8;
EntryForm._FTYPE_REC_PICKER = 9;
EntryForm._FTYPE_AUGMENTED = 10;  // augmented with getValue/setValue
EntryForm._FTYPE_HIDDEN = 99;
// Hidden placeholder element
EntryForm._HIDDEN_ELEMENT = {ftype:EntryForm._FTYPE_HIDDEN};
// Instance management
EntryForm._ict = 0;  // instance count
EntryForm._newInstance = function(instance) {
  instance._i = EntryForm._ict++;
}
/* ui.js remnants */
function setValue_(e, value) {
  var v = value || '';
  if (e.tagName == "SELECT") {
    for (var i = 0; i < e.options.length; i++) {
      if (e.options[i].value == v) {
        e.options[i].selected = true;
        return e;
      }
    }
    e.options[0].selected = true;
    return e;
  }
  e.value = v;
  return e;  
}
