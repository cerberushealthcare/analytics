/**
 * Rec MsgThread
 */
MsgThread = Object.Rec.extend({
  /*
  threadId
  userGroupId
  clientId
  creatorId
  creator
  dateCreated
  dateToSend
  dateClosed
  type  
  status
  priority
  subject
  stubType
  stubId
  //
  ClientStub
  MsgInbox
  MsgPosts
  facesheet
  */
  onload:function() {
    this.setr('MsgInbox', MsgInbox);
    this.setr('MsgPosts', MsgPosts);
    this.setr('facesheet', MsgFacesheet);
    this._type = this.uiType();
    this._patient = this.uiClient();
  },
  isStat:function() {
    return this.priority == C_MsgThread.PRIORITY_STAT;
  },
  isClosed:function() {
    return this.status == C_MsgThread.STATUS_CLOSED; 
  },
  isUnread:function() {
    return this.MsgInbox && this.MsgInbox.isUnread();
  },
  isPortal:function() {
    return this.type == C_MsgThread.TYPE_PATIENT;
  },
  uiTitle:function() {
    return this.isPortal() ? 'PORTAL: ' + this.subject : this.subject;
  },
  uiType:function() {
    return C_MsgThread.TYPES[this.type];
  },
  uiClient:function() {
    return this.ClientStub ? this.ClientStub.name : '(None)';
  },
  uiPostDate:function() {
    var post = this.getInboxPost();
    return post && post.dateCreated;
  },
  uiPostFrom:function() {
    var post = this.getInboxPost();
    return post && post.author;
  },
  uiPostTo:function() {
    var post = this.getInboxPost();
    return post && post.sendTo;
  },
  asSelector:function() {
    var a = Html.AnchorAction.asMsg(this.uiTitle());
    if (this.isClosed())
      a.setClass('action msglock');
    else if (this.isUnread())
      a.addClass('unread');
    else 
      a.addClass('read');
    if (this.isStat())
      a.addClass('stat');
    return a;
  },
  getInboxPost:function() {
    return this.MsgInbox && this.MsgInbox.MsgPost;
  },
  getLastPost:function() {
    if (this.MsgPosts)
      return this.MsgPosts.end();
  },
  //
  ajax:function(worker) {
    var self = this;
    return {
      //
      fetch:function(mtid, callback) {
        Ajax.getr(Ajax.SVR_MSG, 'getThread', mtid, MsgThread, worker, callback);
      }
    }
  }
})
MsgThreads = Object.RecArray.of(MsgThread, {
  //
  ajax:function(worker) {
    var self = this;
    return {
      //
      fetchInbox:function(callback) {
        Ajax.getr(Ajax.SVR_MSG, 'getMyInbox', null, MsgThreads, worker, callback);
      },
      fetchSent:function(callback) {
        Ajax.getr(Ajax.SVR_MSG, 'getMySent', null, MsgThreads, worker, callback);
      }
    }
  }
})
//
MsgInbox = Object.Rec.extend({
  /*
  inboxId
  recipient
  threadId
  postId 
  isRead
  MsgPost
  */
  onload:function() {
    this.setr('MsgPost', MsgPost);
  },
  isUnread:function() {
    return this.isRead == C_MsgInbox.IS_UNREAD;
  }
})
MsgPost = Object.Rec.extend({
  /*
  postId
  threadId
  action
  dateCreated
  authorId
  author
  body
  sendTo
  data
  stubType
  stubId
  */
})
MsgPosts = Object.RecArray.of(MsgPost, {
  //
})
//
MsgFacesheet = Object.Rec.extend({
  //
  onload:function() {
    this.setr('portalUser', PortalUser);
  },
  //
  ajax:function(worker) {
    var self = this;
    return {
      //
      fetch:function(cid, callback) {
        Ajax.getr(Ajax.SVR_MSG, 'getFacesheet', cid, MsgFacesheet, worker, callback);
      }
    }
  }
})