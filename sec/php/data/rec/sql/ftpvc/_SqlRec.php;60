<?php
require_once 'php/dao/_util.php';
require_once 'php/data/rec/_Rec.php';
require_once 'php/data/rec/sql/dao/Dao.php';
/**
 * Marker Interfaces  
 */
interface ReadOnly {}     // Record is not persistable
interface CompositePk {}  // Record does not use single auto-inc PK
interface NoAudit {}      // Record should not self-audit updates  
/**
 * Persistable Data Record (SQL table row) 
 * Formatting of class properties (fids):
 * - First n fids for column values: 'colName'
 * - Fids for joined rows: 'SqlRecName' or 'SqlRecName_FkFid' ('_FkFid' suffix not required if fk is same as SqlRec's pk)  
 * - Helper fids: '_helper' 
 * @author Warren Hornsby
 */
abstract class SqlRec extends Rec {
  //
  /**
   * @return string 'table_name'
   */
  public abstract function getSqlTable();
  /**
   * Assigns fields based upon args supplied:
   *   (value1,value2,..)      multiple args: each assigned in field definition order
   *   ([value,..])            single arg, array: values assigned in field definition order 
   *   ([sql_field=>value,..]) single arg, SQL array: assigned in field definition order 
   *   ({fid:value,..})        single arg, decoded JSON object: values mapped to fields
   */
  public function __construct() {
    $args = func_get_args();
    if (count($args) == 1)  
      if (is_assoc($args[0])) {  
        $this->__constructFromSqlArray($args[0]);
        $args = null;
      } else if (is_array($args[0])) {  
        parent::__constructFromArray($args[0]);
        $args = null;
      } else if (is_object($args[0])) { 
        parent::__constructFromObject($args[0]);
        $args = null;
      }
    if ($args)  
      parent::__constructFromArgs($args);
  }
  public function __constructFromSqlArray($arr) {
    $fids = $this->getFids();
    foreach ($arr as $rfid => $value) {
      if (is_array($value)) {
        $this->set($rfid, $value);
      } else {
        $this->set(current($fids), $value);
        next($fids);
      }
    }
  }
  /**
   * Clone record (shallow) excluding PK 
   */
  public function __clone() {
    $fid = $this->getPkFid();
    if ($fid) 
      $this->$fid = null;
  }
  /**
   * Assign field value according to type
   * @param string $fid
   * @param string $value: simple field assignment
   *        array $value: child Rec assignment from SQL array [sql_field=>value,..]
   *        object $value: child Rec assignment from decoded JSON object {fid:value,..}  
   */
  public function set($fid, $value) {
    if ($value !== null) {
      if (is_array($value))
        $this->setSqlArray($fid, $value);
      else
        parent::set($fid, $value);
    }
  }
  public function setSqlArray($fid, $value) {
    if (is_int(key($value))) {
      $field = key(current($value));
      if (strpos($field, '.') == false) {
        parent::set($fid, $value);
      } else {
        $class = self::getClassFromSqlField($field);
        $recs = array();
        foreach ($value as $v) 
          $recs[] = new $class($v);
        $this->$fid = $recs;
      }
    } else {
      $class = self::getClassFromSqlField(key($value));
      $this->$fid = new $class($value);
    }
  }
  /**
   * Authenticate record as fetch criteria
   * @throws SecurityException
   */
  public function authenticateAsCriteria() {
    if (isset($this->_authenticated))
      return;
    if (! $this->authenticatePk()) { 
      if (isset($this->clientId)) { 
        LoginDao::authenticateClientId($this->clientId);
      } else { 
        if ($this->hasUserGroupId()) {
          if (isset($this->userGroupId)) 
            LoginDao::authenticateUserGroupId($this->userGroupId);
          else 
            throw new SecurityException('User group ID required in ' . $this->getMyName());
        }
      }
    }
    $this->_authenticated = true;
  }
  /**
   * Authenticate record PK value for fetch
   * Override necessary if no user group on table
   * @return true if PK set and authenticated 
   * @throws SecurityException
   */
  public function authenticatePk() {
    if (isset($this->_authenticated))
      return;
    if ($this->getPkValue()) {
      if ($this->hasUserGroupId()) {
        LoginDao::authenticateUserGroupIdWithin($this->getSqlTable(), $this->getPkField(), $this->getPkValue());
        return true;
      }        
    }
  }
  /**
   * Authenticate record (on updates and when used as select criteria)
   * Override if necessary to extend checks 
   * @throws SecurityException
   */
  public function authenticate() {
    if (isset($this->_authenticated))
      return;
    $this->authenticatePk();
    if ($this->hasUserGroupId()) 
      if (isset($this->userGroupId)) 
        LoginDao::authenticateUserGroupId($this->userGroupId);
      else 
        throw new SecurityException('User group ID required in ' . $this->getMyName());
    if ($this->hasClientId())
      if (isset($this->clientId))
        LoginDao::authenticateClientId($this->clientId);
      else 
        throw new SecurityException('Client ID required in ' . $this->getMyName());
  }
  private function _validate() {
    $rv = RecValidator::from($this);
    $this->validate($rv);
    $rv->validate();
  }
  /**
   * Override to provide validation
   * @param RecordValidator $rv 
   * @throws RecValidatorException
   */
  protected function validate(&$rv) {
    // e.g. $rv->requires('name');
  }
  /**
   * Persist record to database
   * @param int $ugid (optional)
   * @param int $mode SaveModes::X (optional, omit to let method determine insert/update based on PK)
   * @return SqlRec this record fetched after update (if auditing) 
   * @throws ReadOnlySaveException, SecurityException
   */
  public function save($ugid = null, $mode = null) {
    if ($this instanceof ReadOnly) 
      throw new ReadOnlySaveException($this);
    if ($ugid) 
      $this->userGroupId = $ugid;
    if ($mode != SaveModes::UPDATE_NO_VALIDATE)
      $this->_validate();
    if (isset($this->dateUpdated))
      $this->dateUpdated = nowNoQuotes();
    $this->authenticate();
    if ($mode == null) 
      if ($this instanceof CompositePk) 
        $mode = SaveModes::INSERT_ON_DUPE_UPDATE;
      else  
        $mode = ($this->getPkValue() == null) ? SaveModes::INSERT : SaveModes::UPDATE;
    switch ($mode) {
      case SaveModes::INSERT:  
        $sql = $this->getSqlInsert();
        $id = Dao::insert($sql);
        $this->setPkValue($id);
        break;
      case SaveModes::UPDATE:
      case SaveModes::UPDATE_NO_VALIDATE:
        if ($this->shouldAudit()) 
          $before = new AuditImage($this);
        $sql = $this->getSqlUpdate();
        Dao::query($sql);
        break;
      case SaveModes::INSERT_ON_DUPE_UPDATE:
        if ($this->shouldAudit()) 
          $before = new AuditImage($this);
        $sql = $this->getSqlInsertOnDupeUpdate();
        $mode = Dao::update($sql);
        break;
    }
    if ($this->shouldAudit()) {
      switch ($mode) {
        case SaveModes::INSERT:
          $rec = Auditing::logCreateRec($this);
          break;
        case SaveModes::UPDATE:
        case SaveModes::UPDATE_NO_VALIDATE:
          $rec = Auditing::logUpdateRec($this, $before);
          break;
        case SaveModes::INSERT_ON_DUPE_UPDATE:
          $rec = Auditing::logDupeUpdateRec($this, $before);
          break;
      }
      return $rec;
    }
  }
  public function saveAsInsert($ugid = null) {
    $this->save($ugid, SaveModes::INSERT);
  }
  public function saveAsUpdate($ugid = null) {
    $this->save($ugid, SaveModes::UPDATE);
  }
  public function saveAsInsertOnDupeUpdate($ugid = null) {
    $this->save($ugid, SaveModes::INSERT_ON_DUPE_UPDATE);
  } 
  public function saveAsUpdateNoValidate($ugid = null) {
    $this->save($ugid, SaveModes::UPDATE_NO_VALIDATE);
  }
  protected function shouldAudit() {
    return ! ($this instanceof NoAudit || isset($this->_noAudit));
  }
  /**
   * @return string value of record PK for auditing
   * Must be overridden for CompositePk recs,  e.g. return "$this->clientId,$this->seq"; 
   */
  public function getAuditRecId() {
    if ($this instanceof CompositePk) 
      throw new SqlRecException($this, 'Override required for ' . $this->getMyName() . '->getAuditRecId');
    else
      return $this->getPkValue();
  }
  /**
   * @return string name of record for Auditing
   */
  public function getAuditRecName() {
    return $this->getMyName();
  }
  /**
   * @return string value of client ID for auditing, can be overridden 
   */
  public function getAuditClientId() {
    return get($this, 'clientId');
  }
  /**
   * @return string for saving audit label (if overridden)
   */
  public function getAuditLabel() {
    return null;
  }
  /**
   * @return SqlRec for auditing before/after image
   * Must be overridden for CompositePk recs, e.g. return self::fetchByClientSeq($this->clientId, $this->seq)
   */
  public function fetchForAudit() {
    if ($this instanceof CompositePk)
      throw new SqlRecException($this, 'Override required for ' . $this->getMyName() . '->fetchForAudit');
    else
      return self::fetch($this->getPkValue(), $this->getMyName());
  }
  /**
   * @return array(fid=>value,..) excluding any fields to omit from incremental change, e.g. dateUpdated
   */
  public function getAuditFields() {
    $fields = $this->getSqlFidValues();
    return $fields;
  } 
  /**
   * @param mixed $value
   */
  public function setPkValue($value) {
    if (! $this instanceOf CompositePk) {
      $fid = $this->getPkFid();
      $this->$fid = $value;
    }
  }
  /**
   * @return string
   */
  public function getPkValue() {
    if ($this instanceof CompositePk) {
      return null;
    } else {
      reset($this);
      $value = current($this);
      if (is_scalar($value))
        return $value;
      if (is_object($value) && get_class($value) == 'CriteriaValue')
        if ($value->comparator == CriteriaValue::EQ) 
          return $value->value;
    }
  }
  //
  protected function setParentage($children, $fid = null) {
    if ($children) {
      $fid = $fid ? $fid : $this->getMyName();
      foreach ($children as $child)
        $child->$fid = $this;
    }
  }
  /**
   * @return string SQL
   */
  public function getSqlInsert() {
    $table = $this->getSqlTable();
    $fields = implode(',', $this->getSqlFields());
    $values = implode(',', $this->getSqlValues());
    $sql = "INSERT INTO $table ($fields) VALUES($values)";
    return $sql;
  }
  /**
   * @return string SQL
   */
  public function getSqlUpdate() {
    $table = $this->getSqlTable();
    $fields = $this->getSqlFields();
    $values = $this->getSqlValues();  
    $pkField = array_shift($fields);
    $pkValue = array_shift($values);
    if ($pkValue == null) 
      throw new SqlRecException($this, 'Cannot update record without PK');
    $values = implode_with_keys(',', array_combine($fields, $values));
    $sql = "UPDATE $table SET $values WHERE $pkField=$pkValue"; 
    return $sql;
  }
  /**
   * @return string SQL
   */
  public function getSqlInsertOnDupeUpdate() {
    $table = $this->getSqlTable();
    $fields = $this->getSqlFields();
    $values = $this->getSqlValues();  
    $ifields = implode(',', $fields);
    $ivalues = implode(',', $values);
    $uvalues = array();
    foreach ($fields as $field) 
      $uvalues[$field] = "VALUES($field)";
    $values = implode_with_keys(',', array_combine($fields, $uvalues));
    $sql = "INSERT INTO $table ($ifields) VALUES($ivalues) ON DUPLICATE KEY UPDATE $values";
    return $sql;
  }
  /**
   * Build SQL DELETE
   * @return string SQL
   */
  public function getSqlDelete() {
    $table = $this->getSqlTable();
    $fields = $this->getSqlFields();
    $values = $this->getSqlValues();  
    $pkField = array_shift($fields);
    $pkValue = array_shift($values);
    if ($pkValue == null) 
      throw new SqlRecException($this, 'Cannot delete record without PK');
    $sql = "DELETE FROM $table WHERE $pkField=$pkValue"; 
    return $sql;
  }
  /**
   * Build SQL SELECT clause using this record as criteria
   * @return array(
   *   'sql'=>'SQL statement',
   *   'cacheKey'=>'table|where')
   * @throws InvalidCriteriaException
   */
  protected function getSqlSelect($recs, $infos, $asCount = false) { 
    if ($infos['where'][0] == null) {
      if ($this->hasUserGroupId())
        $this->throwNoCriteriaException($infos, 0);
      else
        $infos['where'][0] = '1=1';
    }
    $pk = $infos['alias'][0] . '.' . $infos['pk'][0];
    $sorts = array($pk);
    $cts = array();
    ////p_r($recs, 'RECS');
    ////p_r($infos, 'INFOS');
    $parentAlias = $infos['alias'][0];
    $infos['table'][0] .= " $parentAlias";
    for ($i = 1; $i < count($recs); $i++) {
      $fid = $infos['fid'][$i];
      $join = $recs[$fid];
      if ($join) {
        $pfid = $infos['parent'][$i];
        $pix = $infos['pix'][$i];
        if ($pfid == null) {
          $parent = $this;
        } else {
          $parent = $recs[$pfid]->rec;
        }
        $parentAlias = $infos['alias'][$pix];
        $parentPkFid = $parent->getPkFid();
        $parentPk = $infos['pk'][$pix];
        $parentFkFid = $fid;
        $table = $infos['table'][$i];
        $alias = $infos['alias'][$i];
        $childPk = $infos['pk'][$i];
        $where = $infos['where'][$i];
        $join->calcSql($parent, $parentAlias, $parentPk, $parentPkFid, $parentFkFid, $table, $alias, $childPk, $where, $cts);
        $infos['table'][$i] = $join->sql;
        $infos['where'][$i] = $join->where;
        $sorts[] = "$alias.$childPk";
      }
    }
    $fields = ($asCount) ? 'COUNT(*)' : implode(', ', array_filter($infos['fields']));
    $table = self::implodeTables($infos);
    $where = implode(' AND ', array_filter($infos['where']));
    $sql = "SELECT $fields FROM $table WHERE $where";
    if (! empty($cts)) 
      $sql .= " GROUP BY $pk HAVING " . implode(' AND ', $cts);
    if (count($recs) > 1 && ! $asCount)
      $sql .= " ORDER BY " . implode(', ', $sorts);
    $cacheKey = "$table|$where";
    return array(
      'sql' => $sql,
      'cacheKey' => $cacheKey);
  }
  private function implodeTables($infos) {  
    $tables = array_filter($infos['table']);
    $sql = array_shift($tables);
    //sort($tables); used to sort left joins to top
    return $sql . implode('', $tables);
  }
  /**
   * Build SQL WHERE clause using this record as criteria
   * @param(opt) string $tableAlias 
   * @return string 'field_name=field_value AND..'
   */
  protected function getSqlWhere($tableAlias = null) {
    $fields = $this->getSqlFields();
    if ($tableAlias == null) 
      $tableAlias = $this->getSqlTable();
    $values = array();
    $lfid = $this->getLastFid();
    foreach ($this as $fid => &$value) {
      if ($value !== null) {
        if (is_scalar($value)) 
          $value = CriteriaValue::equals($value);
        $field = $tableAlias . '.' . current($fields);
        $values[$field] = $value;
      }
      if ($fid == $lfid)
        break;
      next($fields);        
    }
    $values = count($values) ? CriteriaValue::_toSql($values) : null;
    return $values;
  }
  /**
   * @return array(fid=>sql_field,..)
   */
  protected function getSqlFields() {
    static $fields;
    if ($fields === null) {  
      $fields = array();
      $fids = $this->getSqlFids();
      foreach ($fids as $fid) 
        $fields[$fid] = self::camelToSql($fid);
    }
    return $fields;
  }
  /**
   * @return array(fid,..) 
   */
  protected function getSqlFids() {
    static $sfids;
    if ($sfids === null) {
      $sfids = array();
      $fids = $this->getFids();
      $lfid = $this->getLastFid();
      foreach ($fids as $fid) {
        $sfids[] = $fid;
        if ($fid == $lfid)
          break;
      }
    }
    return $sfids;
  }
  /**
   * @return array(fid=>value,..) 
   */
  protected function getSqlFidValues() {
    $fids = $this->getSqlFids();
    $fvs = array();
    foreach ($fids as $fid) 
      $fvs[$fid] = $this->$fid;
    return $fvs;
  }
  /**
   * @return string of last column fid
   */
  protected function getLastFid() {
    static $lfid;
    if ($lfid === null) {
      foreach ($this->getFids() as $fid) {  
        if (! self::isTableFid($fid))
          return $lfid;
        $lfid = $fid;
      }
    }
    return $lfid;
  }
  public function hasUserGroupId() {
    static $hasUgid;
    if ($hasUgid === null) 
      $hasUgid = array_key_exists('userGroupId', $this);
    return $hasUgid;
  } 
  protected function hasClientId() {  // has clientId as a FK
    if ($this->getPkFid() == 'clientId')
      return false;
    static $hasCid;
    if ($hasCid === null) 
      $hasCid = array_key_exists('clientId', $this); 
    return $hasCid;
  } 
  /**
   * @return int
   */
  protected function getSqlFieldCt() {
    static $ct;
    if ($ct === null) 
      $ct = count($this->getSqlFields());
    return $ct;
  }
  /**
   * @return string 'sql_field'
   */
  protected function getPkField() {
    static $field;
    if ($field === null) {
      if ($this instanceOf CompositePk) { 
        $field = null;
      } else {
        reset($this);
        $fid = key($this);
        $field = self::camelToSql($fid);
      }
    }
    return $field;
  }
  /**
   * @return string 'sqlField'
   */
  protected function getPkFid() {
    static $fid;
    if ($fid === null) {
      if ($this instanceOf CompositePk) { 
        $fid = null;
      } else {
        reset($this);
        $fid = key($this);
      }
    }
    return $fid;
  }
  protected function getSqlValue($fid) {
    $value = $this->$fid;
    if (is_bool($value))
      return ($value) ? 1 : 0;
    else 
      return quote($value, true);
  }
  protected function getSqlValues() {
    $values = array();
    $lfid = $this->getLastFid();
    foreach ($this as $fid => &$value) {
      $values[] = $this->getSqlValue($fid);
      if ($fid == $lfid)
        break;
    }
    return $values;
  }
  protected function buildSqlSelectFields($recFid, $tableAlias) {  // $recFid passed for record 'child' fids of criteria, e.g. 'ScanFiles'
    $fields = $this->getSqlFields();
    $class = $this->getMyName();
    $class .= ".$tableAlias";
    if ($recFid) 
      $class .= ".$recFid";
    foreach ($this as $fid => &$value) {
      $field = geta($fields, $fid);
      if ($field) 
        $fields[$fid] = "$tableAlias.$field AS `$class.$fid`"; 
    }
    $fields = implode(', ', $fields);
    return $fields;
  }
  /**
   * @return array(  
   *   'recs'=>array(fid=>Rec,fid=>CriteriaJoin,..) // first element is self, rest are joins
   *   'ct'=>#)
   */
  public function getRecsFromCriteria($parentFid = null, &$recs = null, $parentIx = 0) {
    $arrays = array();
    if ($recs == null) 
      $recs = array($this->getMyName() => $this);
    foreach ($this as $fid => $value) {
      if (is_array($value))
        $value = new CriteriaJoin(current($value), CriteriaJoin::JOIN_TBD, CriteriaJoin::AS_ARRAY);
      else if ($value instanceof SqlRec)
        $value = new CriteriaJoin($value, CriteriaJoin::JOIN_TBD);
      if ($value instanceof CriteriaJoin) {
        $value->joinsIx = $parentIx;
        $value->joinsTo = $parentFid;
        $f = ($parentFid) ? $parentFid . '.' . $fid : $fid;
        $recs[$f] = $value;
        $value->rec->getRecsFromCriteria($f, $recs, count($recs) - 1);
      }
    }
    ////p_r($recs, 'RESULT');
    return array(
      'recs' => $recs,
      'ct' => count($recs));
  }
  /**
   * Fetch by primary key
   * @param int $id auto-inc PK value
   * @param string $class 'SomeRec'  
   * @return Rec  
   */
  static function fetch($id, $class) {
//    if ($class == null)
//      $class = get_called_class();
    $rec = new $class($id);
    return self::fetchOneBy($rec, 1);
  }
  /**
   * Fetch records using supplied record as criteria
   * @param SqlRec $criteria
   * @param(opt) RecSort $order
   * @param(opt) int $limit 0=no limit
   * @param(opt) string $keyFid to return array(keyValue=>Rec,..)  
   * @return array(Rec,..)
   */
  static function fetchAllBy($criteria, $order = null, $limit = 500, $keyFid = null) {
    $criteria->authenticateAsCriteria();
    $class = $criteria->getMyName();
    $ci = $criteria->getRecsFromCriteria();
    $infos = self::buildSqlSelectInfos($ci);
    $select = $criteria->getSqlSelect($ci['recs'], $infos);
    $sql = $select['sql'];
    if ($limit > 0) 
      $sql .= " LIMIT $limit";
//    $cacheKey = $select['cacheKey'];
//    if (isset(self::$cache[$cacheKey])) {
//      $recs = self::$cache[$cacheKey];
//    } else { 
    $recs = array();
    $rows = Dao::fetchRows($sql);
    if ($ci['ct'] > 1) 
      $rows = self::unflattenRows($rows, $infos, $ci['ct'], $criteria);
    foreach ($rows as &$row) { 
      $rec = new $class($row);
      if ($keyFid)
        $recs[$rec->$keyFid] = $rec;
      else
        $recs[] = $rec;
    }
    if ($order)
      Rec::sort($recs, $order, ($keyFid != null));
    return $recs;
  }
  /**
   * Fetch and associate by key
   * @param SqlRec $criteria
   * @param string $keyFid;
   * @return array(keyValue=>Rec,..)
   */
  static function fetchMapBy($criteria, $keyFid, $limit = 0) {
    return self::fetchAllBy($criteria, null, $limit, $keyFid);
  }
  /**
   * Return first result of self::fetchAllBy($rec)  
   * @param SqlRec $criteria
   * @param int $limit use 1 only if query does not contain any joins, e.g. fetch()
   * @return Rec
   */
  static function fetchOneBy($criteria, $limit = 500) {
    return current(self::fetchAllBy($criteria, null, $limit));
  }
  /**
   * Fetch count(*) using supplied record as criteria
   * @param SqlRec $criteria
   */
  static function count($criteria) {
    $criteria->authenticateAsCriteria();
    $ci = $criteria->getRecsFromCriteria();
    $infos = self::buildSqlSelectInfos($ci);
    $select = $criteria->getSqlSelect($ci['recs'], $infos, true);
    $sql = $select['sql'];
    return Dao::fetchValue($sql);
  }
  /**
   * Delete record from database
   * @param SqlRec $rec 
   * @throws ReadOnlyDeleteException, SecurityException
   */
  static function delete(&$rec) {
    if ($rec instanceof ReadOnly) 
      throw new ReadOnlyDeleteException($rec);
    $rec->authenticate();
    if ($rec->shouldAudit())
      Auditing::logDeleteRec($rec, new AuditImage($rec));
    Dao::query($rec->getSqlDelete());
    $rec = null;
  }
  /**
   * Save all recs in collection
   * @param SqlRec[] $recs
   */
  static function saveAll($recs) {
    if ($recs)
      foreach ($recs as $rec)
        $rec->save();
  }
  /**
   * @abstract
   * @param stdClass $rec
   */
//  static function decorateAudit(&$rec) {
//  }
  //
  protected static function buildSqlSelectInfos($ci) {
    $recs = $ci['recs'];
    $infos = array();
    $fix = 0;
    $ix = 0;
    foreach ($recs as $fid => $rec) {
      $info = self::buildSqlSelectInfo($ix, $fid, $rec);
      push($infos, 'alias', $info['alias']);
      push($infos, 'fields', $info['fields']);
      push($infos, 'fct', $info['fct']);
      push($infos, 'table', $info['table']);
      push($infos, 'pk', $info['pk']);
      push($infos, 'where', $info['where']);
      push($infos, 'fix', $fix);
      push($infos, 'array', $info['array']);
      push($infos, 'fid', $fid);
      push($infos, 'parent', $info['parent']);
      push($infos, 'pix', $info['pix']);
      if ($info['array'])
        $infos['anyArray'] = true;
      $fix += $info['fct'];
      $ix++;
    }
    return $infos;
  }
  protected static function buildSqlSelectInfo($ix, $fid, $rec) {
    if ($rec == null) 
      return array(
        'fields' => null,
        'fct' => 0,
        'table' => null,
        'alias' => null,
        'pk' => null,
        'where' => null,
        'array' => null,
        'parent' => null,
        'pix' => null);
    $tableAlias = "T$ix";
    if ($ix == 0) {
      $recFid = null;
      $isArray = false;
      $where = $rec->getSqlWhere($tableAlias);
      $parent = null;
      $pix = null;
    } else {
      $recFid = $fid;
      $join = $rec;
      $parent = $join->joinsTo;
      $pix = $join->joinsIx;
      $rec = $join->rec;
      $isArray = $join->as;
      if ($join->recs) 
        $where = self::getSqlWheres($tableAlias, $join, $rec);
      else 
        $where = $rec->getSqlWhere($tableAlias);
    }
    return array(
      'fields' => $rec->buildSqlSelectFields($fid, $tableAlias),
      'fct' => $rec->getSqlFieldCt(),
      'table' => $rec->getSqlTable(),
      'alias' => $tableAlias,
      'pk' => $rec->getPkField(),
      'where' => $where,
      'array' => $isArray,
      'parent' => $parent,
      'pix' => $pix);
  }
  protected static function getSqlWheres($tableAlias, $join, $rec0) {
    $a = array();
    foreach ($join->recs as $rec) {
      if (! $rec instanceof SqlRec) 
        throw new SqlRecException($rec0, 'Non-SqlRec used inside CriteriaJoin array');
      $a[] = $rec->getSqlWhere($tableAlias);
    } 
    return '((' . implode(') OR (', $a) . '))';
  } 
  protected static function unflattenRows($rows, $infos, $recCt, $rec) {
    //logit_r($rows, 'rows');
    //logit_r($infos, 'infos');
    //logit_r($recCt, 'recCt');
    $urows = array();
    $urow = null;
    $lastPk = null;
    $anyArray = isset($infos['anyArray']);
    foreach ($rows as &$row) {
      if (current($row) == $lastPk) {
        if ($anyArray) 
          $overlay = true;
        else
          throw new SqlRecException($rec, 'Multiple records returned from join, pk=' . $lastPk); 
      } else {
        if ($urow) 
          $urows[] = $urow;
        $overlay = false;
        $urow = array_slice($row, 0, $infos['fct'][0], true);
      }
      //logit_r($urow, 'urow');
      for ($i = 1; $i < $recCt; $i++) {
        $key = $infos['fid'][$i];
        //logit_r($key, 'key');
        $reca = self::nullIfEmpty(array_slice($row, $infos['fix'][$i], $infos['fct'][$i]));
        //logit_r($reca, 'reca');
        $pka = ($reca) ? current($reca) : null;
        if (strpos($key, '.') !== false) {  // e.g. 'Join0.Ipc'
          $jfids = explode('.', $key);
          //logit_r($jfids, 'jfids');
          $uu =& $urow;
          for ($j = 0, $k = count($jfids) - 1; $j < $k; $j++) {
            $jfid = $jfids[$j];
            $uu =& $uu[$jfid];
            $lk = array_pop(array_keys($uu));  
            if (is_int($lk))  // if an array, step into last element 
              $uu =& $uu[$lk];
          }
          $key = $jfids[$j];
          if ($infos['array'][$i] && $pka)  
            $uu[$key][$pka] = $reca;
          else  
            $uu[$key] = $reca;
          //logit_r($uu, 'uu');
        } else if ($overlay) {  // use last row to append this child array instance
          if ($infos['array'][$i] && $pka) {  
            $urow[$key][$pka] = $reca;
          }
        } else {
          if ($infos['array'][$i] && $pka)  
            $urow[$key][$pka] = $reca;
          else  
            $urow[$key] = $reca;
        }
        //($urow, 'urow for iteration ' . $i);
      }
      //logit_r($urow, 'done with loop, urow');
      $lastPk = current($row);
    }
    if ($urow)
      $urows[] = $urow;
    //logit_r($urows, 'urows');
    return $urows;     
  }
  protected static function nullIfEmpty($a) {
    return (current($a) == null) ? null : $a;  // assumes first column of child row should always be populated
  }
  public static function camelToSql($str) {
    $str[0] = strtolower($str[0]);
    $func = create_function('$c', 'return "_" . strtolower($c[1]);');
    $field = preg_replace_callback('/([A-Z])/', $func, $str);
    return "`$field`";
  }
  public static function sqlToCamel($str, $capitalizeFirstChar = false) {
    if (substr($str, 0, 1) == '`') 
      $str = substr($str, 1, -1);
    if ($capitalizeFirstChar) 
      $str[0] = strtoupper($str[0]);
    $func = create_function('$c', 'return strtoupper($c[1]);');
    return preg_replace_callback('/_([a-z])/', $func, $str);
  }
  protected static function getClassFromSqlField($field) {
    $a = explode('.', $field);
    return $a[0];
  }
  protected static function isTableFid($fid) {
    $c = substr($fid, 0, 1);
    return ! ($c == '_' || self::isUpper($c));
  }
  protected static function isUpper($c) {
    return ($c == strtoupper($c)); 
  }
}
class SaveModes {
  const INSERT = 1;
  const UPDATE = 2;
  const INSERT_ON_DUPE_UPDATE = 3;
  const UPDATE_NO_VALIDATE = 4; 
}
/**
 * Criteria Value 
 * To extend functionality of criteria record value beyond simple = comparison 
 */
class CriteriaValue {
  //
  public $comparator;
  public $value;
  //
  // Comparators
  const EQ = 'eq';
  const NEQ = 'neq';
  const LT = 'lt';
  const LTE = 'lte';
  const GT = 'gt';
  const GTE = 'gte';
  const LTN = 'ltn';
  const LTEN = 'lten';
  const GTN = 'gtn';
  const GTEN = 'gten';
  const SW = 'sw';
  const CW = 'cw';
  const NUL = 'nul';
  const NNUL = 'nnul';
  const IN = 'in';
  const DTEQ = 'dteq';
  const REX = 'rex';
  const NREX = 'nrex';
  //
  public function __construct($comparator, $value = null) {
    $this->comparator = $comparator;
    $this->value = $value;
  } 
  public function _toString($fid) {
    if ($this->comparator == self::IN)
      $value = array_map('addslashes', $this->value);
    else
      $value = addslashes($this->value);
    switch ($this->comparator) {
      case self::EQ:
        return "$fid='$value'";
      case self::NEQ:
        return "$fid<>'$value'";
      case self::LT:
        return "$fid<'$value'";
      case self::LTE:
        return "$fid<='$value'";
      case self::GT:
        return "$fid>'$value'";
      case self::GTE:
        return "$fid>='$value'";
      case self::LTN:
        return "$fid<$value";
      case self::LTEN:
        return "$fid<=$value";
      case self::GTN:
        return "$fid>$value";
      case self::GTEN:
        return "$fid>=$value";
      case self::SW:
        return "$fid LIKE '$value%'";
      case self::CW:
        return "$fid LIKE '%$value%'";
      case self::NUL:
        return "$fid IS NULL";
      case self::NNUL:
        return "$fid IS NOT NULL";
      case self::IN:
        return "$fid IN ('" . implode("','", $value) . "')";
      case self::DTEQ:
        return "SUBSTR($fid,1,10)='$value'";
      case self::REX:
        return stripslashes("$fid REGEXP $value");
      case self::NREX:
        return stripslashes("$fid NOT REGEXP $value");
    }
  }
  /**
   * Static builders
   */
  static function equals($value) {
    return new self(self::EQ, $value);
  }
  static function notEquals($value) {
    return new self(self::NEQ, $value);
  }
  static function lessThan($value) {
    return new self(self::LT, $value);
  }
  static function lessThanOrEquals($value) {
    return new self(self::LTE, $value);
  }
  static function greaterThan($value) {
    return new self(self::GT, $value);
  }
  static function greaterThanOrEquals($value) {
    return new self(self::GTE, $value);
  }
  static function lessThanNumeric($value) {
    return new self(self::LTN, $value);
  }
  static function lessThanOrEqualsNumeric($value) {
    return new self(self::LTEN, $value);
  }
  static function greaterThanNumeric($value) {
    return new self(self::GTN, $value);
  }
  static function greaterThanOrEqualsNumeric($value) {
    return new self(self::GTEN, $value);
  }
  static function startsWith($value) {
    return new self(self::SW, $value);
  }
  static function contains($value) {
    return new self(self::CW, $value);
  }
  static function isNull() {
    return new self(self::NUL);
  }
  static function isNotNull() {
    return new self(self::NNUL);
  }
  static function in($values) {  // ['value',..]
    return new self(self::IN, $values);
  }
  static function datePortionEquals($value) {
    return new self(self::DTEQ, $value);
  }
  static function regexp($value) {
    return new self(self::REX, $value);
  }
  static function notRegexp($value) {
    return new self(self::NREX, $value);
  }
  static function betweenNumeric($values) {
    $from = $values[0];
    $to = $values[1];
    if ($from !== null && $to !== null) 
      return CriteriaValues::_and(self::greaterThanOrEqualsNumeric($from), self::lessThanNumeric($to));
    else if ($from !== null) 
      return self::greaterThanOrEqualsNumeric($from);
    else
      return self::lessThanNumeric($to);
  }
  static function betweenAge($values) {
    $from = self::calcDate($values[0]);
    $to = self::calcDate($values[1]);
    if ($from !== null && $to !== null) 
      return CriteriaValues::_and(self::lessThanOrEquals($from), self::greaterThan($to));
    else if ($from !== null) 
      return self::lessThanOrEquals($from);
    else
      return self::greaterThan($to);
  }
  static function olderThan($years) {
    return self::betweenAge(array(intval($years) + 1, null));
  }
  //
  static function _toSql($values) {
    $conds = array();
    foreach ($values as $fid => &$value)
      $conds[] = $value->_toString($fid);
    return implode(' AND ', $conds);
  }
  static function calcDate($age) {
    return ($age) ? pastDate(intval($age)) : null;
  } 
}
/*
 * e.g. CriteriaValues::_and(CriteriaValue::greaterThan('V'), criteriaValue::lessThan('W'))
 *      CriteriaValues::_and($rec->field, CriteriaValue::equals('A')) appends value to existing criteria value
 */
class CriteriaValues {
  //
  public $conj;
  public $values;
  //
  public function append($values) {
    $this->values = array_merge($this->values, $values);
    return $this;
  }
  public function __construct($conj, $values) {
    $this->conj = $conj;
    $this->values = $values;
  }
  public function _toString($fid) {
    $conds = array();
    foreach ($this->values as $value) 
      $conds[] = $value->_toString($fid);
    return '(' . implode($this->conj, $conds) . ')';
  }
  /**
   * @params CriteriaValue,..
   */
  static function _and() {
    $f = func_get_args();
    return self::create(' AND ', $f);
  }
  static function _or() {
    $f = func_get_args();
    return self::create(' OR ', $f);
  }
  private static function create($conj, $values) {
    if (current($values) instanceof CriteriaValue)  
      return new self($conj, $values);
    $value = array_shift($values);
    if ($value instanceof CriteriaValues) 
      return $value->append($values);
    if (count($values) > 1) 
      return new self($conj, array_shift($values));
    else 
      return current($values);
  }
}
/**
 * Criteria Join
 * To describe join relationship when assigning constituent rec properties 
 */
class CriteriaJoin {
  //
  public $rec;   // criteria to join
  public $join;  // inner, left, left-is-null
  public $as;    // one or array
  public $fid;   // fk fid
  public $ct;    // required count
  public $op;    // count op equals, lt, gt
  //
  public $recs;
  //
  const JOIN_TBD = null;  // to be determined (implied join thru Rec assignment to criteria value)
  const JOIN_INNER = 1;
  const JOIN_LEFT = 2;
  const JOIN_LEFT_IS_NULL = 3;
  //
  const AS_ONE = null;
  const AS_ARRAY = true;
  //
  const OP_EQ = '=';
  const OP_LT = '<';
  const OP_GT = '>';
  //
  public function __construct($rec, $join, $as = null, $fid = null, $asArray = null, $ct = null, $op = null) {
    $this->rec = $rec;
    $this->join = $join;
    $this->as = $as;
    $this->fid = $fid;
    if ($asArray) {
      if (! is_array($rec)) 
        throw new SqlRecException($rec, 'Non-array used as CriteriaJoin array'); 
      $this->recs = $rec;
      $this->rec = current($rec); 
    }
    if ($ct) {
      $this->ct = $ct;
      $this->op = $op;
    }
  }
  //
  /**
   * @param SqlRec $parent
   * @param string $parentAlias 'T0'
   * @param string $parentPk 'track_item_id'
   * @param string $parentPkFid 'trackItemId'
   * @param string $parentFkFid 'User_orderBy'
   * @param string $table 'users'
   * @param string $alias 'T1'
   * @param string $childPk 'user_id' 
   * @param string $where 'T1.`active`=1' (may be null)
   * @param array $cts to accumulate "GROUP BY .. HAVING" counts
   * Sets $this->sql and $this->where (modified where)
   */
  public function calcSql($parent, $parentAlias, $parentPk, $parentPkFid, $parentFkFid, $table, $alias, $childPk, $where, &$cts) {
    $on = null;
    $overFid = ($this->fid) ? $this->fid : self::getOverrideFid($parentFkFid);
    $over = ($overFid) ? SqlRec::camelToSql($overFid) : null;
    $fk = ($over) ? $over : $childPk;
    $fkFid = ($overFid) ? $overFid : SqlRec::sqlToCamel($fk);
    if (property_exists($parent, $fkFid)) {  // parent.childId exists
      $on = "$parentAlias.$fk=$alias.$childPk";
      if ($this->join == self::JOIN_TBD) 
        $this->join = self::JOIN_LEFT;
    } else {
        $pk = ($over) ? $over : $parentPk;
        $pkFid = ($overFid) ? $overFid : $parentPkFid; 
        if (property_exists($this->rec, $pkFid)) { // child.parentId exists
        $on = "$parentAlias.$parentPk=$alias.$pk";
        if ($this->join == self::JOIN_TBD) 
          $this->join = self::JOIN_LEFT;
      } else {
        if ($where == null)
          throw new InvalidCriteriaException($this->rec, 'No criteria specified for ' . $table);
        $on = $where;
        $where = null;
        if ($this->join == self::JOIN_TBD) 
          $this->join = self::JOIN_INNER;
      }
    }
    $on = self::appendCond($on, $where);
    $this->sql = " " . $this->_getJoinSql() .  " $table $alias ON $on";
    $this->where = ($this->join == self::JOIN_LEFT_IS_NULL) ? "$alias.$childPk IS NULL" : "";
    if ($this->op) 
      $cts[] = "COUNT(DISTINCT $alias.$childPk)" . $this->op . $this->ct;
  }
  protected function _getJoinSql() {
    switch ($this->join) {
      case self::JOIN_INNER:
        return 'JOIN';
      case self::JOIN_LEFT:
      case self::JOIN_LEFT_IS_NULL:
        return 'LEFT JOIN';
    }
  }
  //
  static function optional($rec, $fid = null) {
    return new self($rec, self::JOIN_LEFT, self::AS_ONE, $fid);
  }
  static function optionalAsArray($rec, $fid = null) {
    return new self($rec, self::JOIN_LEFT, self::AS_ARRAY, $fid);
  }
  static function requires($rec, $fid = null) {
    return new self($rec, self::JOIN_INNER, self::AS_ONE, $fid);
  }
  static function requiresAsArray($rec, $fid = null) {
    return new self($rec, self::JOIN_INNER, self::AS_ARRAY, $fid);
  }
  static function requiresCountEquals($rec, $ct, $fid = null) {
    return new self($rec, self::JOIN_INNER, self::AS_ARRAY, $fid, false, $ct, self::OP_EQ);
  }
  static function requiresCountGreaterThan($rec, $ct, $fid = null) {
    return new self($rec, self::JOIN_INNER, self::AS_ARRAY, $fid, false, $ct, self::OP_GT);
  }
  static function requiresCountLessThan($rec, $ct, $fid = null) {
    return new self($rec, self::JOIN_INNER, self::AS_ARRAY, $fid, false, $ct, self::OP_LT);
  }
  static function notExists($rec, $fid = null) {
    return new self($rec, self::JOIN_LEFT_IS_NULL, null, $fid);
  }
  static function requiresAnyOf($recs, $fid = null) {
    return new self($recs, self::JOIN_INNER, self::AS_ARRAY, $fid, true);
  }
  static function optionalAnyOf($recs, $fid = null) {
    return new self($recs, self::JOIN_LEFT, self::AS_ARRAY, $fid, true);
  }
  static function requiresOneOf($recs, $fid = null) {
    return new self($recs, self::JOIN_INNER, self::AS_ONE, $fid, true);
  }
  //
  private static function appendCond($cond, $where) {
    return ($where) ? "$where AND $cond" : $cond;
  }
  private static function getOverrideFid($parentFkFid) {  // 'order_by from $User_orderBy'
    $a = explode('_', $parentFkFid);
    if (count($a) > 1) 
      return $a[1];  
  }
}
/**
 * Exceptions
 */
class SqlRecException extends Exception {
  public /*SqlRec*/ $rec;
  public function __construct($rec, $message) {
    $this->rec = $rec;
    $name = ($rec) ? $rec->getMyName() : '[null]';
    $this->message = "$name: $message";
  }
}
class ReadOnlySaveException extends SqlRecException {
  public function __construct($rec) {
    parent::__construct($rec, 'Cannot save read-only record');
  }
}
class ReadOnlyDeleteException extends SqlRecException {
  public function __construct($rec) {
    parent::__construct($rec, 'Cannot delete read-only record');
  }
}
class InvalidCriteriaException extends SqlRecException {
  public function __construct($criteria, $message) {
    parent::__construct($criteria, $message);
  }
}
/**
 * Temporary "static call" fn until upgrade to PHP 5.3
 * Usage: sc(get_class($rec), 'asActiveCriteria', $rec->clientId);
 */
function sc() {
  $args = func_get_args();
  $class = array_shift($args);
  $fn = array_shift($args);
  return call_user_func_array(array($class, $fn), $args);
}
require_once 'php/data/rec/sql/Auditing.php';
?>