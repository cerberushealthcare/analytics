<?php
//
require_once 'php/data/rec/sql/_ProcRec.php';
require_once 'php/data/rec/sql/IProcCodes.php';
/**
 * Procedures DAO
 * @author Warren Hornsby
 */
class Procedures {
  //
  /**
   * @param int $cid
   * @return array(Proc+ProcResults,..)
   */
  static function getAll($cid) {
    self::migrate($cid);
    $recs = Proc::fetchAll($cid);
    $recs = Proc::summarizeResults($recs);
    if ($recs)
      Rec::sort($recs, new RecSort('-date', 'procId'));
    return $recs;
  }
  /**
   * @param int $cid
   * @return array(Proc+ProcResults,..)
   */
  static function getAllNonAdmin($cid) {
    self::migrate($cid);
    $recs = Proc::fetchAllNonAdmin($cid);
    $recs = Proc::summarizeResults($recs);
    if ($recs)
      Rec::sort($recs, new RecSort('-date', 'Ipc.name'));
    return $recs;
  }
  /**
   * @param int $cid
   * @return array(Proc+ProcResults,..) excluding resultless Procs
   */
  static function getAllDiagnostic($cid) {
    $recs = Proc::fetchAllDiagnostic($cid);
    if ($recs)
      Rec::sort($recs, new RecSort('-date', 'Ipc.name'));
    return $recs;
  }
  /**
   * @param ProcResult result
   * @return array(ProcResult_Hist+Proc_Hist,..) 
   */
  static function getResultHistory($result) {
    $recs = ProcResult_Hist::fetch($result);
    return $recs;
  }
  /**
   * Fetch IN DATA in the form expected for in tables
   */
  static function getInDataHm($cid) {
    $recs = Proc::fetchMostRecentMap($cid);
    $rows = array();
    foreach ($recs as $ipc => $proc) 
      $rows[$ipc] = static::asInDataRow($proc);
    return $rows;
  }
  static function getInDataHmAll($cid) {
    $recs = Proc::fetchAllNonAdmin($cid);
    $rows = array();
    foreach ($recs as $proc) 
      $rows[] = static::asInDataRow($proc);
    logit_r($rows, 'getInDataHmAll');
    return $rows;
  }
  private static function asInDataRow($proc) { 
    $row = array();
    if (isset($proc->Ipc))
      $row['proc'] = $proc->Ipc->name;
    $row['date_text'] = formatLongApproxDate($proc->date);
    $row['data_hm_id'] = $proc->procId;
    if ($proc->ProcResults) 
      $row['results'] = implode(' ', ProcResult::summarizeResults($proc, $proc->ProcResults, false));
    else
      $row['results'] = null;
    return $row;
  }
  /**
   * @param int $procId
   * @return Proc+ProcResults
   */
  static function get($procId) {
    $rec = Proc::fetch($procId);
    $rec->_results = ProcResult::summarizeResults($rec, $rec->ProcResults);
    return $rec;
  }
  /**
   * @param stdClass $obj 
   * @return Proc updated rec
   */
  static function saveProc($obj) {
    global $login;
    require_once 'php/data/rec/sql/OrderEntry.php';
    Dao::begin();
    try {
      $rec = Proc::revive_asProcOnly($obj);
      $rec->save($login->userGroupId);
      $proc = self::get($rec->procId);
      if ($result = ProcResult::revive_asQuickResult($obj, $proc))
        $result->save();
      if (isset($obj->Order))
        OrderEntry::receivedByProc($obj->Order->trackItemId, $proc->procId);
      Dao::commit();
      return $proc;
    } catch (Exception $e) {
      Dao::rollback();
      throw $e;
    } 
  }
  /**
   * @param int $procId
   * @return int ID  
   */
  static function delete($procId) {
    $rec = Proc::fetch($procId);
    if ($rec) {
      Dao::begin();
      try {
        self::deleteResults($rec);
        Proc::delete($rec);
        Dao::commit();
        return $procId;
      } catch (Exception $e) {
        Dao::rollback();
        throw $e;
      }
    }
  }
  /**
   * @param int $procId
   * @param stdClass $obj 
   * @return Proc updated rec
   */
  static function saveResult($procId, $obj) {
    $proc = self::get($procId);
    $rec = ProcResult::revive($obj, $proc);
    $rec->save();
    $rec->Proc = self::get($procId);
    return $rec; 
  }
  /**
   * @param Proc $proc
   */
  static function deleteResults($proc) {
    $recs = ProcResult::fetchAll($proc);
    Dao::begin();
    try {
      foreach ($recs as $rec) 
        ProcResult::delete($rec);
      Dao::commit();
    } catch (Exception $e) {
      Dao::rollback();
      throw $e;
    }
  }
  /**
   * @param int $resultId
   * @return int ID
   */
  static function deleteResult($resultId) {
    $rec = ProcResult::fetch($resultId);
    if ($rec) {
      ProcResult::delete($rec);
      return $resultId;
    }
  }
  /**
   * Migrate from HM and Surgical HX 
   * @param int $cid
   */
  static function migrate($cid) {
    self::migrateHms($cid);
    self::migrateSurgHx($cid);
  }
  //
  private static function migrateHms($cid) {
    $hms = Hm::fetchUnbuiltHistory($cid);
    logit_r($hms, 'unbuilt history for ' . $cid);
    if (! empty($hms)) {
      $procs = Proc::fromHms($hms);
      Dao::begin();
      try {
        Hm::markAsBuilt($cid);
        SqlRec::saveAll($procs);
        Dao::commit();
      } catch (Exception $e) {
        Dao::rollback();
      }
    }
  }
  private static function migrateSurgHx($cid) {
    global $login;
    $surgs = SurgHx::from($cid);
    logit_r($surgs, 'unbuilt surgs');
    if (! empty($surgs)) {
      $procs = Proc::fromSurgHxs($surgs, $login->userGroupId, $cid);
      Dao::begin();
      try {
        SqlRec::saveAll($procs);
        SurgHx::markAsBuilt($cid);
        Dao::commit();
      } catch (Exception $e) {
        Dao::rollback();
      }
    }
  }
}
//
/**
 * Procedure
 */
class Proc extends ProcRec {
  //
  public $procId;
  public $userGroupId;
  public $clientId;
  public $date;  
  public $ipc;
  public $priority;
  public $location;
  public $providerId;
  public $addrFacility;
  public $recipient;
  public $scanIndexId;
  public $userId;
  public $comments;
  public /*Ipc*/ $Ipc;
  public /*ProcResult[]*/ $ProcResults;
  public /*Provider*/ $Provider;
  public /*FacilityAddress*/ $Facility;
  //
  static $FRIENDLY_NAMES = array(
    'ipc' => 'Test/Procedure Name');
  //
  public function getAuditLabel() {
    return ($this->Ipc) ? $this->Ipc->name : $this->ipc;
  }
  public function validate(&$rv) {
    $rv->requires('ipc', 'date');
  }
  public function save($ugid = null) {
    parent::save($ugid);
    if ($this->ProcResults) {
      self::setParentage($this->ProcResults);
      self::saveAll($this->ProcResults);
    }
  }
  public function getJsonFilters() {
    return array(
      'date' => JsonFilter::editableDateApprox(),
      'Provider' => JsonFilter::oneWay(),
      'Facility' => JsonFilter::oneWay());
  }
  public function isPanel() {
    if ($this->ProcResults) {
      if (count($this->ProcResults) > 1)
        return true;
      $result = current($this->ProcResults);
      if ($result->ipc != $this->ipc)
        return true;
    }
  }
  public function formatSummarizeResults() {
    $results = ProcResult::summarizeResults($this, $this->ProcResults);
    return implode(' - ', $results);
  }
  public function getIpcDate() {
    return $this->date . ',' . $this->ipc;
  }
  //
  /*
   * @param int $id
   * @return Proc+ProcResults
   */
  static function fetch($id) {
    $c = self::asCriteria();
    $c->procId = $id;
    $rec = parent::fetchOneBy($c);
    $rec->ProcResults = ProcResult::fetchAll($rec);
    return $rec;
  }
  /**
   * @param int $cid
   * @return array(Proc+ProcResults,..)
   */
  static function fetchAll($cid) {
    $c = self::asCriteria();
    $c->clientId = $cid;
    $c->ProcResults = ProcResult::asOptionalJoin();
    return self::fetchAllBy($c);
  }
  static function fetchAllNonAdmin($cid) {
    $c = new static();
    $c->clientId = $cid;
    $c->Ipc = Ipc::asRequiredJoin_noAdmin();
    $c->Provider = Provider::asOptionalJoin();
    $c->Facility = FacilityAddress::asOptionalJoin();
    $c->ProcResults = ProcResult::asOptionalJoin();
    return self::fetchAllBy($c);
  }
  static function fetchIpcDateMap($cid) {
    $c = new static();
    $c->clientId = $cid;
    $recs = self::fetchAllBy($c);
    $map = array();
    foreach ($recs as $rec) 
      $map[$rec->getIpcDate()] = $rec;
    return $map;
  }
  static function fetchAllDiagnostic($cid) {
    $c = self::asCriteria();
    $c->clientId = $cid;
    $c->ProcResults = ProcResult::asRequiredJoin();
    $recs = self::fetchAllBy($c);
    foreach ($recs as $rec)
      $rec->setParentage($rec->ProcResults);
    return $recs;
  }
  /**
   * @param int $cid
   * @return array(ipc=>Proc,..)
   */
  static function fetchMostRecentMap($cid) {
    $c = new self();
    $c->clientId = $cid;
    $recs = self::fetchAllBy($c, new RecSort('ipc', '-date'));
    $map = array();
    foreach ($recs as $rec) {
      if (! isset($map[$rec->ipc])) {
        $rec->ProcResults = ProcResult::fetchAll($rec);      
        $map[$rec->ipc] = $rec;
      }
    }
    return $map;
  } 
  private static function loadResults(&$recs) {
    foreach ($recs as &$rec) 
      $rec->ProcResults = ProcResult::fetchAll($rec);
     return $recs;
  }
  static function asScanJoin() {
    $c = new static();
    $c->Results = ProcResult::asOptionalJoin();
    return CriteriaJoin::optional($c);
  }
  static function asCriteria($ugid = null) {
    $c = new static();
    $c->Ipc = Ipc::asRequiredJoin($ugid); 
    $c->Provider = Provider::asOptionalJoin();
    $c->Facility = FacilityAddress::asOptionalJoin();
    return $c;
  }
  static function reviveAll($objs) {
    $recs = array();
    foreach ($objs as $obj)
      $recs[] = static::revive($obj);
    return $recs;
  }
  static function revive($obj) {
    $rec = new static($obj);
    if ($rec->ProcResults)
      $rec->ProcResults = ProcResult::reviveAll($rec->ProcResults, $rec);
    return $rec;
  }
  static function revive_asProcOnly($obj) {
    if (isset($obj->ProcResults))
      unset($obj->ProcResults);
    return static::revive($obj, false);
  }
  /**
   * @param Proc[] $recs
   * @return Proc[]  
   */
  static function summarizeResults(&$recs) {
    foreach ($recs as &$rec)  
      if ($rec->ProcResults)
        $rec->_results = ProcResult::summarizeResults($rec, $rec->ProcResults);
    return $recs;
  }
  /**
   * @param Hm[] $hms
   * @return array(Proc+ProcResults,..)
   */
  static function fromHms($hms) {
    $recs = array();
    foreach ($hms as $hm)
      $recs[] = self::fromHm($hm);
    return $recs;
  }
  private static function fromHm($hm) {
    $rec = new self();
    $rec->userGroupId = $hm->userGroupId;
    $rec->clientId = $hm->clientId;
    $rec->date = $hm->getApproxDate();
    //$rec->cat = $hm->getCat();
    $rec->name = $hm->proc; 
    $rec->Ipc = Ipc_MigrateHm::from($hm);
    $rec->ipc = $rec->Ipc->ipc;
    $result = ProcResult::fromHm($hm, $rec->Ipc);
    if ($result)
      $rec->ProcResults = array($result);
    logit_r($rec, 'rec fromHm');
    return $rec;
  }
  /**
   * @param SurgHx[] $surgs
   * @return array(Proc,..)
   */
  static function fromSurgHxs($surgs, $ugid, $cid) {
    $existing = Proc::fetchIpcDateMap($cid);
    logit_r($existing, 'existing');
    $recs = array();
    foreach ($surgs as $surg) {
      $rec = self::fromSurgHx($surg, $ugid, $cid);
      if ($rec && ! isset($existing[$rec->getIpcDate()]))
        $recs[] = $rec;
    }
    return $recs;
  }
  private static function fromSurgHx($surg, $ugid, $cid) {
    if (self::hasData($surg)) { 
      $rec = new self();
      $rec->userGroupId = $ugid;
      $rec->clientId = $cid;
      $rec->date = $surg->getApproxDate();
      $rec->location = $surg->type;
      $rec->comments = $surg->comment;
      $rec->Ipc = Ipc_MigrateSurg::from($surg, $ugid);
      logit_r($rec->Ipc, 'ipc from migratesurg');
      $rec->ipc = $rec->Ipc->ipc;
      logit_r($rec, 'rec fromSurg');
      return $rec;
    }
  }
  private static function hasData($surg) {
    return true;
    //return $surg->date || $surg->type || $surg->comment;
  }
}
/**
 * Result
 */
class ProcResult extends ProcResultRec {
  //
  public $procResultId;
  public $clientId;
  public $procId;
  public $seq;
  public $date;
  public $ipc;
  public $value;
  public $valueUnit;
  public $range;
  public $interpretCode;
  public $comments;
  public /*Ipc*/ $Ipc;
  //
  public /*Proc*/ $Proc;  // parent supplied by UI
  //
  public function getAuditLabel() {
    return ($this->Ipc) ? $this->Ipc->name : $this->ipc;
  }
  public function getJsonFilters() {
    return array(
      'date' => JsonFilter::editableDate());
  }
  public function toJsonObject(&$o) {
    $o->lookup('interpretCode', self::$INTERPRET_CODES);
    $o->_value = $this->getResult();
  }
  public function save() {
    if ($this->procId == null) 
      $this->procId = $this->getFromProc('procId');
    if (is_null($this->seq) && $this->procResultId == null)
      $this->seq = count($this->getFromProc('ProcResults')); 
    if ($this->ipc == null)
      $this->ipc = $this->getFromProc('ipc');
    parent::save();
  }
  public function getResult() {
    $s = array();
    if ($this->value !== null) 
      $s[] = $this->value;
    if ($this->valueUnit) 
      $s[] = $this->valueUnit;
    return implode(' ', $s);
  }
  public function isAlert() {
    switch ($this->interpretCode) {
      case self::IC_ABNORMAL_ALERT:
      case self::IC_HIGH_ALERT:
      case self::IC_LOW_ALERT:
        return true;
    }
  }
  public function getDate() {
    return ($this->date) ? $this->date : isset($this->Proc) ? $this->Proc->date : $this->proc->date;
  }
  protected function getFromProc($fid) {
    if ($this->Proc)
      return $this->Proc->$fid;
    else
      throw new SqlRecException($this, "Parent proc not set, can't get $fid");
  }
  //
  /**
   * @param Proc $proc
   * @return array(ProcResult,..)
   */
  static function fetchAll($proc) {
    $c = self::asCriteria($proc->procId);
    return self::fetchAllBy($c, new RecSort('seq'));
  }
  static function fetch($id) {
    $c = self::asCriteria(null);
    $c->procResultId = $id;
    return self::fetchOneBy($c);
  }
  static function asOptionalJoin() {
    $c = new static();
    $c->Ipc = Ipc::asOptionalJoin();
    return CriteriaJoin::optionalAsArray($c);
  }
  static function asRequiredJoin() {
    $c = new static();
    $c->Ipc = Ipc::asOptionalJoin();
    return CriteriaJoin::requiresAsArray($c);
  }
  static function asCriteria($procId, $ugid = null) {
    $c = new static();
    $c->procId = $procId;
    $c->Ipc = Ipc::asOptionalJoin($ugid);
    return $c;
  }
  static function reviveAll($objs, $proc) {
    $recs = array();
    foreach ($objs as $obj)
      $recs[] = static::revive($obj, $proc);
    return $recs;
  }
  static function revive($obj, $proc) {
    $rec = new static($obj);
    $rec->Proc = $proc;
    //$rec->Ipc = Ipc::fetch($rec->ipc);
    return $rec;
  }
  static function revive_asQuickResult($obj, $proc) {
    if (get($obj, 'value') || get($obj, 'units') || get($obj, 'rcomments') || get($obj, 'interpretCode')) {
      $obj->comments = get($obj, 'rcomments'); 
      return static::revive($obj, $proc);
    }
  }
  /**
   * @param Proc $proc
   * @param ProcResult[] $recs
   * @return array(string,..)
   */
  static function summarizeResults($proc, $recs, $chop = true) {
    $s = array();
    foreach ($recs as $rec) 
      $s[] = self::summarizeResult($proc, $rec, $chop);
    return $s;
  }
  /**
   * @param Proc $proc
   * @param ProcResult $rec
   * @param bool $chop to limit comments size 
   * @return string
   */
  static function summarizeResult($proc, $rec, $chop = true) {
    $s = array();
    if ($rec->Ipc) 
     if ($proc == null || $rec->ipc != $proc->ipc)
        $s[] = $rec->Ipc->name . ": ";
    if ($rec->value)
      $s[] = $rec->getResult();
    if ($rec->interpretCode) 
      $s[] = self::$INTERPRET_CODES[$rec->interpretCode];
    if (count($s) == 0)
      $s[] = $chop && strlen($rec->comments) > 100 ? substr($rec->comments, 0, 100) . '...' : $rec->comments;
    return implode(' ', $s);
  }
  /**
   * @param Hm $hm
   * @return ProcResult
   */
  static function fromHm($hm, $ipc) {
    $results = $hm->getResults();
    if ($results != '') {
      $rec = new self();
      $rec->seq = 0;
      $rec->comments = $results;
      $rec->clientId = $hm->clientId;
      $rec->date = $hm->getApproxDate();
      $rec->ipc = $ipc->ipc;
      $rec->Ipc = $ipc;
      return $rec;
    }
  }
}
class ProcResult_Hist extends ProcResult implements ReadOnly {
  //
  static function fetch($result) {
    $c = new static();
    $c->clientId = $result->clientId;
    $c->ipc = $result->ipc;
    $c->Proc = Proc_Hist::asRequiredJoin();
    $recs = self::fetchAllBy($c, new RecSort('Proc.-date'));
    return $recs;
  }
}
class Proc_Hist extends Proc implements ReadOnly {
  //
  static function asRequiredJoin() {
    $c = new static();
    return CriteriaJoin::requires($c);
  }
}
/**
 * Ipc Ipc_MigrateSurg
 */
class Ipc_MigrateSurg extends Ipc {
  //
  static $S2IPC = array(
    "AAA Repair" => "917653",
    "Endovascular AAA Repair" => "917652",
    "Abdominal Wall Hernia Repair" => "842655",
    "Abdominoplasty" => "842656",
    "Adenoidectomy" => "918245",
    "Aortic Valve Repair" => "842653",
    "Aortic Valve Replacement" => "842654",
    "Aorto-Femoral Bypass Left" => "697593",
    "Aorto-Femoral Bypass Right" => "697594",
    "Appendectomy" => "842658",
    "Atrial Septal Defect Repair" => "842652",
    "Left Axillary Lymph Node Dissection" => "842659",
    "Right Axillary Lymph Node Dissection" => "842660",
    "CT guided biopsy" => "687589",
    "US guided biopsy" => "918964",
    "Breast Augmentation" => "842662",
    "Breast Biopsy Left" => "600016",
    "Breast Biopsy Right" => "600015",
    "Breast Lift" => "600039",
    "Left Breast Lumpectomy" => "842663",
    "Right Breast Lumpectomy" => "842664",
    "Breast Reduction" => "842665",
    "Bronchoscopy" => "918261",
    "CABG 1 vessel" => "842666",
    "CABG 2 vessel" => "842667",
    "CABG 3 vessel" => "842668",
    "CABG 4 vessel" => "842669",
    "CABG 5 vessel" => "842670",
    "Elective Cardioversion" => "917636",
    "Carotid Endarterectomy Left" => "917629",
    "Carotid Endarterectomy Right" => "697598",
    "Carpal Tunnel Surgery" => "842673",
    "Cataract Surgery" => "842674",
    "Cerebreal Aneurysm Clipping" => "842675",
    "Cesarean Section" => "600017",
    "Laparoscopic Cholecystectomy" => "842676",
    "Open Cholecystectomy" => "842677",
    "Cleft Lip Revision" => "842678",
    "Cleft Palate Revision" => "842679",
    "Colectomy" => "842680",
    "Colectomy Partial" => "842681",
    "Dilation and Curettage" => "600018",
    "Cervical Discectomy" => "600023",
    "Lumbar Discectomy" => "600024",
    "Duodenectomy" => "842682",
    "Bilateral Femoral Popliteal Bypass" => "842683",
    "Left Femoral Popliteal Bypass" => "842684",
    "Right Femoral Popliteal Bypass" => "842685",
    "Left Upper Extremity AV Fistula" => "697630",
    "Right Upper Extremity AV Fistula" => "917642",
    "Foam Sclerotherapy" => "697632",
    "Forehead Lift" => "600040",
    "Cervical Fusion" => "600022",
    "Lumbar Fusion" => "600021",
    "Gastrectomy" => "842686",
    "Partial Gastrectomy" => "842731",
    "Gastric Bypass" => "842687",
    "Gastric Lap Banding" => "842688",
    "Hemorrhoidectomy" => "600020",
    "Incisional Hernia Repair" => "842689",
    "Left Inguinal Hernia Repair" => "842690",
    "Right Inguinal Hernia Repair" => "842691",
    "Umbilical Hernia Repair" => "600010",
    "Hiatal Hernia Repair" => "600011",
    "Left Total Hip Replacement" => "842692",
    "Right Total Hip Replacement" => "842693",
    "Total Abdominal Hysterectomy" => "842743",
    "Total Vaginal Hysterectomy" => "842746",
    "Left Knee Arthroscopy" => "842694",
    "Right Knee Arthroscopy" => "842695",
    "Left Total Knee Replacement" => "842696",
    "Right Total Knee Replacement" => "842697",
    "Lumbar Laminectomy" => "842699",
    "Laparscopy Exploratory" => "842700",
    "LASIK Surgery" => "842698",
    "Varicose vein ligation" => "697640",
    "Liposuction" => "600035",
    "Left Upper Lobectomy" => "842702",
    "Left Lower Lobectomy" => "842701",
    "Right Lower Lobectomy" => "842703",
    "Right Middle Lobectomy" => "842704",
    "Right Upper Lobectomy" => "842705",
    "Lysis of Peritoneal Adhesions" => "600025",
    "Mandibular Advancement" => "842708",
    "Left Mastectomy" => "842709",
    "Right Mastectomy" => "842710",
    "Mediastinoscopy" => "842711",
    "Mitral Valve Repair" => "842706",
    "Mitral Valve Replacement" => "842707",
    "Muscle Biopsy" => "699515",
    "Bilateral Myringotomies" => "842712",
    "Left Myringotomy" => "842713",
    "Right Myringotomy" => "842714",
    "Bilateral Nephrectomy" => "842715",
    "Left Nephrectomy" => "842716",
    "Right Nephrectomy" => "842717",
    "Ocular Enucleation" => "842720",
    "Oculoplasty" => "842721",
    "Bilateral Oophorectomy" => "842722",
    "Left Oophorectomy" => "842723",
    "Right Oophorectomy" => "842724",
    "Bilateral Orchiectomy" => "842725",
    "Left Orchiectomy" => "842726",
    "Right Orchiectomy" => "842727",
    "ORIF Left Hip" => "842718",
    "ORIF Right Hip" => "842719",
    "Otoplasty" => "842728",
    "Pacemaker" => "917650",
    "Pancreatectomy" => "842729",
    "Parathyroidectomy" => "842730",
    "Pin Fixation" => "918708",
    "Left Pneumonectomy" => "842732",
    "Right Pneumonectomy" => "842733",
    "Prostate Biopsy" => "719214",
    "Prostatectomy" => "842734",
    "Push Enteroscopy" => "710157",
    "Renal Biopsy" => "918689",
    "Retinal Reattachment" => "842735",
    "Rhinoplasty" => "842736",
    "Rhytidectomy (Face Lift)" => "600038",
    "Stripping of the Saphenous Vein" => "917654",
    "Septoplasty" => "842737",
    "Sinus Surgery" => "842738",
    "Skin Graft" => "600019",
    "Small Bowel Resection" => "842739",
    "Stab Avulsion of Saphenous Vein Tributaries" => "917656",
    "Strabismus Surgery" => "842741",
    "Temporal Artery Biopsy" => "717571",
    "Thoracic Aortic Aneurysm Repair" => "842742",
    "Thyroidectomy" => "842747",
    "Left Thyroidectomy" => "842748",
    "Right Thyroidectomy" => "842749",
    "Tonsillectomy" => "842750",
    "Heart Transplant" => "600031",
    "Left Kidney Transplant" => "600030",
    "Right Kidney Transplant" => "600029",
    "Left Lung Transplant" => "600028",
    "Right Lung Transplant" => "600027",
    "Tricuspid Valve Repair" => "842744",
    "Tricuspid Valve Replacement" => "842745",
    "Tubal Ligation" => "842751",
    "TM Patch" => "918247",
    "Tympanoplasty" => "698507",
    "Urethral dilatation was performed." => "918692",
    "Vasectomy" => "842753",
    "Ventricular Septal Defect Repair" => "842752",
    "Whipple Procedure" => "842754");
  //
  static function from($surg, $ugid) {
    $proc = $surg->proc;
    $ipc = geta(self::$S2IPC, $proc);
    if ($ipc)
      return self::fetch($ipc, $ugid);
    $ipc = self::fetchCustomByName($ugid, $proc);
    if ($ipc == null)
      $ipc = self::saveAsNewCustom($ugid, $proc, self::CAT_SURG);
    return $ipc;
  }
}
/**
 * Ipc Ipc_MigrateHm
 */
class Ipc_MigrateHm extends Ipc {
  //
  static $P2IPC = array(
    '1' => '918089',
    '2' => '691795',
    '3' => '710124',
    '4' => '600085',
    '5' => '699288',
    '6' => '600001',
    '7' => '600086',
    '8' => '719487',
    '9' => '918211',
    '10' => '686298',
    '11' => '600087',
    '12' => '918171',
    '13' => '600088',
    '14' => '719539',
    '15' => '917689',
    '16' => '697779',
    '17' => '719475',
    '18' => '686259',
    '19' => '719450',
    '20' => '917989',
    '21' => '600089',
    '22' => '600090',
    '23' => '600091',
    '24' => '600092',
    '25' => '699285'); 
  //
  static function from($hm) {
    $pcid = $hm->procId;
    $ipc = geta(self::$P2IPC, $pcid);
    if ($ipc) 
      return self::fetch($ipc, $hm->userGroupId);
    $ipc = self::fetch($pcid, $hm->userGroupId);
    if ($ipc == null)
      $ipc = self::fetchCustomByName($hm);
    if ($ipc == null)
      $ipc = self::saveAsNewCustom($hm);
    return $ipc;
  }
  static function saveAsNewCustom($hm) {
    return parent::saveAsNewCustom($hm->userGroupId, $hm->proc, self::CAT_PROC);
  }
  static function fetchCustomByName($hm) {
    return parent::fetchCustomByName($hm->userGroupId, $hm->proc);
  }
}
/**
 * SqlRec Hm
 */
class Hm extends SqlRec {
  //
  public $dataHmId;
  public $userGroupId;
  public $clientId;
  public $sessionId;
  public $type;           
  public $procId;        
  public $proc;          
  public $dateText;      
  public $dateSort;      
  public $results;       
  public $nextTimestamp; 
  public $active;
  public $dateUpdated;
  public $nextText;      
  public $cint;      
  public $cevery;         
  //
  public function getSqlTable() {
    return 'data_hm';
  }
  public function getApproxDate() {
    $date = formatFromLongApproxDate($this->dateText);
    if ($date) 
      return $date;
    else
      return formatAsUnknownDate();
  }
  public function getResults() {
    if ($this->results)
      return implode(' - ', jsondecode($this->results));
  }
  //
  static function fetchUnbuiltHistory($cid) {
    $c = self::asUnbuiltHistCriteria($cid);
    return self::fetchAllBy($c, new RecSort('proc', 'date_sort'));
  }
  static function markAsBuilt($cid) {
    Dao::query("UPDATE data_hm SET active=2 WHERE client_id=$cid AND session_id=0 AND active=1");
  }
  static function asUnbuiltHistCriteria($cid) {
    $c = new self();
    $c->clientId = $cid;
    $c->sessionId = '0';
    $c->procId = CriteriaValue::isNotNull();
    $c->active = true;
    return $c;
  }
}
/**
 * Rec SurgHx
 */
class SurgHx extends Rec {
  //
  public $proc;
  public $date;
  public $type;
  public $comment;
  //
  public function getApproxDate() {
    if ($this->date)
      return formatFromLongApproxDate($this->date);
    else
      return formatAsUnknownDate();
  }
  /**
   * @param int $cid
   * @return array(SurgHx,..)
   */
  static function from($cid) {
    $group = DataDao::fetchDataSyncProcGroup('pshx', $cid);
    return self::fromDataSyncProcGroup($group);
  }
  static function markAsBuilt($cid) {
    Dao::query("UPDATE data_syncs SET active=0 WHERE client_id=$cid AND dsync_id like 'pshx%'");
  }
  private static function fromDataSyncProcGroup($group) {
    $recs = array();
    if ($group->procs) { 
      foreach ($group->procs as $proc) {
        $procRec = geta($group->records, $proc);
        $recs[] = self::fromDataSyncProc($proc, $procRec);
      }      
    }
    return $recs;
  }
  private static function fromDataSyncProc($proc, $procRec) {
    $rec = new self();
    logit_r($proc, 'proc');
    logit_r($procRec, 'procRec for proc');
    if ($procRec) {
      $rec->proc = $proc;
      $rec->date = self::getProcRecValue($procRec, 'date');
      $rec->type = self::getProcRecValue($procRec, 'type');
      $rec->comment = self::getProcRecValue($procRec, 'comment');
    } 
    if ($rec->date == null) {
      $i = strrpos($proc, '(');  // Knee Scope (Jan 2008)
      logit_r($proc, 'proc i=' . $i);
      $rec->proc = ($i > 1) ? substr($proc, 0, $i - 1) : $proc;
      $rec->date = ($i > 2) ? substr($proc, $i + 1, -1) : 'unknown';
    }
    return $rec;
  }
  private static function getProcRecValue($procRec, $fid) {
    $value = $procRec->fieldValues[$fid];
    return ($value) ? substr($value, 2, -2) : null;  // extract [""]
  }
}
//
require_once 'php/data/rec/sql/Providers.php';
require_once 'php/dao/DataDao.php';