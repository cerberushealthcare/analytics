<?php
require_once 'php/data/rec/sql/_SqlRec.php';
/**
 * Address Record Base Class
 * @author Warren Hornsby 
 */
abstract class AddressRec extends SqlRec {
  /*  
  public $addressId;
  public $tableCode;
  public $tableId;
  public $type;
  public $addr1;
  public $addr2;
  public $addr3;
  public $city;
  public $state;
  public $zip;
  public $country;
  public $phone1;
  public $phone1Type;
  public $phone2;
  public $phone2Type;
  public $phone3;
  public $phone3Type;
  public $email1;
  public $email2;
  public $name;
  */  
  const TABLE_USERS = 'U';
  const TABLE_USER_GROUPS = 'G';
  const TABLE_CLIENTS = 'C';
  //
  const TYPE_SHIP = '0';
  const TYPE_BILL = '1';
  const TYPE_EMER = '2';
  const TYPE_SPOUSE = '3';
  const TYPE_RX = '4';
  const TYPE_MOTHER = '5';  
  const TYPE_FATHER = '6';
  const TYPE_BIRTH = '8';  
  const TYPE_WORK = '7';  
  //
  const PHONE_TYPE_PRIMARY = 0;
  const PHONE_TYPE_WORK = 1;
  const PHONE_TYPE_CELL = 2;
  const PHONE_TYPE_EMER = 3;
  const PHONE_TYPE_FAX = 4;
  const PHONE_TYPE_OTHER = 9;
  public static $PHONE_TYPES = array(
    self::PHONE_TYPE_PRIMARY => 'Primary',
    self::PHONE_TYPE_WORK => 'Work',
    self::PHONE_TYPE_CELL => 'Cell',
    self::PHONE_TYPE_EMER=> 'Emergency',
    self::PHONE_TYPE_FAX => 'Fax',
    self::PHONE_TYPE_OTHER => 'Other');
  //
  public function getSqlTable() {
    return 'addresses';
  }
  public function setPrimaryPhone($phone) {
    $this->setPhone1(self::PHONE_TYPE_PRIMARY, $phone);
  }
  public function setPhone1($type, $phone) {
    $this->phone1Type = $type;
    $this->phone1 = $phone;
  }
  public function setPhone2($type, $phone) {
    $this->phone2Type = $type;
    $this->phone2 = $phone;
  }
  //
  public static function getStaticJson() {
    return parent::getStaticJson(__CLASS__);
  }
}
/**
 * Editable Address Base Class
 */
abstract class Address extends AddressRec {
  //
  public $addressId;
  public $tableCode;
  public $tableId;
  public $type;
  public $addr1;
  public $addr2;
  public $addr3;
  public $city;
  public $state;
  public $zip;
  public $country;
  public $phone1;
  public $phone1Type;
  public $phone2;
  public $phone2Type;
  public $phone3;
  public $phone3Type;
  public $email1;
  public $email2;
  public $name;
  //
  public function getAuditClientId() {
    if ($this->tableCode == self::TABLE_CLIENTS)
      return $this->tableId;
    else
      return null;
  }
  public function toJsonObject() {
    $o = parent::toJsonObject();
    $o->csz = self::formatCsz($this);
    unset($o->_empty);
    return $o;
  }
  public function authenticateAsCriteria() {
    if ($this->tableCode)
      $this->authenticate();
  }
  public function authenticate() {
    switch ($this->tableCode) {
      case self::TABLE_CLIENTS:
        LoginDao::authenticateClientId($this->tableId);
        break;
      case self::TABLE_USERS:
        LoginDao::authenticateUserId($this->tableId);
        break;
      case self::TABLE_USER_GROUPS:
        LoginDao::authenticateUserGroupId($this->tableId);
        break;
      default:
        throw new InvalidDataException("Invalid address table code '$address->tableCode'");
    }
  }
  abstract function getTableCode();
  /**
   * @param int $id of associated record (to ensure it matches address rec prior to save)
   */
  public function save($id) {
    if ($this->tableCode != $this->getTableCode() || $this->tableId != $id || $this->tableId == null) 
      throw new SecurityException("Invalid address save, code $rec->tableCode/ID $rec->tableId");
    return parent::save();
  }
  public function isEmpty() {
    return isset($this->_empty);
  }
  //
  /**
   * @param int $id
   * @return Address
   */
  static function fetch($id) {
    $address = parent::fetch($id, __CLASS__);
    $address->authenticate();
  }
  private static function formatCsz($addr) {
    $a = "";
    if ($addr->city != "") {
      $a = $addr->city;
      if ($addr->state != "") 
        $a .= ", " . $addr->state;
      if ($addr->zip != "") 
        $a .= " " . $addr->zip;
    }
    return trim($a);
  }
}
/**
 * Clients 
 */
class ClientAddress extends Address {
  //
  public function getTableCode() {
    return self::TABLE_CLIENTS;
  }
  public function save($cid) {
    return parent::save($cid);
  }
  //
  /**
   * @param int $cid
   * @param string $type AddressRec::TYPE_
   * @param bool $returnEmpty true to return empty Address rather than null (optional)
   * @return Address
   */
  static function fetch($cid, $type, $returnEmpty = false) {
    $c = self::asCriteria($cid, $type);
    $address = self::fetchOneBy($c);
    if ($returnEmpty && $address == null) {
      $address = self::asCriteria($cid, $type);
      $address->_empty = true;
    }
    return $address;
  }
  static function fetchHome($cid, $returnEmpty = false) {
    return self::fetch($cid, self::TYPE_SHIP, $returnEmpty);
  }
  static function fetchEmergency($cid, $returnEmpty = false) {
    return self::fetch($cid, self::TYPE_EMER, $returnEmpty);
  }
  static function fetchSpouse($cid, $returnEmpty = false) {
    return self::fetch($cid, self::TYPE_SPOUSE, $returnEmpty);
  }
  static function fetchFather($cid, $returnEmpty = false) {
    return self::fetch($cid, self::TYPE_FATHER, $returnEmpty);
  }
  static function fetchMother($cid, $returnEmpty = false) {
    return self::fetch($cid, self::TYPE_MOTHER, $returnEmpty);
  }
  static function fetchRx($cid, $returnEmpty = false) {
    return self::fetch($cid, self::TYPE_RX, $returnEmpty);
  }
  static function fetchBirth($cid, $returnEmpty = false) {
    return self::fetch($cid, self::TYPE_BIRTH, $returnEmpty);
  }
  //
  /**
   * @param int $cid
   * @param int $type Address::TYPE
   * @return ClientAddress
   */
  static function asCriteria($cid, $type) {
    $c = new self();
    $c->tableCode = self::TABLE_CLIENTS;
    $c->tableId = $cid;
    $c->type = $type;
    return $c;
  }
}
/**
 * User Groups
 */
class UserGroupAddress extends AddressRec {
  //
  public function getTableCode() {
    return self::TABLE_USER_GROUPS;
  }
  public function save($ugid) {
    return parent::save($ugid);
  }
  //
  static function fetch($ugid) {
    $c = self::asCriteria($ugid);
    return self::fetchOneBy($c);
  }
  /**
   * @param int $ugid
   * @return UserGroupAddress
   */
  static function asCriteria($ugid) {
    $c = new self();
    $c->tableCode = self::TABLE_USER_GROUPS;
    $c->tableId = $ugid;
    $c->type = self::TYPE_SHIP;
    return $c;
  }
}
/**
 * Facilities
 */
class FacilityAddress extends AddressRec {
  //
  public function getTableCode() {
    return self::TABLE_USER_GROUPS;
  }
  public function save($ugid) {
    return parent::save($ugid);
  }
  //
  static function fetch($id) {
    return parent::fetch($id, __CLASS__);
  }
}