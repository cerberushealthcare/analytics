<?php
require_once 'php/data/rec/sql/_ClientRec.php';
require_once 'php/data/rec/sql/_AddressRec.php';
/**
 * Clients DAO
 * @author Warren Hornsby
 */
class Clients {
  /**
   * 
   * @param int $cid
   * @return Client(+Addresses,+ICards)
   */
  static function get($cid) {
    return Client::fetchWithDemo($cid);
  }
  /**
   * @param stdClass $object Client JSON
   * @return Client
   */
  static function save($object) {
    global $myLogin;
    $rec = new Client($object);
    $rec->save($myLogin->userGroupId);
    return Clients::get($rec->clientId);
  }
  /**
   * @param stdClass $object Address JSON
   * @param int cid 
   * @return Client(+Addresses,+ICards) 
   */
  static function updateAddress($object, $cid) {
    $rec = new ClientAddress($object);
    $rec->save($cid);
    return Clients::get($cid);
  }
  /**
   * @param string $notes
   * @param int $cid
   */
  static function updateNotes($notes, $cid) {
    $rec = Client::fetch($cid);
    $rec->notes = $notes;
    $rec->save();
  }
  /**
   * @param stdClass $object ICard JSON
   * @param int cid 
   * @return Client(+Addresses,+ICards) 
   */
  static function updateICard($object, $cid) {
    $icard = new ICard($object);
    if ($icard->clientId != $cid) 
      throw new SecurityException("Invalid icard save, obj $icard->clientId/cid $cid");
    $icard->save();
    return Clients::get($cid);
  }
  /**
   * Search for potential matches 
   * @param string $last
   * @param string $first
   * @param(opt) string $dob
   * @param(opt) string $sex
   * @return array($cid=>Client,..)
   */
  static function search($last, $first, $dob = null, $sex = null) {
    global $myLogin;
    $birth = dateToString($dob);
    $matches = array();
    $rec = new self();
    $rec->active = true;
    $rec->userGroupId = $myLogin->userGroupId;
    $rec->lastName = $last;
    $rec->firstName = $first;
    $rec->sex = $sex;
    $rec->birth = $birth;
    if (Clients::_search($matches, $rec) > 0)  // last, first, dob, sex
      return $matches;
    $rec->firstName = CriteriaValue::startsWith(substr($first, 0, 1));
    Clients::_search($matches, $rec);  // last, first1%, dob, sex
    $rec->firstName = null;
    if (Clients::_search($matches, $rec) > 0)  // last, dob, sex
      return $matches;
    $rec->lastName = null;
    if ($rec->birth) {
      $rec->birth = null;
      $rec->lastName = $last;
      $rec->firstName = $first;
      if (Clients::_search($matches, $rec) > 0)  // last, first, sex
        return $matches;
      $rec->firstName = null;
      $rec->lastName = null;
      $rec->birth = $birth;
      Clients::_search($matches, $rec);  // dob, sex
      $rec->birth = null;
      $rec->lastName = $last;
      $rec->firstName = CriteriaValue::startsWith(substr($first, 0, 1));
      Clients::_search($matches, $rec);  // last, first1%, sex
      $rec->firstName = null;
      if (Clients::_search($matches, $rec) > 0)  // last, sex
        return $matches;
    }
    $rec->lastName = CriteriaValue::startsWith(substr($last, 0, 4));
    $rec->firstName = $first;
    Clients::_search($matches, $rec);  // last4%, first, sex
    $rec->firstName = null;
    Clients::_search($matches, $rec);  // last4%, sex
    if (count($matches) == 0) {
      $rec->firstName = $first;
      $rec->lastName = CriteriaValue::startsWith(substr($last, 0, 1));
      Clients::_search($matches, $rec);  // last1%, first, sex
      $rec->lastName = null;
      $rec->birth = null;
      Clients::_search($matches, $rec);  // first, sex
    }
    return $matches;
  } 
  //
  private static function _search(&$matches, $rec) {
    $recs = SqlRec::fetchMapBy($rec, 'clientId', 10);
    $matches = $matches + $recs;
    return count($recs);
  }
  /**
   * Merge client records (correct and dupe) 
   * Correct client will absorb dupe client data; dupe will be deactiated
   * @param int $cid of correct record
   * @param int $cidDupe of dupe record
   */
  static function merge($cid, $cidDupe) {
    query("UPDATE sessions SET client_id=$cid WHERE client_id=$cidDupe");
    query("UPDATE scheds SET client_id=$cid WHERE client_id=$cidDupe");
    query("UPDATE data_allergies SET client_id=$cid WHERE client_id=$cidDupe AND source IS NULL");
    query("UPDATE data_diagnoses SET client_id=$cid WHERE client_id=$cidDupe");
    query("UPDATE data_hm SET client_id=$cid WHERE client_id=$cidDupe AND session_id=0 AND active=1");
    query("UPDATE data_immuns SET client_id=$cid WHERE client_id=$cidDupe");
    query("UPDATE data_meds SET client_id=$cid WHERE client_id=$cidDupe AND source IS NULL");
    query("UPDATE data_vitals SET client_id=$cid WHERE client_id=$cidDupe");
    query("UPDATE clients SET user_group_id=0 WHERE client_id=$cidDupe");
    Client::mergeAddresses($cid, $cidDupe);
  }
  private static function mergeAddresses($cidt, $cidDupe) {
    $client = ClientDemo::fetch($cid);
    $clientDupe = ClientDemo::fetch($cidDupe);
    $adds = $client->getAddresses();
    $addsDupe = $clientDupe->getAddresses();
    foreach ($adds as $type => $add) {
      $addDupe = $addsDupe[$type];
      if ($add == null && $addDupe) {
        $addDupe->tableId = $client->clientId;
        $addDupe->save();
      }
    }
    if (count($client->ICards) == 0)
      query("UPDATE client_icards SET client_id=$client->clientId WHERE client_id=$clientDupe->clientId");
  }
}
class Client extends ClientRec {
  //
  public $clientId;
  public $userGroupId;
  public $uid;
  public $lastName;
  public $firstName;
  public $sex;
  public $birth;
  public $img;
  public $dateCreated;
  public $active;
  public $cdata1;
  public $cdata2;
  public $cdata3;
  public $cdata4;
  public $cdata5;
  public $cdata6;
  public $cdata7;
  public $middleName;
  public $notes;
  public $dateUpdated;
  public $race;
  public $ethnicity;
  public $deceased;
  public $language;
  public $familyRelease;
  public $primaryPhys;
  public /*Address*/ $Address_Home;
  public /*Address*/ $Address_Emergency;
  public /*Address*/ $Address_Spouse;
  public /*Address*/ $Address_Father;
  public /*Address*/ $Address_Mother;
  public /*Address*/ $Address_Rx;
  public /*[ICard]*/ $ICards;
  public /*UserStub*/ $User_primaryPhys;
  public $age;  // '1y 2m';
  public $ageYears;
  //
  public function toJsonObject(&$o) {
    parent::toJsonObject($o);
    $o->lookup('sex', self::$SEXES);
    $o->lookup('language', self::$LANGUAGES);
    $o->lookup('race', self::$RACES);
    $o->lookup('ethnicity', self::$ETHNICITIES);
  }
  public function getJsonFilters() {
    return array(
    	'birth' => JsonFilter::editableDate(),
      'deceased' => JsonFilter::boolean());
  }
  public function getAuditLabel() {
    return $this->getFullName();
  }
  public function validate(&$rv) {
    $rv->requires('uid', 'lastName', 'firstName', 'birth');
  }
  public function save($ugid) {
    if ($this->clientId == null) 
      $this->saveAsNew($ugid);
    else
      parent::save($ugid);
  }
  protected function saveAsNew($ugid) {
    $dupe = ClientStub::fetchByUid($ugid, $this->uid);
    if ($dupe) 
      throw new DupePatientException($dupe); 
    $this->active = true;
    $this->deceased = false;
    parent::save($ugid);
  }
  //
  public function getVersion() {
    return $this->cdata7;
  }
  public function formatBirthplace() {
    if ($this->Address_Birth) {
      $a = nonNulls($Address_Birth->city, $Address_Birth->state);
      return implode(', ', $a);
    }
  }
  //
  /**
   * @param int $cid
   * @return Client
   */
  static function fetch($cid) {
    if ($cid) 
      return parent::fetch($cid, 'Client');
    else
      return null;
  }
  /**
   * @param int $cid
   * @return Client(+Addresses,Icards)
   */
  static function fetchWithDemo($cid) {
    $rec = self::fetch($cid);
    if ($rec) {
      $rec->Address_Home = ClientAddress::fetchHome($cid, true); 
      $rec->Address_Emergency = ClientAddress::fetchEmergency($cid, true); 
      $rec->Address_Spouse = ClientAddress::fetchSpouse($cid, true); 
      $rec->Address_Father = ClientAddress::fetchFather($cid, true);
      $rec->Address_Mother = ClientAddress::fetchMother($cid, true);
      $rec->Address_Rx = ClientAddress::fetchRx($cid, true);
      $rec->Address_Birth = ClientAddress::fetchBirth($cid);
      $rec->ICards = ICard::fetchAllByClient($cid);
      $cage = chronAge($rec->birth);
      $rec->age = self::formatAge($cage);
      $rec->ageYears = $cage['y']; 
    }
    return $rec;
  }
  //
  private static function formatAge($cage) {
    $y = $cage['y'];
    if ($y >= 3) {
      return $y;
    } else if ($y > 0) {
      return $y . 'y ' . $cage['m'] . 'm';
    } else {
      return $y . 'y ' . $cage['m'] . 'm ' . $cage['d'] . 'd';
    }
  }
}
/**
 * Client Stub
 */
class ClientStub extends ClientRec implements ReadOnly {
  //
  public $clientId;
  public $uid;
  public $lastName;
  public $firstName;
  public $middleName;
  public $sex;
  public $birth;
  public $primaryPhys;
  //
  public function toJsonObject(&$o) {
    $o->name = $this->getFullName();
  }
  //
  /**
   * @param int $cid
   * @return ClientStub
   */
  static function fetch($cid) {
    return parent::fetch($cid, 'ClientStub');
  }
  /**
   * @param int $ugid
   * @param string $uid
   * @return ClientStub (if exists)
   */
  static function fetchByUid($ugid, $uid) {
    $c = new self();
    $c->userGroupId = $ugid;
    $c->uid = $uid;
    return self::fetchOneBy($c);
  }
}
/**
 * Client Insurance Card
 */
class ICard extends SqlRec implements CompositePk {
  //
  public $clientId;
  public $seq;
  public $planName;
  public $subscriberName;
  public $nameOnCard;
  public $groupNo;
  public $subscriberNo;
  public $dateEffective;
  public $active;
  //
  const SEQ_PRIMARY = '1';
  const SEQ_SECONDARY = '2';
  static $SEQS = array(
    ICard::SEQ_PRIMARY => 'Primary',
    ICard::SEQ_SECONDARY => "Secondary");
  //
  public function getSqlTable() {
    return 'client_icards';
  }
  public function getAuditRecId() {
    return "$this->clientId,$this->seq"; 
  }
  //
  /**
   * @param int $cid
   * @return array(Icard,ICard)
   */
  static function fetchAllByClient($cid) {
    return array(
      self::fetchByClientSeq($cid, ICard::SEQ_PRIMARY),
      self::fetchByClientSeq($cid, ICard::SEQ_SECONDARY));
  }
  //
  private static function fetchByClientSeq($cid, $seq) {
    $c = new ICard($cid, $seq);
    $rec = self::fetchOneBy($c);
    if ($rec)
      return $rec;
    else 
      return new ICard($cid, $seq);
  }
}
class DupePatientException extends DisplayableException {
  public function __construct($dupe) {
    $html = "This record cannot be created because a patient with that ID already exists:<br/><br/>ID: <b>$dupe->uid</b><br/>Name: <b>" . $dupe->getFullName() . "</b><br/>DOB: <b>" . formatDate($dupe->birth) . "</b>";
    $this->message = $html;
  }
}
?>