/**
 * Facesheet Immunizations
 * Global static 
 * Requires: TableLoader.js, facesheet.css
 */
FaceImmun = {
  fs:null,
  changed:null,
  _scb:null,
  _POP:'fsp-imm',
  //
  pop:function(fs, zoom, callback) {
    var self = this;
    Page.work(function() {
      self.fs = fs;
      self.changed = false;
      self._scb = Ajax.buildScopedCallback(callback || 'immunChangedCallback');
      Includer.get([Includer.HTML_FACE_IMMUN], function() {
        Pop.setCaption('fsp-imm-cap-text', fs.client.name + ' - Immunizations');
        Pop.setCaption('pop-imme-cap-text', fs.client.name + ' - Immunization Entry');
        Pop.setCaption('pop-immc-cap-text', fs.client.name + ' - Immunization Chart');
        if (! me.Role.Patient.immuns) {
          _$('imm-act').invisible();
        }
        self._load();
        Page.work();
        if (zoom) {
          Pop.zoom(FaceImmun._POP);  
        } else {
          Pop.show(FaceImmun._POP);
        }
      });
    });
  },
  update:function(fs) {
    this.fs.cuTimestamp = fs.cuTimestamp;
    this.fs.immuns = fs.immuns;
    this.changed = true;
    this._load();    
  },
  fpEdit:function(id) {
    if (me.Role.Patient.immuns)
      FaceImmunEntry.pop(id);
  },
  fpChart:function() {
    FaceImmunChart.pop();
  },
  fpClose:function() {
    Pop.close();
    if (this.changed) 
      Ajax.callScopedCallback(this._scb, this.fs);
  },
  fpDownload:function() {
    VxuDownloader.pop(this.fs.client.clientId);
  },
  //
  _load:function() {
    var fs = this.fs;
    var tp = new TableLoader('fsp-immh-tbody', 'off', 'fsp-immh-div');
    if (fs.immuns) {
      fs.immunsById = {};
      for (var i = 0; i < fs.immuns.length; i++) {
        var immun = fs.immuns[i];
        fs.immunsById[immun.dataImmunId] = immun;
        var href = 'javascript:FaceImmun.fpEdit(' + immun.dataImmunId + ')';
        tp.createTrTd('main');
        tp.append(createAnchor(null, href, 'fs vital', immun.dateGiven));
        tp.createTd(null, immun.name);
        tp.createTd(null, null, bulletJoin([immun.manufac, immun.lot], true));
        tp.createTd(null, null, bulletJoin([immun.dose, immun.route], true));
      }
    }
  }
}
/**
 * Immunization Entry
 */
FaceImmunEntry = {
  parent:null,
  fs:null,
  tui:null,
  id:null,
  dateform:null,
  /*
   * - id: DATA_IMMUN_ID, null for add
   * - parent: optional (assumes FaceImmun)
   */
  pop:function(id, parent) {
    var fs = FaceUi.setParentage(parent || FaceImmun, this);
    var self = this;
    Page.work(function() {
      Includer.get([Includer.AP_TEMPLATE_POPS], function() {
        if (self.tui == null) {
          self.tui = Html.TemplateUi.create(_$('imme-tui'), fs).load(fs.immunPid, function() {
            self._pop(id);
          })
        } else {
          self.tui.reset(function() {
            self._pop(id);
          })
        }
      });
    });
  },
  _pop:function(id) {
    this._addVisLink('');
    this._addVisLink('2');
    this._addVisLink('3');
    this._addUnits();
    this.id = id;
    if (this.dateform == null) {
      this.dateform = new EntryForm(_$('ul-imme-date'), '');
      this.dateform.li('Date Given', null, 'first120').datetime('date');
    }
    if (id) {
      var imm = this.fs.immunsById[id];
      this.tui.setRecord(imm, 'imm.');
      this.dateform.setValue('date', imm.dateGiven);
      _$('imme-delete-span').show();
    } else {
      this.tui.setRecord({}, 'imm.');
      this.dateform.setValue('date', DateValue.nowValue());
      _$('imme-delete-span').hide();
    }
    Page.work();
    Pop.show('pop-imme');      
  },
  _addUnits:function() {
    var quid = 'immCert.+immunRecord.dose';
    var li = this.tui.getQuestion(quid).tuiq;
    Html.Span.create(null, 'mL').into(li);
  },
  _addVisLink:function(suffix) {
    var quid = 'immCert.+immunRecord.$visForm' + suffix;
    var li = this.tui.getQuestion(quid).tuiq;
    var a = createAnchor(null, 'javascript:FaceImmunEntry.fpVis("' + suffix + '")', null, 'Select CDC VIS');
    Html.Span.create().add(a).into(li);
  },
  fpVis:function(suffix) {
    this.visSuffix = suffix;
    Pop.show('pop-vis');
  },
  fpVisSel:function(a) {
    var form = a.innerText;
    var date = a.parentElement.nextSibling.innerText;
    this.tui.setField('formVis' + this.visSuffix, form, 'imm.').setField('dateVis' + this.visSuffix, date, 'imm.');
    Ajax.Procedures.record(this.fs.client.clientId, 600179);  // ImmunInfoProvided
    Pop.close();
  },
  fpSave:function() {
    Page.workingCmd(true);
    var rec = this.tui.getRecord('imm.');
    rec.clientId = this.fs.client.clientId;
    rec.dateGiven = this.dateform.getRecord().date;
    var self = this;
    Ajax.Facesheet.Immuns.save(rec, 
      function(fs) {
        Page.workingCmd(false);
        self.parent.update(fs);
        Pop.close();
      });
  },
  fpDelete:function() {
    if (this.id) {
      var self = this;
      Pop.Confirm.showDeleteRecord(function() {
        Html.Window.working(true);
        Ajax.Facesheet.Immuns.remove(self.id,
          function(fs) {
            Html.Window.working(false);
            self.parent.update(fs);
            Pop.close();
          });
      });
    }
  },
  _formatDate:function(text) {
    return (text) ? 
      calFormatShortDate(calParse(text, CAL_FMT_SENTENCE)) : 
      null;
  }
};
/**
 * Immunization Chart
 */
FaceImmunChart = {
  fs:null,
  parent:null,
  _chart:null,
  _DATE_COLS:6,
  pop:function(fs) {
    var fs = FaceUi.setParentage(FaceImmun, this);
    var self = this;
    Page.work(function() {
      Lookup.getVacChart(
        function(chart) {
          self._chart = chart;
          self._load(fs);
          Page.work();
          Pop.show('pop-immc');
        });
    });
  },
  fpEdit:function(id) {
    FaceImmunEntry.pop(id, FaceImmunChart);
  },
  fpPrint:function() {
    var ug = me.User.UserGroup;
    var uga = ug.Address;
    Page.pop(Page.PAGE_PRINT_POP, {
      'pop':'FaceImmun',
      'obj':'FaceImmunChart',
      'arg':this.fs.client.clientId,
      'titlel':'IMMUNIZATION CERTIFICATE<br>' + this.fs.client.name + '<br>Birth: ' + this.fs.client.birth + '<br>Printed: ' + DateUi.getToday(),
      'titler':ug.name + '<br>' + uga.addrLine + '<br>Phone: ' + uga.phone1 + '<br>Fax: ' + uga.phone2});
  },
  print:function(id) {
    var self = this;
    Lookup.getVacChart(
      function(chart) {
        self._chart = chart;
        Ajax.Facesheet.get(id, null, 
          function(fs) {  
            self._load(fs);
            printout('immc-tbl');
          });
      });
  },
  update:function(fs) {
    this._load(fs);
    this.parent.update(fs);
  },
  _load:function(fs) {
    this.fs = fs;
    if (fs.immuns) {
      var chart = this._buildChart();
      var t = new TableLoader('immc-tbody', 'off', 'immc-div');
      for (var cat in chart) {
        if (chart[cat].active) {
          t.createTr(0);
          t.createTd('immcat', cat);
          t.td.colSpan = this._DATE_COLS + 1; 
          var vacs = chart[cat].vacs;
          for (var vac in vacs) {
            t.createTr(1);
            t.createTd('immname', vac);
            t.td.style.width = '25%';
            var immuns = vacs[vac];
            for (var i = 0; i < this._DATE_COLS; i++) {
              if (i < immuns.length) {
                var a = createAnchor(null, 'javascript:FaceImmunChart.fpEdit(' + immuns[i].dataImmunId + ')', null, immuns[i]._dateOnly);
                t.createTdAppend('nowrap', a);
              } else {
                t.createTd(null, null, '&nbsp;');
              }
              t.td.style.width = '66px';
            }
          }
        }
      }
    }
  },
  /*
   * Returns {
   *   category:{
   *     'active':!,     
   *     'vacs':{
   *       vac:[immun,..],..
   *       },..
   *     },..
   *   }
   */
  _buildChart:function() {
    var fs = this.fs;
    var chart = {};
    var catByVac = {};
    for (var cat in this._chart) {
      chart[cat] = {
        'active':0,
        'vacs':{}
        };
      var vacs = this._chart[cat];
      for (var i = 0; i < vacs.length; i++) {
        catByVac[vacs[i]] = chart[cat];
      }
    }
    var other = {
      'active':0,
      'vacs':{}
      };
    chart['Other'] = other;
    for (var i = 0; i < fs.immuns.length; i++) {
      var immun = fs.immuns[i];
      var vacs = this._getVacs(immun.name);
      for (var j = 0; j < vacs.length; j++) {
        var vac = vacs[j];
        var cat = catByVac[vac] || other;
        cat.active = true;
        Map.unshiftInto(cat.vacs, vac, immun);
      }
    }
    return chart;
  },
  _xrefChartVacs:function(chart) {
  },
  _getVacs:function(name) {
    var vacs;
    var a = name.split('- ');
    if (a.length == 1) {
      vacs = [name];
    } else {
      vacs = a[1].split('/');
    }
    return vacs;
  }
};
  