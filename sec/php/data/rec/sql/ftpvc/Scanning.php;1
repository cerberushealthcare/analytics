<?php
require_once 'inc/requireLogin.php';
require_once 'php/data/rec/sql/_SqlRec.php';
//
/**
 * Scanning DAO
 * @author Warren Hornsby
 */
class Scanning {
  //
  /**
   * @param $httpPostFile $_FILES field array('name'=>..,'type'=>..,'tmp_name'=>..,'error'=>..,'size'=>)
   */
  static function upload($httpPostFile) {
    global $myLogin;
    $ugid = $myLogin->userGroupId;
    $files = UploadFile::fromHttpPostFile($httpPostFile);
    if ($files) {
      $count = ScanFile::count($ugid);
      $folder = UploadFolder::open($ugid);
      $files = $folder->save($files, $count);
      ScanFile::saveUploads($files, $ugid);
    }
  }
}
//
/**
 * Scan File
 */
class ScanFile extends SqlRec {
  //
  public $scanFileId;
  public $userGroupId;
  public $filename;
  public $ext;
  public $scanSetId;
  public $seq;
  //
  public function getSqlTable() {
    return 'scan_files';
  }
  //
  /**
   * @param int $ugid
   * @return int
   */
  static function count($ugid) {
    $c = new ScanFile();
    $c->userGroupId = $ugid;
    return parent::count($c);
  }
  /**
   * @param UploadFile[] $files
   * @param int $ugid
   */
  static function saveUploads($files, $ugid) {
    $recs = self::fromUploads($files, $ugid);
    self::saveAll($recs);
  }
  /**
   * @param UploadFile[] $files
   * @param int $ugid
   * @return array(ScanFile,..)
   */
  static function fromUploads($files, $ugid) {
    $recs = array();
    foreach ($files as $file)
      $recs[] = self::fromUpload($file, $ugid); 
    return $recs;
  }
  /**
   * @param UploadFile[] $files
   * @param int $ugid
   * @return ScanFile
   */
  static function fromUpload($file, $ugid) {
    $rec = new self();
    $rec->userGroupId = $ugid;
    $rec->filename = $file->newName;
    $rec->ext = $file->ext;
    return $rec;
  }
} 
/**
 * Scan Set
 */
class ScanSet extends SqlRec {
  //
  public $scanSetId;
  public $userGroupId;
  public $clientId;
  public $scanType;
  public $ipc;
  public $area;
  public $addrPerson;
  public $addrGroup;
  public $datePerformed;
  public $dateScanned;
  public $tag1;
  public $tag2;
  public $tag3;
  //
  public function getSqlTable() {
    return 'scan_sets';
  }
}
//
class UploadFolder {
  //
  public $dir;
  public $files;
  //
  public function __construct($dir) { 
    if (! is_dir($dir))
      if (! mkdir($dir)) 
        throw new UploadFolderException($dir, 'Unable to access directory');
    $this->dir = $dir;
  }
  /**
   * @param UploadFile[] $files
   * @param int $count current file count
   */
  public function save($files, $count) {
    foreach ($files as &$file) {
      $file->setNewName($count++);
      $filename = "$this->dir\\" . $file->newName;
      move_uploaded_file($file->tmpName, $filename);
    }
    return $files;
  }
  //
  /**
   * @param int $ugid
   * @return UploadFolder
   */
  static function open($ugid) {
    $dir = "scanfiles\G$ugid";
    return new self($dir);
  }
}
class UploadFile extends Rec {
  //
  public $name;     // 'original.jpg'
  public $type;     // 'image/jpeg'
  public $tmpName;  // 'C:\Windows\temp\phpE74.tmp'
  public $error;    // 0
  public $size;     // 23308
  //
  public $newName;  // 'S00000012'
  public $ext;      // 'jpg'
  //
  public function __construct() {
    $args = func_get_args(); 
    call_user_func_array(array('Rec', '__construct'), $args);
    $this->validate();
  }
  public function validate() {
    $this->ext = $this->getExt();
    if (empty($this->ext)) 
      throw new UploadFileException($this, "$this->name is an invalid type; only image and PDF files accepted");
    if ($this->size > 1000000) 
      throw new UploadFileException($this, "$this->name is too large; files must be less than 1M in size");
  }
  public function setNewName($i) {
    $this->newName = sprintf("S%010d", $i);
  }
  //
  private function getExt() {
    switch ($this->type) {
      case 'image/jpeg':
      case 'image/pjpeg':
        return 'jpg';
      case 'image/bmp':
      case 'image/x-windows-bmp':
        return 'bmp';
      case 'image/gif':
        return 'gif';
      case 'application/pdf':
        return 'pdf';
    }
  }
  /**
   * @param $f $_FILES field array
   * return array(UploadFile,..)
   */
  static function fromHttpPostFile($f) {
    $recs = array();
    arrayifyEach($f);
    for ($i = 0, $j = count($f['name']); $i < $j; $i++)
      if ($f['name'][$i]) 
        $recs[] = new self($f['name'][$i], $f['type'][$i], $f['tmp_name'][$i], $f['error'][$i], $f['size'][$i]);
    return $recs;
  }
}
//
class ScanningException extends Exception {
};
class UploadFolderException extends ScanningException {
  public $dir;
  public function __construct($dir, $message) {
    $this->dir = $dir;
    $this->message = $message; 
  }
}
class UploadFileException extends ScanningException {
  public $uploadFile;
  public function __construct($uploadFile, $message) {
    $this->uploadFile = $uploadFile;
    $this->message = $message; 
  }
}
?>