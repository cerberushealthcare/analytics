<?php
require_once 'php/data/rec/sql/_SqlRec.php';
require_once 'php/data/rec/sql/ClientStub.php';
require_once 'php/data/rec/sql/SessionStub.php';
require_once 'php/data/rec/sql/UserStub.php';
/**
 * TrackItem Record
 */
class TrackItem extends SqlRec {
  //
  public $trackItemId;
  public $userGroupId;
  public $clientId;
  public $sessionId;
  public $key;
  public $userId;
  public $priority;
  public $trackCat;
  public $trackDesc;
  public $cptCode;
  public $status;
  public $orderDate;
  public $orderBy;
  public $orderNotes;
  public $schedDate;
  public $schedWith;
  public $schedLoc;
  public $schedBy;
  public $schedNotes;
  public $closedDate;
  public $closedFor;
  public $closedBy;
  public $closedNotes;
  public /*ClientStub*/ $ClientStub;
  public /*SessionStub*/ $SessionStub;
  public /*UserStub*/ $UserStub_OrderBy;
  public /*UserStub*/ $UserStub_SchedBy;
  public /*UserStub*/ $UserStub_ClosedBy;
  //
  const PRIORITY_NORMAL = '0'; 
  const PRIORITY_STAT = '9';
  public static $PRIORITIES = array(
    TrackItem::PRIORITY_NORMAL => 'Normal',
    TrackItem::PRIORITY_STAT => 'STAT');
  //
  const TCAT_LAB = '1';
  const TCAT_NUCLEAR = '2';
  const TCAT_RADIO = '3';
  const TCAT_REFER = '4';
  const TCAT_TEST = '5';
  const TCAT_PROC = '6';
  const TCAT_OTHER = '99';
  public static $TCATS = array(
    TrackItem::TCAT_LAB => 'Labs',
    TrackItem::TCAT_NUCLEAR => 'Nuclear Medicine',
    TrackItem::TCAT_RADIO => 'Radiology',
    TrackItem::TCAT_REFER => 'Referrals',
    TrackItem::TCAT_TEST => 'Tests',
    TrackItem::TCAT_PROC => 'Procedures',
    TrackItem::TCAT_OTHER => '(Other)');
  //
  const STATUS_ORDERED = '0';
  const STATUS_SCHED = '1';
  const STATUS_CLOSED = '9';
  public static $STATUSES = array(
    TrackItem::STATUS_ORDERED => 'Ordered',
    TrackItem::STATUS_SCHED => 'Scheduled',
    TrackItem::STATUS_CLOSED => 'Closed');
  //
  const CLOSED_FOR_RECEIVED = '1';
  const CLOSED_FOR_CANCELLED = '2';
  public static $CLOSED_FORS = array(
    TrackItem::CLOSED_FOR_RECEIVED => 'Received',
    TrackItem::CLOSED_FOR_CANCELLED => 'Cancelled');
  //
  public function getSqlTable() {
    return 'track_items';
  }
  public function toJsonObject() {
    $o = parent::toJsonObject();
    Rec::addDateProps($o, array('orderDate', 'schedDate', 'closedDate'));
    return $o;
  }
  /**
   * Change status based upon record state if necessary 
   * @param int $userId
   */
  public function checkStatusChange($userId) {
    $newStatus = $this->determineStatus();
    if ($this->status != $newStatus) {
      switch ($newStatus) {
        case TrackItem::STATUS_ORDERED:
          $this->clearSchedInfo();
          $this->clearClosedInfo();
          break;
        case TrackItem::STATUS_SCHED:
          $this->schedBy = $userId;
          $this->clearClosedInfo();
          break;
        case TrackItem::STATUS_CLOSED:
          $this->closedBy = $userId;
          break;
      }
      $this->status = $newStatus;
    }
  }
  //
  private function determineStatus() {
    if ($this->closedDate) 
      return TrackItem::STATUS_CLOSED;
    if ($this->schedDate)
      return TrackItem::STATUS_SCHED;
    return TrackItem::STATUS_ORDERED;
  }
  private function clearSchedInfo() {
    $this->schedBy = null;
    // TODO: clear other sched fields?
  }
  private function clearClosedInfo() {
    $this->closedBy = null;
    $this->closedFor = null;
    $this->closedNotes = null;
    // TODO: clear other closed fields?
  }
  //
  public static function getConstants() {
    return Rec::getConstants('TrackItem');
  }
  /**
   * Static builders
   */
  public static function fromJsonObjects($objects) {
    return Rec::fromJsonObjects($objects, 'TrackItem');    
  }
  /**
   * @param int $ugid
   * @param int @userId
   * @param object $orderItem {'cid':#,'sid':#,'key':$,'tcat':$,'tdesc':$,'cpt':$}
   * @return TrackItem
   */
  public static function fromOrderItem($ugid, $userId, $orderItem) {
    return new TrackItem(
      null,
      $ugid, 
      $orderItem->cid,
      $orderItem->sid,
      $orderItem->key,
      $userId,
      null,
      $orderItem->tcat,
      $orderItem->tdesc,
      $orderItem->cpt,
      null,
      null,
      $userId
      );
  }
  /**
   * @param int $ugid
   * @param object $criteria {'cat':$,'cid':$}
   * @return TrackItem
   */
  public static function fromCriteria($ugid, $criteria) {
    $rec = new TrackItem();
    $rec->userGroupId = $ugid;
    $rec->ClientStub = new ClientStub();
    $rec->SessionStub = new SessionStub();
    $rec->UserStub_OrderBy = new UserStub();
    $rec->UserStub_SchedBy = new UserStub();
    $rec->UserStub_ClosedBy = new UserStub();
    if ($criteria) {
      $rec->trackCat = nullify($criteria->cat);
      $rec->ClientSub->clientId = $criteria->cid;
    }
    return $rec;
  }
  //
  /**
   * Static fetchers
   */
  public static function fetchByOrderKey($sid, $key) {
    $rec = new TrackItem();
    $rec->sessionId = $sid;
    $rec->key = $key;
    return SqlRec::fetchFirstBy($rec);
  }
  //
  public static function sort(&$recs) {
    usort($recs, array('TrackItem', 'cmp'));
  }
  public static function cmp($r1, $r2) {
    return Rec::compare($r1, $r2, array(
      'trackCat' => Rec::SORT_ASC,
      'closedDate' => Rec::SORT_ASC,
      'priority' => Rec::SORT_DESC,
    	'schedDate' => Rec::SORT_ASC,
    	'orderDate' => Rec::SORT_ASC,
      'trackDesc' => Rec::SORT_ASC));
  }
}
?>