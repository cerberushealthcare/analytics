/**
 * RecArray ReportStubs
 */
ReportStubs = Object.RecArray.extend({
  getItemProto:function() {
    return ReportStub;
  }
})
/**
 * Rec ReportStub
 */
ReportStub = Object.LevelRec.extend({
})
/**
 * ReportStub ReportCriteria
 *   RepCritRec Rec
 */
ReportCriteria = ReportStub.extend({
  //
  getProto:function(json) {
    return (json._tableName == 'Audits') ? AuditReportCriteria : this;
  },
  onload:function() {
    this.Rec = RepCritRec.revive(this.Rec);
    if (this.RecDenom)
      this.RecDenom = RepCritRec.revive(this.RecDenom);
    this.reviveResultRecs();
    this._dirty = false;
  },
  reviveResultRecs:function() {
    this.recs = RepRecs.revive(this.recs, RepRec.create());
    this.recsDenom = RepRecs.revive(this.recsDenom, RepRec.create());
  },
  addDenom:function() {
    this.type = ReportCriteria.TYPE_FRACTION;
    this.RecDenom = RepCritRec.revive(Json.decode(Json.encode(this.Rec, true)));
  },
  removeDenom:function() {
    this.type = ReportCriteria.TYPE_REGULAR;
    this.RecDenom = null;
  },
  addJoin:function(rec, join) {  // todo: fix this, should be on rec object and bubble up
    rec.Joins.add(join);
    this._dirty = true;
  },
  getRecName:function() {
    return this.Rec._name;
  },
  isTable:function(table) {
    return this.Rec.table_ == table;
  },
  isTypeFraction:function() {
    return this.type == ReportCriteria.TYPE_FRACTION;
  },
  isFractionable:function() {
    return this.Rec.table_ == RepCritRec.T_CLIENTS;
  },
  isEditable:function() {
    return ! this.isAppLevel() || me.admin; 
  },
  summary:function(joiner, rec) {
    rec = rec || this.Rec;
    var a = [rec._name + ' (' + rec.summary() + ')'];
    if (rec.Joins.length)
      a.push(rec.Joins.summary(joiner));
    return a.join(joiner || ' ');
  }
})
/**
 * ReportCriteria AuditReportCriteria
 */
AuditReportCriteria = ReportCriteria.extend({
  reviveResultRecs:function() {
    if (this.recs) 
      this.recs = RepRecs.revive(this.recs, AuditRec.create(this));
  }
})
/**
 * Rec RepCritRec
 *   RepCritJoin[] Joins
 */
RepCritRec = Object.Rec.extend({
  //
  _name:'Record',  // @abstract
  getProto:function(json) {
    switch (json.table_) {
      case RepCritRec.T_CLIENTS:
        return RepCrit_Client;
      case RepCritRec.T_ADDRESS:
        return RepCrit_Address;
      case RepCritRec.T_DIAGNOSES:
        return RepCrit_Diagnosis;
      case RepCritRec.T_SESSIONS:
        return RepCrit_Session;
      case RepCritRec.T_MEDS:
        return RepCrit_Med;
      case RepCritRec.T_MEDHIST:
        return RepCrit_MedHist;
      case RepCritRec.T_ALLERGIES:
        return RepCrit_Allergy;
      case RepCritRec.T_PROCS:
        return RepCrit_Proc;
      case RepCritRec.T_RESULTS:
        return RepCrit_ProcResult;
      case RepCritRec.T_IMMUNS:
        return RepCrit_Immun;
      case RepCritRec.T_VITALS:
        return RepCrit_Vital;
      case RepCritRec.T_AUDITS:
        return RepCrit_Audit;
      default:
        return this;
    }
  },
  onload:function(json) {
    for (var fid in json) 
      if (fid == 'Joins') 
        this.Joins = RepCritJoins.create().revive(json.Joins, RepCritJoin.create());
      else if (this._isCritValueFid(fid)) 
        this[fid] = this._getCritValueProto(fid).revive(json[fid]).setFidLabel(fid, this._getFidLabel(fid));
  },
  /*
   * @arg fn(RepCritValue) oneach
   */
  forEachValue:function(oneach) {
    for (var fid in this)
      if (this[fid] && this[fid]._fid)
        oneach(this[fid]);
  },
  /*
   * @arg RepCritValue cv
   */
  update:function(cv) {
    this[cv._fid] = cv;
  },
  /*
   * @arg RepCritJoin join 
   */
  dropJoin:function(join) {
    this.Joins.unset(join._i);
  },
  /*
   * @return string
   */
  summary:function() {
    var s = [];
    this.forEachValue(function(cv) {
      if (cv.hasData()) 
        s.push(cv.summary());
    })
    return (s.length == 0) ? 'Any' : s.join(' and ');
  },
  //
  _isCritValueFid:function(fid) {
    return ! fid.endsWith('_');
  },
  _getCritValueProto:function(fid) {
    return RepCritValue;  
  },
  _getFidLabel:function(fid) {
    return this._fixLabel(fid);
  },
  _fixLabel:function(fid) {
    return fid.substr(0, 1).toUpperCase() + fid.substr(1).replace(/([A-Z])/g, function($1){return " "+$1.toUpperCase()});
  }
})
/**
 * RepCritRec Subclasses
 */
RepCrit_Client = RepCritRec.extend({
  _name:'Patients',
  _getCritValueProto:function(fid) {
    switch (fid) {
      case 'age':
        return RepCritValueAge;
      case 'birth':
        return RepCritValueDate;
      case 'sex':
        return RepCritValueSex;
      case 'deceased':
        return RepCritValueBool;
      case 'ethnicity':
        return RepCritValueFixed.from(C_Client.ETHNICITIES);
      case 'race':
        return RepCritValueFixed.from(C_Client.RACES);
      default:
        return RepCritValue;
    }
  },
  _getFidLabel:function(fid) {
    switch (fid) {
      case 'uid':
        return 'Patient ID';
      case 'birth':
        return 'Birth Date';
      default:
        return RepCritRec._getFidLabel.call(this, fid);
    }
  }
})
RepCrit_Audit = RepCritRec.extend({
  _name:'Audits',
  _getCritValueProto:function(fid) {
    switch (fid) {
      case 'date':
        return RepCritValueDateWithinOver;
      case 'clientId':
        return RepCritValueRecPicker.from(ClientSelector);
      case 'userId':
        return RepCritValueRecPicker.from(UserSelector);
      case 'action':
        return RepCritValueFixed.from(AuditRec.ACTIONS);
      default:
        return RepCritValue;
    }
  },
  _getFidLabel:function(fid) {
    switch (fid) {
      case 'clientId':
        return 'Patient';
      case 'userId':
        return 'User';
      case 'recName':
        return 'Record';
      default:
        return RepCritRec._getFidLabel.call(this, fid);
    }
  }
}) 
RepCrit_Address = RepCritRec.extend({
  _name:'Address',
  _getCritValueProto:function(fid) {
    switch (fid) {
      case 'state':
        return RepCritValueFixed.from(C_Address.STATES);
      default:
        return RepCritValue;
    }
  },
  _getFidLabel:function(fid) {
    switch (fid) {
      case 'addr1':
        return 'Address 1';
      case 'addr2':
        return 'Address 2';
      case 'phone1':
        return 'Phone';
      case 'email1':
        return 'Email';
      default:
        return RepCritRec._getFidLabel.call(this, fid);
    }
  }
})
RepCrit_Diagnosis = RepCritRec.extend({
  _name:'Diagnoses',
  _getCritValueProto:function(fid) {
    switch (fid) {
      case 'active':
        return RepCritValueBool;
      case 'status':
        return RepCritValueFixed.from(C_Diagnosis.STATUSES);
      default:
        return RepCritValue;
    }
  },
  _getFidLabel:function(fid) {
    switch (fid) {
      case 'icd':
        return 'ICD Code';
      case 'text':
        return 'Description';
      default:
        return RepCritRec._getFidLabel.call(this, fid);
    }
  }
})
RepCrit_Session = RepCritRec.extend({
  _name:'Sessions',
  _getCritValueProto:function(fid) {
    switch (fid) {
      case 'templateId':
        return RepCritValueFixed.from(C_Templates);
      case 'dateService':
        return RepCritValueDateWithinOver;
      case 'closedBy':
        return RepCritValueRecPicker.from(UserSelector);
      default:
        return RepCritValue;
    }
  },
  _getFidLabel:function(fid) {
    switch (fid) {
      case 'templateId':
        return 'Template';
      case 'dateService':
        return 'Date of Service';
      default:
        return RepCritRec._getFidLabel.call(this, fid);
    }
  }
})
RepCrit_Med = RepCritRec.extend({
  _name:'Medications',
  _getCritValueProto:function(fid) {
    switch (fid) {
      case 'active':
        return RepCritValueBool;
      case 'drugSubclass':
        return RepCritValueRegex.from(C_DrugSubclasses);
      default:
        return RepCritValue;
    }
  },
  _getFidLabel:function(fid) {
    switch (fid) {
      case 'drugSubclass':
        return 'Subclass';
      default:
        return RepCritRec._getFidLabel.call(this, fid);
    }
  }
})
RepCrit_MedHist = RepCritRec.extend({
  _name:'Med History',
  _getCritValueProto:function(fid) {
    switch (fid) {
      case 'date':
        return RepCritValueDateWithinOver;
      case 'quid':
        return RepCritValueFixed.from(C_SessionMedNc.QUIDS);
      default:
        return RepCritValue;
    }
  },
  _getFidLabel:function(fid) {
    switch (fid) {
      case 'quid':
        return 'Type';
      default:
        return RepCritRec._getFidLabel.call(this, fid);
    }
  }
})
RepCrit_Allergy = RepCritRec.extend({
  _name:'Allergies',
  _getCritValueProto:function(fid) {
    switch (fid) {
      case 'active':
        return RepCritValueBool;
      default:
        return RepCritValue;
    }
  }
}) 
RepCrit_Proc = RepCritRec.extend({
  _name:'Procedures',
  _getCritValueProto:function(fid) {
    switch (fid) {
      case 'ipc':
        return RepCritValueRecPicker.from(IpcPicker);
      case 'date':
        return RepCritValueDateWithinOver;
      case 'providerId':
        return RepCritValueRecPicker.from(ProviderPicker);
      case 'addrFacility':
        return RepCritValueRecPicker.from(FacilityPicker);
      default:
        return RepCritValue;
    }
  },
  _getFidLabel:function(fid) {
    switch (fid) {
      case 'ipc':
        return 'IPC';
      case 'providerId':
        return 'Provider';
      case 'addrFacility':
        return 'Facility';
      default:
        return RepCritRec._getFidLabel.call(this, fid);
    }
  }
}) 
RepCrit_ProcResult = RepCritRec.extend({
  _name:'Results',
  _getCritValueProto:function(fid) {
    switch (fid) {
      case 'ipc':
        return RepCritValueRecPicker.from(IpcPicker);
      case 'date':
        return RepCritValueDateWithinOverWithinOver;
      case 'value':
        return RepCritValueNumeric;
      case 'interpretCode':
        return RepCritValueFixed.from(C_ProcResult.INTERPRET_CODES);
      default:
        return RepCritValue;
    }
  },
  _getFidLabel:function(fid) {
    switch (fid) {
      case 'ipc':
        return 'IPC';
      case 'interpretCode':
        return 'Interpretation'
      default:
        return RepCritRec._getFidLabel.call(this, fid);
    }
  }
}) 
RepCrit_Immun = RepCritRec.extend({
  _name:'Immunizations',
  _getCritValueProto:function(fid) {
    switch (fid) {
      case 'dateGiven':
        return RepCritValueDateWithinOver;
      default:
        return RepCritValue;
    }
  },
  _getFidLabel:function(fid) {
    switch (fid) {
      case 'manufac':
        return 'Manufacturer';
      default:
        return RepCritRec._getFidLabel.call(this, fid);
    }
  }
})
RepCrit_Vital = RepCritRec.extend({
  _name:'Vitals',
  _getCritValueProto:function(fid) {
    switch (fid) {
      case 'date':
        return RepCritValueDateWithinOver;
      default:
        return RepCritValueNumeric;
    }
  },
  _getFidLabel:function(fid) {
    switch (fid) {
      case 'bpSystolic':
        return 'Systolic';
      case 'bpDiastolic':
        return 'Diastolic';
      case 'wt':
        return 'Weight';
      case 'hc':
        return 'Head';
      case 'wc':
        return 'Waist';
      case 'bmi':
        return 'BMI';
      default:
        return RepCritRec._getFidLabel.call(this, fid);
    }
  }
}) 
/*
 * RecArray IndexedRecArray
 */
IndexedRecArray = Object.RecArray.extend({
  getItemProto:function(jsons) {},
  //
  onload:function() {
    this.reindex();
  },
  reindex:function() {
    this.forEach(function(rec, i) {
      rec._i = i;
    })
  },
  add:function(rec) {
    this.push(rec);
    this.reindex();
  },
  drop:function(rec) {
    this.unset(rec._i);
    this.reindex();
  }
})
/*
 * IndexedRecArray RepCritJoins 
 */
RepCritJoins = IndexedRecArray.extend({
  onload:function(itemProto) { 
    itemProto.bubble('onempty', this.join_onempty.bind(this));
    this.reindex();
  },
  add:function(json) {
    IndexedRecArray.add.call(this, this.itemProto.revive(json));
  },
  join_onempty:function(join) {
    this.drop(join);
  },
  summary:function(joiner) {
    var a = [];
    this.forEach(function(j) {
      a.push(j.summary());
    })
    return (a.length) ? a.join(joiner || ' and ') : '';
  }
})
/**
 * Rec RepCritJoin
 *   RepCritRec[] Recs
 */
RepCritJoin = Object.Rec.extend({
  onempty:function(join) {},
  //
  getJoinTypeLabel:function() {
    return this.JTS[this.jt];
  },
  getCountLabel:function() {
    if (this.isCountType())
      return this.ct;  
  },
  getJoinTypeCount:function() {
    return [this.getJoinTypeLabel(), this.getCountLabel()].filter().join(' ');
  },
  isCountType:function() {
    switch (this.jt) {
      case this.JT_HAVE_CT:
      case this.JT_HAVE_CT_LT:
      case this.JT_HAVE_CT_GT:
        return true;
    }
  },
  getRecName:function() {
    if (this.Recs)
      return this.Recs[0]._name;
  },
  summary:function() {
    return this.getJoinTypeCount() + ' ' + this.getRecName() + ' ' + this.Recs.summary();  
  },
  onload:function() {
    this.Recs = RepCritRecs.revive(this.Recs);
  },
  allowable:function() {
    if (this.Recs && this.Recs.length > 1)
      return [this.JT_HAVE_ONE, this.JT_HAVE_ALL, this.JT_NOT_HAVE_ANY];
    else
      return [this.JT_HAVE, this.JT_HAVE_CT, this.JT_HAVE_CT_LT, this.JT_HAVE_CT_GT, this.JT_NOT_HAVE];
  },
  updateJoinType:function(jt) {
    this.jt = jt;
    if (this.isCountType())
      this.ct = this.ct || 1;
  },
  updateCount:function(ct) {
    this.ct = ct;
  },
  remove:function() {
    this.Recs = RepCritRecs.revive([]);
    this.onempty(this);
  },
  add:function(rec) {
    this.Recs.add(rec);
    if (this.Recs.length == 2) 
      this.jt = (this.jt == this.JT_NOT_HAVE) ? this.JT_NOT_HAVE_ANY : this.JT_HAVE_ALL;
  },
  drop:function(rec) {
    this.Recs.drop(rec);
    switch (this.Recs.length) {
      case 1:
        this.jt = (this.jt == this.JT_NOT_HAVE_ANY) ? this.JT_NOT_HAVE : this.JT_HAVE;
        break;
      case 0:
        this.onempty(this);
        break;
    }
  }
})
/**
 * IndexedRecArray RepCritRecs
 */
RepCritRecs = IndexedRecArray.extend({ 
  getItemProto:function() {
    return RepCritRec; 
  },
  summary:function() {
    var a = [];
    this.forEach(function(rec) {
      a.push(rec.summary());
    })
    return '(' + a.join(', ') + ')'; 
  }
})
/**
 * Rec RepCritValue
 */
RepCritValue = Object.Rec.extend({
  //
  /*
   * @arg string fid 'clientId'
   * @arg string label 'Patient ID'
   */
  setFidLabel:function(fid, label) {
    this._fid = fid;
    this._label = label;
    return this;
  },
  /*
   * @arg string op OP_
   * @arg string value
   */
  update:function(op, value) {
    this.op = String.nullify(op);
    this.value = String.nullify(value);
    if (this.op == null) {
      this.text_ = null;
    }
    return this;
  },
  isValueless:function() {
    return this.op == RepCritValue.OP_NULL || this.op == RepCritValue.OP_NOT_NULL;  
  },
  hasData:function() {
    return this.op && (this.value || this.isValueless());
  },
  /*
   * @return string
   */
  summary:function() {
    var s = this._label.toUpperCase() + ' ' + this.OPS[this.op];
    if (! this.isValueless())
      s += ' "' + (this.text_ ? this.text_ : this.value) + '"';
    return s;
  },
  //
  getFixedOps:function() {  
    return [RepCritValue.OP_EQ, RepCritValue.OP_NEQ, RepCritValue.OP_START, RepCritValue.OP_CONTAIN, RepCritValue.OP_NULL, RepCritValue.OP_NOT_NULL];
  }
})
/**
 * RepCritValue Subclasses
 */
RepCritValueNumeric = RepCritValue.extend({
  getFixedOps:function() {
    return [RepCritValue.OP_EQ, RepCritValue.OP_NEQ, RepCritValue.OP_LTN, RepCritValue.OP_GTN, RepCritValue.OP_BETWEEN, RepCritValue.OP_NULL, RepCritValue.OP_NOT_NULL];  
  }
})
RepCritValueAge = RepCritValue.extend({ 
  getFixedOps:function() {
    return [RepCritValue.OP_EQ, RepCritValue.OP_NEQ, RepCritValue.OP_OLDER, RepCritValue.OP_YOUNGER, RepCritValue.OP_AGERANGE, RepCritValue.OP_NULL, RepCritValue.OP_NOT_NULL];
  }
})
RepCritValueFixed = RepCritValue.extend({
  getFixedOps:function() {
    return [RepCritValue.OP_IS, RepCritValue.OP_IS_NOT, RepCritValue.OP_NULL, RepCritValue.OP_NOT_NULL]; 
  },
  from:function(values) {
    return this.extend({
      getFixedValues:function() {
        return values;
      }
    }) 
  }
})
RepCritValueRegex = RepCritValueFixed.extend({
  getFixedOps:function() {
    return [RepCritValue.OP_REGEX, RepCritValue.OP_NOT_REGEX]; 
  }
})
RepCritValueSex = RepCritValueFixed.from({'M':'Male','F':'Female'});
RepCritValueBool = RepCritValueFixed.from({'1':'Yes','0':'No'});
//
RepCritValueDate = RepCritValue.extend({
  getFixedOps:function() {
    return [RepCritValue.OP_ON, RepCritValue.OP_NOT_ON, RepCritValue.OP_BEFORE, RepCritValue.OP_AFTER, RepCritValue.OP_NULL, RepCritValue.OP_NOT_NULL];
  },
  getPicker:function() {
    return QuestionDateEntry;
  }
})
RepCritValueDateWithinOver = RepCritValue.extend({
  getFixedOps:function() {
    return [RepCritValue.OP_ON, RepCritValue.OP_NOT_ON, RepCritValue.OP_BEFORE, RepCritValue.OP_AFTER, RepCritValue.OP_WITHIN, RepCritValue.OP_OVER, RepCritValue.OP_NULL, RepCritValue.OP_NOT_NULL];
  },
  getPicker:function() {
    return QuestionDateEntry;
  }
})
//
RepCritValueRecPicker = RepCritValue.extend({
  getFixedOps:function() {
    return [RepCritValue.OP_IS, RepCritValue.OP_IS_NOT];  
  },
  from:function(picker) {
    return this.extend({
      getRecPicker:function() {
        return picker;
      }
    })
  }
})
/**
 * RecArray RepRecs
 * Data records result of criteria query
 */
RepRecs = Object.RecArray.extend({
  joinCt:null,
  joinTables:null,
  //
  onload:function(itemProto) {
    this.joinTables = [];
    itemProto.joinFids = [];
    var rec = this.current();
    for (var fid in rec) { 
      if (fid.beginsWith('Join') && rec[fid]) {
        itemProto.joinFids.push(fid);
        this.joinTables.push(rec[fid].current()._table);
      }
    }
    this.joinCt = this.joinTables.length;
  } 
})
/**
 * Rec RepRec
 */
RepRec = Object.Rec.extend({
  joinFids:null,  // ['fid',..]
  /*
   * @return [JoinData,..]
   */
  getJoinDatas:function() {
    var js = [];
    for (var i = 0; i < this.joinFids.length; i++) 
      js.push(JoinData.from(this[this.joinFids[i]]));
    return js;
  }
})
/**
 * JoinData
 */
JoinData = {
  table:null,
  labels:null,
  /*
   * @arg RepRecJoin repRecJoin
   * @return JoinData {'table':'Table','labels':['label'..]}
   */
  from:function(repRecJoin) {
    var rec = Object.create();
    rec.table = RepCritRec.TABLES[repRecJoin.current()._table];
    rec.labels = Array.from(repRecJoin, '_label');
    return rec;
  }
}
/**
 * RepRec AuditRec
 *   Snapshot before
 *   Snapshot after
 */
AuditRec = RepRec.extend({
  /*
   * @arg ReportCriteria report
   */
  create:function(report) {
    this.report = report;
    return RepRec.create.call(this);
  },
  onload:function() {
    this._label = this._label.ellips(50);
    this.Snapshot = Snapshot.create(this);
    this.before = this.Snapshot.revive(this.before);
    this.after = this.Snapshot.revive(this.after);
  }
})
/**
 * Rec Snapshot
 */
Snapshot = Object.Rec.extend({
  oncreate:function(audit) {
    this.audit = audit;
  },
  onload:function(json) {
    this.json = json;
  },
  getSnapshot:function() {
    if (this._snap == null)
      this.build();
    return this._snap;
  },
  build:function() {
    if (this.json) {
      this._snap = {};  
      var d;
      for (var fid in this.json) {
        if (this.reportable(fid)) 
          this._snap[fid] = this.decorate(fid);
      }
    }
  },
  reportable:function(fid) {
    if (fid.beginsWith('_'))
      return false;
    switch (fid) {
      case 'userGroupId':
      case 'clientId':
        return false;
    }
    return true;
  },
  decorate:function(fid) {
    var v = this.json[fid];
    var d = this.getDecorator(fid, v);
    if (fid.endsWith('Date'))
      return (d) ? d : v;
    return (d) ? v + ' (' + d + ')' : v;
  },
  getDecorator:function(fid, v) {
    switch (fid) { 
      case 'active':
      case 'asNeeded':
      case 'meals':
        return (v == '1') ? 'Yes' : 'No';
      case 'clientId':
        if (v == this.audit.clientId.value)
          return this.audit.clientId.text_;
      case 'orderBy':
      case 'schedBy':
      case 'closedBy':
      case 'userId':
        return C_Users[v];
    }
    return this.json["_" + fid];
  }
})
