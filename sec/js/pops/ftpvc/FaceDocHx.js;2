/**
 * Facesheet Doc/Appt History
 * Global static 
 * Requires: TableLoader.js, facesheet.css
 */
FaceDocHx = {
  fs:null,
  zoom:null,
  _scb:null,
  _POP:'fsp-his',  
  /*
   * callback(facesheet) if anything changed (calls page.hxChangedCallback by default)
   */
  pop:function(fs, tab, zoom, callback) {
    overlayWorking(true);
    this.fs = fs;
    this.changed = false;
    this.zoom = zoom;
    this._scb = Ajax.buildScopedCallback(denull(callback, 'hxChangedCallback'));
    var self = this;
    Includer.get([Includer.HTML_FACE_DOC_HX, Includer.LIB_FACE_UI, Includer.AP_TEMPLATE_POPS, Includer.JS_TEMPLATE_POPS], function() {
      new TabBar(FaceDocHx._POP, 
        ['Documentation History','Appointment History','Message History'], 
        ['Documents','Appointments','Messages'],
        tab,
        ['fsp-his-head','fsp-hisa-head','fsp-hism-head']);
      if (fs.client) {
        setCaption("fsp-his-cap-text", fs.client.name + " - Documentation/Visits");
      }
      self._load();
    });
  },
  fpClose:function() {
    closeOverlayPop();
    if (this.changed) 
      Ajax.callScopedCallback(this._scb, this.fs);
  },
  //
  _load:function() {
    var fs = this.fs;
    var hist = fs.clientHistory;
    var self = this;
    if (hist && hist.all) {
      var tp = new TableLoader("fsp-his-tbody", "off", "fsp-his-div", "fsp-his-head");
      var tpa = new TableLoader("fsp-hisa-tbody", "off", "fsp-hisa-div", "fsp-hisa-head");
      var tpm = new TableLoader("fsp-hism-tbody", "off", "fsp-hism-div", "fsp-hism-head");
      tp.defineFilter(this.histFilter(), function(t){self.hisFilterCallback(t)});
      tpa.defineFilter(this.histaFilter());
      tpm.defineFilter(this.histmFilter());
      tp.tpa = tpa;
      tp.tpm = tpm;
      tp.batchLoad(hist.all, function(tp, e){self.renderClientHistoryRow(tp, e)}, TableLoader.EOF_CALLBACK);
    }
  },
  renderClientHistoryRow:function(tp, e) {
    var fs = this.fs;
    if (e) {
      if (e.type == 0) {
        var appt = fs.clientHistory.appts[e.id];
        if (appt) {
          tp = tp.tpa;
          tp.createTr(appt.date, [appt.date], this.histaFilter(appt));
          tp.createTd("bold", appt.date);
          tp.createTdAppend(null, page.docTile.createApptAnchor(fs, appt.id));
          if (appt.comment) {
            var line = 'Comment: ' + appt.comment;
            tp.append(createDiv(null, "tagline", null, line));
          }
        }
      } else if (e.type == 1) {
        var sess = fs.clientHistory.sessions[e.id];
        if (sess) {
          tp.createTr(sess.date, [sess.date], this.histFilter(sess), sess.id);
          tp.createTd("bold", sess.date);
          tp.createTdAppend(null, FaceUi.createSessionAnchor(fs, sess.id, true, "preview2"));
          var line = "Last updated " + sess.updated;
          if (sess.updatedBy) line += " by " + sess.updatedBy;
          tp.append(createDiv(null, "tagline", null, line));
        }
      } else {
        var msg = fs.clientHistory.msgs[e.id];
        if (msg) {
          tp = tp.tpm;
          tp.createTr(msg.date, [msg.date], this.histmFilter(msg));
          tp.createTd("bold", msg.date);
          tp.createTdAppend(null, page.docTile.createMsgAnchor(fs, msg.mtid));
          var line = 'Created by ' + msg.creator;
          tp.append(createDiv(null, "tagline", null, line));
        }      
      }
    } else {
      tp.loadFilterSidebar("his-filter-ul", TableLoader.NO_FILTER_COUNT);
      tp.tpa.loadFilterSidebar("hisa-filter-ul", TableLoader.NO_FILTER_COUNT);
      tp.tpm.loadFilterSidebar("hism-filter-ul", TableLoader.NO_FILTER_COUNT);
      overlayWorking(false);
      if (this.zoom) {
        zoomPop(FaceDocHx._POP);
      } else {
        showOverlayPop(FaceDocHx._POP);
      }
    }
  },
  histFilter:function(e) {
    var fs = this.fs;
    var docType = null;
    var docStatus = null;
    if (e) {
      var sess = fs.clientHistory.sessions[e.id];
      docType = sess.title;
      docStatus = (sess.closed) ? "Closed" : "Open";
    }
    return {
        "Document Type":docType,
        "Status":docStatus    
        };
  },
  histaFilter:function(e) {
    var fs = this.fs;
    var type = null;
    var status = null;
    if (e) {
      var appt = fs.clientHistory.appts[e.id];
      type = appt.type;
      status = appt.status;
    }
    return {
        "Appt Type":type,
        "Status":status    
        };
  },
  histmFilter:function(e) {
    var fs = this.fs;
    //var subject = null;
    var creator = null;
    if (e) {
      var msg = fs.clientHistory.msgs[e.mtid];
      //subject = msg.subject;
      creator = msg.creator;
    }
    return {
        //"Subject":subject,
        "Creator":creator
        };
  },
  hisFilterCallback:function(t) {
    var fs = this.fs;
    var stubs = {};
    var keys = t.getVisibleRowKeys();
    for (var i = 0; i < keys.length; i++) {
      stubs[keys[i]] = fs.clientHistory.sessions[keys[i]]; 
    }
    fs.clientHistory.filteredSessions = stubs;
  }
};
