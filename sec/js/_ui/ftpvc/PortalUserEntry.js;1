/**
 * AnchorPicker PortalUserPicker
 */
PortalUserPicker = {
  create:function() {
    return Html.AnchorPicker.create('patient', 'Select Patient Recipient', 'Patient Login Selector').extend(function(self) {
      return {
        init:function() {
          self.thead().tr('fixed head').th('Patient').w('60%').th('ID').w('20%').th('Birth').w('20%');
        },
        buttons:function(cmd) {
          cmd.add('Add New Patient Login...', self.new_onclick).cancel(self.pop.close);
        },
        fetch:function(callback_recs) {
          Ajax.UserGroup.getPortalUsers(callback_recs);
        },
        applies:function(rec, search) {
          if (search)
            return rec.Client.name.match(search);
          return true;
        },
        add:function(rec, tr) {
          tr.select(rec, AnchorClient.create(rec.Client)).td(rec.Client.uid).td(rec.Client.birth);
        },
        getValueFrom:function(rec) {
          return rec.portalUserId;
        },
        getTextFrom:function(rec) {
          return rec.Client.name;
        },
        //
        new_onclick:function() {
          NewPortalUserEntry.pop(null, self.pop_onsave); 
        },
        pop_onsave:function(rec) {
          self.pop.clean();
          self.pop.select(rec);
        }
      }
    })
  }
}
/**
 * RecordEntryDeletePop ProviderEntry
 */
var QUESTIONS = {'0':'What city were you born?','1':'What was the name of your favorite pet?','CUSTOM':'Custom...'};
NewPortalUserEntry = {
  pop:function(onsave) {
    NewPortalUserEntry = this.create(onsave).pop();
  },
  create:function(onsave) {
    var self = Html.RecordEntryDeletePop.create('Provider Entry', 700);
    return self.aug({
      buildForm:function(ef) {
        ef.aug({
          showCustom:function(i) {
            var li = ef['licq' + i];
            var fid = 'cq' + i;
            if (ef.getValue('_scq' + i) == 'CUSTOM') {
              li.show();
              if (ef.getValue(fid) == '')
                ef.setValue(fid, 'Enter custom question');
              ef.focus(fid);
            } else {
              li.hide();
            }
          }
        })
        ef.li(' ').client();
        ef.li('Login ID', 'mt10').textbox('uid', 10).check('auto-uid', 'Auto generate');
        ef.li('Password').textbox('pw', 20);
        ef.li('Security 1').select('_scq1', QUESTIONS, '', ef.showCustom.curry(1));
        ef.li(' ', 'mb5', null, 'licq1').textbox('cq1', 60);
        ef.li('Security 2').select('_scq2', QUESTIONS, '', ef.showCustom.curry(2));
        ef.li(' ', 'mb5', null, 'licq2').textbox('cq2', 60);
        ef.li('Security 3').select('_scq3', QUESTIONS, '', ef.showCustom.curry(3));
        ef.li(' ', 'mb5', null, 'licq3').textbox('cq3', 60);
        ef.licq1 = _$('licq1').hide();
        ef.licq2 = _$('licq2').hide();
        ef.licq3 = _$('licq3').hide();
      },
      save:function(rec, callback) {
        rec = NewPortalUser.revive(rec);
        Ajax.UserGroup.createPortalUser(rec, callback);
      },
      remove:function(rec, callback) {
//        Ajax.Providers.remove(rec.providerId, callback);
      }
    })
  }
}
/**
 * Rec NewPortalUser
 */
NewPortalUser = Object.Rec.extend({
  onload:function(json) {
    this.setCqs();
  },
  setCqs:function() {
    for (var i = 1; i <= 3; i++)  
      this.setCq(i);
  },
  setCq:function(i) {
    var qkey = this['_scq' + i]; 
    if (qkey != 'CUSTOM')
      this['cq' + i] = QUESTIONS[qkey];
  }
})