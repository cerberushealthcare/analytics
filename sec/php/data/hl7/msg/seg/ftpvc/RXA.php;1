<?php
require_once 'php/data/hl7/msg/seg/_HL7Segment.php';
//
/**
 * Pharmacy/Treatment Admininstration
 * @author Warren Hornsby
 */
class RXA extends HL7Segment {
  //
  public $segId = 'RXA';
  public $giveSubId;  // 1: Give Sub-ID Counter (NM)
  public $adminSubId;  // 2: Administration Sub-ID Counter (NM)
  public $startAdmin = 'TS';  // 3: Date/Time Start of Administration (TS)
  public $endAdmin = 'TS';  // 4: Date/Time End of Administration (TS)
  public $code = 'CE';  // 5: Administered Code (CE)
  public $amount;  // 6: Administered Amount (NM)
  public $units = 'CE';  // 7: Administered Units (CE)
  public $dosage = 'CE';  // 8: Administered Dosage Form (CE)
  public $notes = 'CE';  // 9: Administration Notes (CE)
  public $provider = 'XCN';  // 10: Administering Provider (XCN)
  public $location;  // 11: Administered-at Location (LA2)
  public $per;  // 12: Administered Per (Time Unit) (ST)
  public $strength;  // 13: Administered Strength (NM)
  public $strengthUnits;  // 14: Administered Strength Units (CE)
  public $lot;  // 15: Substance Lot Number (ST)
  public $expiration;  // 16: Substance Expiration Date (TS)
  public $manufac = 'CE';  // 17: Substance Manufacturer Name (CE)
  public $refusal = 'CE';  // 18: Substance/Treatment Refusal Reason (CE)
  public $indication = 'CE';  // 19: Indication (CE)
  public $completion;  // 20: Completion Status (ID)
  public $action;  // 21: Action Code - RXA (ID)
  public $entryDate;  // 22: System Entry Date/Time (TS)
  public $volume;  // 23: Administered Drug Strength Volume (NM)
  public $volumeUnits;  // 24: Administered Drug Strength Volume Units (CWE)
  public $barcode;  // 25: Administered Barcode Identifier (CWE)
  public $rxOrderType;  // 26: Pharmacy Order Type (ID)
  //
  static function from($fs) {
    if ($fs->Immun_HL7) {
      HL70292::loadIds($fs->Immun_HL7->CVX);
      HL70227::loadIds($fs->Immun_HL7->MVX);
    }
    if ($fs->Immuns) {
      $recs = array();
      foreach ($fs->Immuns as $imm)
        $recs[] = static::fromImmun($imm, $fs->Immun_HL7);
      return $recs;
    } 
  }
  static function fromImmun($imm) {
    $me = self::asEmpty();
    $me->giveSubId = 0;
    $me->adminSubId = 1;
    $me->startAdmin = TS::fromDate($imm->dateGiven);
    $me->endAdmin = TS::fromDate($imm->dateGiven);
    $me->code = CE_Immun::fromImmun($imm);
    $me->units = CE_Units::fromImmun($imm);
    $me->lot = $imm->lot;
    $me->manufac = CE_ImmunManufac::fromImmun($imm);
    $me->action = 'A';
    return $me;
  }
}
