<?php
require_once 'php/data/rec/sql/_SqlRec.php';
//
/**
 * SqlLevelRec
 * Allows new group-level records to be created (but app-levels cannot be overridden)
 */
abstract class SqlLevelRec extends SqlRec {
  /*
  public $someId;
  public $someId2;  // optional; if used, must override $ID_FIELD_COUNT
  public $userGroupId;
  public ..  // rest of fields 
  */
  static $ID_FIELD_COUNT = 1;  // number of override if using more than one ID field
  static $FIRST_CUSTOM_ID = 100; 
  //
  const APP_LEVEL_UGID = '0';
  //
  public function getPkFieldCount() {
    return static::$ID_FIELD_COUNT + 1;
  }
  public function fetchForAudit() {
    logit_r($this, 'fetchForAudit');
    logit_r($this->getPkValues(), 'getPkValues');
    return static::fetch($this->getPkValues());
  }
  public function isAppLevel() {
    return static::isAppLevelUgid($this->userGroupId);
  }
  public function setUserGroupCriteria($ugid) {
    $this->userGroupId = CriteriaValues::_or(CriteriaValue::equals(static::APP_LEVEL_UGID), CriteriaValue::equals($ugid)); 
  }
  public function setAppLevelCriteria() {
    $this->userGroupId = static::APP_LEVEL_UGID;
  }
  //
  static function fetchAppLevel($id) {
    $c = new static($id);
    $c->setAppLevelCriteria();
    return static::fetchOneBy($c);
  }
  /**
   * Fetch topmost level for primary key
   * @param int $id
   * @param int $ugid
   * @return SqlLevelRec for group-level if exists, else app-level
   */
  static function fetchTopLevel($id, $ugid) {
    $c = new static($id);
    $c->setUserGroupCriteria($ugid);
    $recs = static::fetchAllBy($c->setFetchCriteria(), new RecSort('-userGroupId'));
    return current($recs);
  }
  /**
   * Calculate next available custom ID 
   * @param int $ugid
   * @return int >= static::$FIRST_CUSTOM_ID
   */
  static function getNextCustomId($ugid) {
    $me = new static();
    $col = $me->getIdField();
    $table = $me->getSqlTable();
    $max = Dao::fetchValue("SELECT MAX($col) FROM $table WHERE user_group_id=$ugid");
    if ($max)
      return intval($max) + 1;
    else
      return static::$FIRST_CUSTOM_ID;
  }
  /**
   * @param int $ugid
   * @return SqlLevelRec 
   */
  static function asCriteria($ugid) {
    $c = new static();
    $c->setUserGroupCriteria($ugid);
    return $c; 
  }
  static function asAppLevelCriteria() {
    $c = new static();
    $c->setAppLevelCriteria();
    return $c;
  }
  static function isAppLevelUgid($ugid) {
    return $ugid == static::APP_LEVEL_UGID;
  }
  //
  protected function getId() {
    $values = $this->getIdValues();
    return implode(',', $values);
  }
  protected function getIdValues() {
    reset($this);
    $values = array(current($this));
    for ($i = 1; $i < static::$ID_FIELD_COUNT; $i++) 
      $values[] = next($this);
    return $values;
  }
  protected function getIdFids() {
    static $fids;
    if ($fids == null)
      $fids = array_slice(array_keys(get_object_vars($this)), 0, static::$ID_FIELD_COUNT);
    return $fids;
  }
  protected function getIdField() {
    static $field;
    if ($field === null) {
      reset($this);
      $fid = key($this);
      $field = static::camelToSql($fid);
    }
    return $field;
  }
  protected function getListKey() {  // first column value is "true" PK for lists (top levels fetched)
    return $this->getId();
  }
  protected function getListValue() {  // assumes 'name' for lists, override if other
    return $this->name;
  }
  protected function authenticateUserGroupId($ugid, $forReadOnly = false) {
    if ($ugid instanceof CriteriaValues) {
      $ugids = $ugid->getInnerValues();
      foreach ($ugids as $ug) 
        $this->authenticateUserGroupId($ug, $forReadOnly);
    } else {
      if (static::isAppLevelUgid($ugid)) {
        if ($forReadOnly) {
          return;  // OK for all to read
        } else {
          global $login;
          if ($login->admin)  
            return;  // OK for admins to update
          else
            throw new SecurityException('Admin-only operation for ' . $this->getMyName());
        }
      }
      parent::authenticateUserGroupId($ugid, $forReadOnly);
    }
  }
  protected static function getRowPk($row) {
    $ct = static::getPkFieldCount();
    return join('|', array_slice($row, 0, $ct));
  }
}
/**
 * SqlGroupLevelRec
 * Allows new group-level records and overrides of app-levels
 */
abstract class SqlGroupLevelRec extends SqlLevelRec implements CompositePk {
  //
  public function getPkFieldCount() {
    return static::$ID_FIELD_COUNT + 1; 
  }
  public function getFlattenSort() {
    return new RecSort($this->getIdFids(), '-userGroupId'); 
  }
  //
  static function fetchTopLevelsBy($c) {
    $recs = static::fetchAllBy($c, $c->getFlattenSort());
    $recs = static::flatten($recs);
    return $recs;
  }
  /**
   * Fetch topmost levels 
   * @param int $ugid
   * @param int $id (optional)
   * @return array(SqlLevelRec,..)
   */
  static function fetchTopLevels($ugid, $id = null) {
    $c = new static($id);
    $c->setUserGroupCriteria($ugid);
    $recs = static::fetchAllBy($c->setFetchCriteria(), $c->getFlattenSort());
    $recs = static::flatten($recs, $id);
    return $recs;
  }
  /**
   * Fetch topmost levels as filtered list (for UI selection)
   * @param int $ugid
   * @return array('id'=>'value',..)
   */
  static function fetchList($ugid) {
    $recs = static::fetchTopLevels($ugid);
    $recs = static::filter($recs);
    $recs = static::map($recs);
    return $recs;
  }
  static function getListJson() {
    global $login;
    $ugid = $login->userGroupId;
    return jsonencode(static::fetchList($ugid));
  }
  //
  protected static function flatten($recs, $id = null) {
    //logit_r($recs, 'flatten ' . $id);
    $top = current($recs);
    $tops = array($top);
    if (empty($id)) {
      for ($i = 1, $j = count($recs); $i < $j; $i++) {
        $rec = $recs[$i];
        //logit_r('getId: ' . $rec->getId() . ',' . $top->getId());
        if ($rec->getId() != $top->getId()) {
          $top = $rec;
          $tops[] = $top;
        }
      }
    }
    //logit_r($tops, 'tops');
    return $tops;
  }
  protected static function filter($recs, $fid = 'active') {
    $filtered = array();
    foreach ($recs as $rec) {
      if ($rec->$fid) 
        $filtered[] = $rec;
    }
    return $filtered;
  }
  protected static function map($recs) {
    $map = null;
    foreach ($recs as $rec)
      $map[$rec->getListKey()] = $rec->getListValue();
    return $map; 
  }
}
/**
 * Client Level Rec
 * Adds client-level (non-null CID) to app-level and group-level
 */
abstract class SqlClientLevelRec extends SqlGroupLevelRec {
  /*
  public $someId;
  public $userGroupId;
  public $clientId;
  public ..  // rest of fields 
  */
  const GROUP_LEVEL_CID = '0';
  //
  public function getPkFieldCount() {
    return static::$ID_FIELD_COUNT + 2; 
  }
  public function isGroupLevel() {
    return ! $this->isAppLevel() && static::isGroupLevelCid($this->clientId);
  }
  public function isClientLevel($cid = null) {
    return ($cid) ? $this->clientId == $cid : $this->clientId > 0;
  }
  public function setClientLevelCriteria($cid) {
    if ($cid)
      $this->clientId = CriteriaValues::_or(CriteriaValue::equals(static::GROUP_LEVEL_CID), CriteriaValue::equals($cid));
    else
      $this->clientId = static::GROUP_LEVEL_CID; 
  }
  public function getFlattenSort() {
    return new RecSort($this->getIdFids(), '-clientId', '-userGroupId');
  }
  //
  /**
   * Fetch topmost level for primary key
   * @param int $id
   * @param int $ugid
   * @param int $cid (optional)
   * @return SqlLevelRec for client-level if exists, else group-level if exists, else app-level
   */
  static function fetchTopLevel($id, $ugid, $cid = null) {
    return current(static::fetchTopLevels($ugid, $cid, $id));
  } 
  /**
   * Fetch topmost levels (excludes client levels)
   * @param int $ugid
   * @param int $cid (optional)
   * @param int $id (optional)
   */
  static function fetchTopLevels($ugid, $cid = null, $id = null) {
    $c = new static($id);
    $c->setUserGroupCriteria($ugid);
    $c->setClientLevelCriteria($cid);
    $recs = static::fetchAllBy($c->setFetchCriteria(), $c->getFlattenSort());
    //logit_r($recs, 'before flatten');
    $recs = static::flatten($recs, $id);
    //logit_r($recs, 'after flatten');
    return $recs;
  }
  /**
   * Fetch levels overriden at client level
   * @param int $ugid
   */
  static function fetchClientLevels($ugid) {
    $c = static::asClientLevelCriteria($ugid);
    $recs = static::fetchAllBy($c);
    return $recs;
  }
  /**
   * @param int $ugid
   * @param int cid (optional)
   * @return SqlClientLevelRec 
   */
  static function asCriteria($ugid, $cid = null) {
    $c = parent::asCriteria($ugid);
    $c->setClientLevelCriteria($cid);
    return $c;
  }
  static function asClientLevelCriteria($ugid) {
    $c = new static();
    $c->userGroupId = $ugid;
    $c->clientId = CriteriaValue::greaterThanNumeric(0);
    return $c;
  }
  static function isGroupLevelCid($cid) {
    return $cid == static::GROUP_LEVEL_CID;
  }
  //
  protected function authenticateClientId($clientId, $forReadOnly = false) {
    if ($forReadOnly)
      return;  // OK for all to read; UGID is already required
    if (static::isGroupLevelCid($clientId)) {
      return;
      //global $login;
      //if ($login->admin)  
      //  return;  // OK for admins to update
      //else
      //  throw new SecurityException('Admin-only operation for ' . $this->getMyName());
    }
    parent::authenticateClientId($clientId, $forReadOnly);
  }
}
/**
 * User Level Rec
 * Adds user-level (non-null userId) to app-level and group-level
 */
abstract class SqlUserLevelRec extends SqlGroupLevelRec {
  /*
  public $someId;
  public $userGroupId;
  public $userId;
  public ..  // rest of fields 
  */
  const GROUP_LEVEL_USER_ID = '0';
  //
  public function getPkFieldCount() {
    return static::$ID_FIELD_COUNT + 2; 
  }
  public function isGroupLevel() {
    return ! $this->isAppLevel() && static::isGroupLevelUserId($this->userId);
  }
  public function isUserLevel($userId = null) {
    return ($userId) ? $this->userId == $userId : $this->userId > 0;
  }
  public function setUserLevelCriteria($userId) {
    if ($userId)
      $this->userId = CriteriaValues::_or(CriteriaValue::equals(static::GROUP_LEVEL_USER_ID), CriteriaValue::equals($userId));
    else
      $this->userId = static::GROUP_LEVEL_USER_ID; 
  }
  //
  /**
   * Fetch topmost level for primary key
   * @param int $id
   * @param int $ugid
   * @param int $userId (optional)
   * @return SqlLevelRec for client-level if exists, else group-level if exists, else app-level
   */
  static function fetchTopLevel($id, $ugid, $userId = null) {
    return current(static::fetchTopLevels($ugid, $userId, $id));
  } 
  /**
   * Fetch topmost levels 
   * @param int $ugid
   * @param int $userId (optional)
   * @param int $id (optional)
   */
  static function fetchTopLevels($ugid, $userId = null, $id = null) {
    $c = new static($id);
    $c->setUserGroupCriteria($ugid);
    $c->setUserLevelCriteria($userId);
    $recs = static::fetchAllBy($c->setFetchCriteria(), new RecSort($c->getIdFids(), '-userId', '-userGroupId'));
    return static::flatten($recs, $id);
  }
  /**
   * @param int $ugid
   * @param int userId (optional)
   * @return SqlUserLevelRec 
   */
  static function asCriteria($ugid, $userId = null) {
    $c = parent::asCriteria($ugid);
    $c->setUserLevelCriteria($userId);
    return $c;
  }
  static function isGroupLevelUserId($userId) {
    return $userId == static::GROUP_LEVEL_USER_ID;
  }
}
