<?php
// Render <HEAD> tag
function renderHead($pageTitle) {
  echo <<<END

<!-- Copyright (c)2007-09 by LCD Solutions, Inc.  All rights reserved. -->
<!-- http://www.clicktate.com -->

  <title>$pageTitle &bull; Clicktate</title>
  <meta http-equiv="X-UA-Compatible" content="IE=EmulateIE7" />
  <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
  <meta http-equiv="Content-Style-Type" content="text/css" />
  <meta http-equiv="Content-Script-Type" content="text/javascript" />
  <meta http-equiv="Content-Language" content="en-us" />
  <meta name="keywords" content="dictate, dictation, medical note, document generation, note generation" />
  <meta name="description" content="Automated document generation." />
END;
}

function renderBoxStart($class = "", $contentStyle = "", $contentId = "", $boxId = "") {
  $cstyle = ($contentStyle != "") ? "style=\"$contentStyle\"" : "";
  $cid = ($contentId != "") ? "id='$contentId'" : "";
  $bid = ($boxId != "") ? "id='$boxId'" : "";
  echo <<<END
<table $bid class="box $class" cellpadding="0" cellspacing="0">
  <tr class="box-tb">
    <td class="tl"></td>
    <td class="t"></td>
    <td class="tr"></td>
  </tr>
  <tr>
    <td class="l" nowrap></td>
    <td $cid class="content" $cstyle valign="top">
      <div class="box-content">
  
END;
}

function renderBoxEnd() {
  echo <<<END
      </div>
    </td>
    <td class="r" nowrap></td>
  </tr>
  <tr class="box-tb">
    <td class="bl"></td>
    <td class="b"></td>
    <td class="br"></td>
  </tr>
</table>

END;
}

/**
 * @param string $id Sticky ID
 * @param(opt) string $style
 */
function STICKY($id, $style = ''){
  global $myLogin;
  if (isset($myLogin->hideStickies[$id])) 
    $style = 'display:none';
  echo <<<END
  
<div id='$id' class="sticky" style='$style'>
  <span style=''>
    <table border='0' cellpadding='0' cellspacing='0'>
      <tr>
        <td>
END;
}
/**
 * @param string $id same as for renderSticky()
 * @param(opt) bool $remember true to keep pop from reappearing after close for this session 
 */
function _STICKY($id, $remember = true) {
  $remember = ($remember) ? '1' : '0';
  echo <<<END
        </td>
        <td class='x'>
          <a title='Close' href="javascript:Header.closeSticky('$id', $remember)">X</a>
        </td>
      </tr>
    </table>
  </span>
</div>
END;
}

// Build a combo from an associated array
function renderCombo($name, $arr, $selectedValue = "", $events = "", $disabled = false, $blankText = null) {
  $dis = ($disabled) ? "disabled=true" : ""; 
  echo "<select id=\"$name\" name=\"$name\" $events $dis>";
  if ($blankText !== null) {
    echo "<option value=\"\">$blankText</option>";
  }
  foreach ($arr as $value => $text) {
    echo "<option value=\"$value\"";
    if ($value == $selectedValue) {
      echo "selected";
    }
    echo ">$text</option>";
  }
  echo "</select>";
}

// Other inputs
function renderCalendar($id, $value = "", $readOnly = true) {
  echo "<input id='$id' type='text' size='10' value='$value' ";
  if ($readOnly) {
    echo "readonly='readonly' style='cursor:hand' onclick=\"showCal('$id')\" ";
  }
  echo "/>&nbsp;";
  echo "<a href='#' onclick=\"showCal('$id');return false\" class='cal'></a>";
}
function renderClock($id, $value = "", $hoursOnly = false) {
  echo "<input id='$id' type='text' readonly='readonly' size='7' value='$value' onclick=\"showClock('$id', ";
  echo toString($hoursOnly);
  echo ")\" />&nbsp;";
  echo "<a href='#' onclick=\"showClock('$id', ";
  echo toString($hoursOnly);
  echo ");return false\" class='clock'></a>";
}
function renderLabelCheck($id, $caption, $checked = false, $style = null, $onclick = null, $lblId = null) {  // delim strings in $onclick by unescaped apostrophes only, e.g. alert('hi') 
  $sty = ($style) ? "style='" . $style . "'" : "";
  $onc = ($onclick) ? "onclick=\"" . $onclick . "\"" : "";
  $ond = ";" . $onclick;
  $chk = ($checked) ? "checked" : "";
  $cls = ($checked) ? "lcheck-on" : "lcheck";
  $lid = ($lblId) ? "id='" . $lblId . "'" : "";
  echo <<<eos
<input id='$id' type='checkbox' $chk class='lcheck' onpropertychange='lcheckc(this)' $onc ondblclick="this.checked=!this.checked;$ond"><label unselectable='on' $lid class='$cls' onclick="lcheck(this)$ond" ondblclick="lcheck(this)$ond">$caption</label>
eos;
}
/*
 * Render group of checkboxes from record array
 * Designed to work with ui.js functions getCheckedValues() and setCheckedValues()
 * $parentId: ID of enclosing <span> 
 * $id: common ID of rendered checkboxes
 * $records: [[field=>value,field=>value,..],..]
 * $valueField: record field to use as checkbox value
 * $labelField: record field to use as checkbox label
 * $delim: delimiter between rendered checkboxes
 * Note: Designed to work with getCheckedValues(id, parentId) from ui.js
 */
function renderLabelChecks($parentId, $parentClass = "", $id, $records, $valueField, $labelField, $delim = "<br>") {
  echo "<span id='$parentId' class='$parentClass'>";
  foreach ($records as &$rec) {
    $val = $rec[$valueField];
    $lbl = $rec[$labelField];
    echo <<<eos
<input id='$id' value='$val' type='checkbox' class='lcheck' onpropertychange='lcheckc(this)' ondblclick="this.checked=!this.checked"><label unselectable='on' class='lcheck' onclick="lcheck(this)" ondblclick="lcheck(this)">$lbl</label>$delim
eos;
  }
  echo "</span>";
}
function renderLabelRadio($id, $name, $caption, $checked = false, $style = null, $onclick = null, $lblId = null) {  // delim strings in $onclick by unescaped apostrophes only, e.g. alert('hi') 
  $sty = ($style) ? "style='" . $style . "'" : "";
  $onc = ($onclick) ? "onclick=\"" . $onclick . "\"" : "";
  $ond = ";" . $onclick;
  $chk = ($checked) ? "checked" : "";
  $cls = ($checked) ? "lcheck-on" : "lcheck";
  $lid = ($lblId) ? "id='" . $lblId . "'" : "";
  echo "<input id='$id' name='$name' type='radio' $chk class='lcheck' onpropertychange='lcheckc(this)' $onc ondblclick=\"$ond\"><label unselectable='on' $lid class='$cls' onclick=\"lrcheck(this)$ond\" ondblclick=\"lrcheck(this)$ond\">$caption</label>";
}
/*
 * Render group of radio buttons from record array
 * $parentId: ID of enclosing <span> 
 * $id: common ID of rendered checkboxes
 * $records: [[field=>value,field=>value,..],..]
 * $valueField: record field to use as checkbox value
 * $labelField: record field to use as checkbox label
 * $delim: delimiter between rendered checkboxes
 * Note: Designed to work with getCheckedValues(id, parentId) from ui.js
 */
function renderLabelRadios($parentId, $parentClass = "", $id, $records, $valueField, $labelField, $delim = "<br>") {
  echo "<span id='$parentId' class='$parentClass'>";
  foreach ($records as &$rec) {
    $val = $rec[$valueField];
    $lbl = $rec[$labelField];
    echo <<<eos
<input id='$id' name='$id' value='$val' type='radio' class='lcheck' onpropertychange='lcheckc(this)'><label unselectable='on' class='lcheck' onclick="lrcheck(this)" ondblclick="lrcheck(this)">$lbl</label>$delim
eos;
  }
  echo "</span>";
}

// Basic / permission check
// Will shortcircuit javascript if user is basic (non-EMR) or $ro=true (read-only); otherwise $jscall is rendered
// Example usage:
// function addSchedPop(userId, date, time) {
//   <? permCheck($myLogin->permissions->accessSchedule >= Permissions::ACCESS_UPDATE, "addSchedPop2(userId, date, time)") ? > 
// }
function permContinue($test, $jscall) {
  if (premiumOnlyJs()) {
    return;
  }
  if ($test) {
    echo $jscall;
  }
}

// Javascript renderers
function premiumOnlyJs() {
  global $myLogin;
  if ($myLogin->isBasic()) {
    echo "showMsg('This feature is available only to Clicktate Premium subscribers.');";
    return true;
  }
  return false;
}
function timeoutCallbackJs($workingOffFn = '') {
  echo <<<END
function timeoutCallback() {
  $workingOffFn
  showCritical("We're sorry, but your session has timed out from inactivity.", goHome);
}
function goHome(confirmed) {
  window.location.href = "index.php";
}

END;
}

// Returns current page minus directories, e.g. "sessions.php"
function currentPage() {
  $a = explode("/", $_SERVER["SCRIPT_NAME"]);
  return $a[count($a) - 1];
}

// UI renderers
function selectedIf($test) {
  echo ($test) ? "selected" : "";
}
function checkedIf($test) {
  echo ($test) ? "checked" : "";
}
function yesIf($test) {
  echo ($test) ? "Yes" : "No";
}
function toString($test) {
  echo ($test) ? "true" : "false";
}
function echoIf($test, $trueText, $falseText = "") {
  echo ($test) ? $trueText : $falseText;
}
function disabledIf($test) {
  echo ($test) ? "disabled='disabled'" : "";
}

// String helpers
function splitJoin($text, $splitDelim, $joinDelim) {
  $words = explode($splitDelim, $text);
  for ($i = 0; $i < count($words); $i++) {
    $words[$i] = trim($words[$i]);  
  }
  return implode($joinDelim, $words);
}

// UI helpers
function isBlank($s) {
  return (trim($s) == "");
}
function isEmpty($a) {
  return ($a == null || count($a) == 0);
}
function nullify($s) {
  return (isBlank($s)) ? null : $s;
}
// Build errors array containing single error
// (To allow errors tile to display a non-validation error)
function singleError($field, $msg) {
  $errors = array();
  $errors[$field] = $msg;
  return $errors;
}

// Frontend validators
function isValidEmail($email) {  
  // First, we check that there's one @ symbol, and that the lengths are right
  if (!ereg("^[^@]{1,64}@[^@]{1,255}$", $email)) {
    // Email invalid because wrong number of characters in one section, or wrong number of @ symbols.
    return false;
  }
  // Split it into sections to make life easier
  $email_array = explode("@", $email);
  $local_array = explode(".", $email_array[0]);
  for ($i = 0; $i < sizeof($local_array); $i++) {
     if (!ereg("^(([A-Za-z0-9!#$%&'*+/=?^_`{|}~-][A-Za-z0-9!#$%&'*+/=?^_`{|}~\.-]{0,63})|(\"[^(\\|\")]{0,62}\"))$", $local_array[$i])) {
      return false;
    }
  }
    if (!ereg("^\[?[0-9\.]+\]?$", $email_array[1])) { 
    // Check if domain is IP. If not, it should be valid domain name
    $domain_array = explode(".", $email_array[1]);
    if (sizeof($domain_array) < 2) {
        return false; // Not enough parts to domain
    }
    for ($i = 0; $i < sizeof($domain_array); $i++) {
      if (!ereg("^(([A-Za-z0-9][A-Za-z0-9-]{0,61}[A-Za-z0-9])|([A-Za-z0-9]+))$", $domain_array[$i])) {
        return false;
      }
    }
  }
  return true;
} 
function isValidPassword($test) {
  if (strlen($test) < 6) {
     return false;
  }
  if (!ereg("[a-zA-Z]+", $test)) {
     return false;
  }
  if (!ereg("[0-9]+", $test)) {
     return false;
  }
  return true;
}

// Session/post helpers
function clearSessionVars() {
  unset($_SESSION["login"]);
}
function getPostedChecks($name, $postArray) {  // sync up a posted check array with another posted array
  $a = (isset($_POST[$name])) ? $_POST[$name] : array();
  $ixs = array_keys($postArray);
  $b = array();
  foreach ($ixs as $ix) {
    $b[$ix] = array_key_exists($ix, $a);
  }
  return $b;  // returns boolean array
}

// Math functions
function rnd() {
  return "&" . mt_rand(0, 99999999);
}
function idiv($x, $y) {  // integer division
  return ($x - ($x % $y)) / $y;
}
?>