<?php
require_once 'php/data/rec/sql/PortalUsers_Session.php';
require_once 'php/data/rec/sql/Messaging.php';
require_once 'php/data/rec/sql/PortalScanning.php';
require_once 'php/data/rec/sql/Documentation.php';
//
/**
 * Patient Portal Messaging
 * @author Warren Hornsby 
 */
class PortalMessaging {
  //
  /**
   * @return int total unread
   */
  static function getMyUnreadCt() {
    $sess = PortalSession::get();
    return PortalInbox::countUnread($sess->portalUserId);    
  }
  /**
   * @return array(MsgThread(+MsgInbox),..)
   */
  static function getMyInboxThreads() {
    $sess = PortalSession::get();
    $inboxes = PortalInbox::fetchAllForInbox($sess->portalUserId);
    return MsgThread_Portal::fetchAllByInboxes($inboxes);
  }
  /**
   * @param int $mtid
   * @return MsgThread
   */
  static function openThread($mtid) {
    $sess = PortalSession::get();
    $thread = self::getThread($sess, $mtid);
    if ($thread) {
      $thread->MsgPosts = Rec::sort(MsgPost_Portal::fetchByThread($thread), new RecSort('postId'));
      PortalInbox::saveAsRead($thread);
      // TODO: auditing
    }
    return $thread;
  }
  /**
   * @param string $subject
   * @param int[] $sendTos
   * @param string $body
   * @param string $file uploaded filename (optional)
   */
  static function newThread($subject, $sendTos, $body, $file = null) {
    $sess = PortalSession::get();
    $sendTo = self::buildSendToNames($sess, $sendTos);
    $thread = MsgThread_Portal::asNew($sess->userGroupId, $sess->clientId, $sess->portalUserId, $sess->name, $subject, MsgThread::PRIORITY_NORMAL);
    $thread->save();
    if ($thread) {
      $post = self::addPost($sess, MsgPost::ACTION_CREATE, $thread, $sendTo, $body, $file);
      MsgInbox::saveAsUnreadFor($sendTos, $post);
    }
    return $thread;
  }
  /**
   * @param int $mtid
   * @param int[] $sendTos
   * @param string $body
   * @param string $file uploaded filename (optional)
   */
  static function postReply($mtid, $sendTos, $body, $file = null) {
    $sess = PortalSession::get();
    $sendTo = self::buildSendToNames($sess, $sendTos);
    $thread = self::getThread($sess, $mtid);
    if ($thread) {
      $post = self::addPost($sess, MsgPost::ACTION_REPLY, $thread, $sendTo, $body, $file);
      //$thread->Inbox->saveAsSent($post);
      MsgInbox::saveAsUnreadFor($sendTos, $post);
    }
  }
  /**
   * @return array(id=>name,..)
   */
  static function getMySendTos() {
    $sess = PortalSession::get();
    $recs = User_Ps::fetchDoctors($sess->userGroupId);
    return User_Ps::asIdNameMap($recs);
  }
  /**
   * @return array('id|ugid'=>PortalMsgType,..)
   */
  static function getMyMsgTypes() {
    $sess = PortalSession::get();
    $default = User_Ps::fetchPrimaryPhys($sess->userGroupId, null);
    $recs = PortalMsgTypes::fetchTopLevels($sess->userGroupId);
    $map = array();
    foreach ($recs as $rec) {
      if (empty($rec->sendTo))
        $rec->sendTo = $default->userId; 
      $map[$rec->getKey()] = $rec;
    }
    return $map;
  }
  //
  private static function getThread($sess, $mtid) {
    $thread = MsgThread_Portal::fetch($mtid, 1);
    if ($thread) {
      if ($thread->clientId != $sess->clientId)
        throw new SecurityException("Access not allowed: mtid ($mtid) uid($sess->portalUserId) ugid($sess->userGroupId) cid($sess->clientId)");
      $thread->Inbox = PortalInbox::fetchByRecip($sess->portalUserId, $thread);
    }
    return $thread; 
  }
  private static function buildSendToNames($sess, $ids) {
    $map = User_Ps::fetchGroupMap($sess->userGroupId);
    $s = array();
    foreach ($ids as $id) 
      $s[$id] = self::getRecipName($map, $id);
    return implode($s, ';');
  }
  private static function getRecipName($map, $id) {
    $r = geta($map, $id);
    if ($r == null) 
      throw new SecurityException("Invalid sendto: $id");
    return $r->name;
  }
  private static function addPost($sess, $action, $thread, $sendTo, $body, $file) {
    $post = MsgPost::revive(MsgPost::AUTHOR_TYPE_PORTAL, $sess->portalUserId, $sess->name, $action, $thread->threadId, $sendTo, $body, null, null, $file);
    $post->save();
    return $post;
  }
}
/**
 * SqlRec PortalInbox
 */
class PortalInbox extends SqlRec implements NoAudit {
  //
  public $portalInboxId;
  public $recipient;
  public $threadId;
  public $postId;  
  public $isRead;
  //
  public function getSqlTable() {
    return 'portal_inbox';
  }
  public function saveAsSent($post) {
    if ($this->isRead == MsgInbox::IS_READ) {
      $this->postId = $post->postId;
      $this->isRead = MsgInbox::IS_SENT;
      $this->save();
    }
  }
  //
  static function countUnread($puserId) {
    $rec = new self();
    $rec->recipient = $puserId;
    $rec->isRead = MsgInbox::IS_UNREAD;
    return SqlRec::count($rec);
  }
  static function fetchAllForInbox($puserId) {
    return self::fetchAllByIsRead($puserId, CriteriaValue::lessThan(MsgInbox::IS_SENT));
  }
  static function fetchByRecip($puserId, $thread) {
    $inbox = new self();
    $inbox->recipient = $puserId;
    $inbox->threadId = $thread->threadId;
    return SqlRec::fetchOneBy($inbox);
  }
  static function saveAsRead($thread) {
    $inbox = &$thread->Inbox;
    if ($inbox && $inbox->isRead == MsgInbox::IS_UNREAD) { 
      $post = $thread->getLastPost();
      if ($post) 
        $inbox->postId = $post->postId;
      $inbox->isRead = MsgInbox::IS_READ;
      $inbox->save();
    }
  }
  static function saveAsUnreadFor($puserId, $post) {
    $mtid = $post->threadId;
    $mpid = $post->postId;
    $inbox = self::fetchOrCreate($mtid, $puserId);
    $inbox->postId = $mpid;
    $inbox->isRead = MsgInbox::IS_UNREAD;
    $inbox->save();
  }
  //
  private static function fetchAllByIsRead($puserId, $isRead) {
    $rec = new self();
    $rec->recipient = $puserId;
    $rec->isRead = $isRead;
    $rec->MsgPost = new MsgPost();
    return SqlRec::fetchAllBy($rec);
  }
  private static function fetchOrCreate($mtid, $id) {
    $inbox = self::fetchOneBy(self::_create($mtid, $id));
    return ($inbox) ? $inbox : self::_create($mtid, $id);
  }
  private static function _create($mtid, $id) {
    return new self(null, $id, $mtid);
  }
}
class PortalMsgTypes extends SqlLevelRec implements CompositePk {
  //
  public $msgTypeId;
  public $userGroupId;
  public $name;
  public $active;
  public $sendTo;
  //
  public function getSqlTable() {
    return 'portal_msg_types';
  }
  static function fetchTopLevels($ugid) {
    $recs = static::filter(parent::fetchTopLevels($ugid));
    return $recs;
  }
}
/**
 * MsgThread MsgThread_Portal
 */
class MsgThread_Portal extends MsgThread implements NoAudit {
  //
  static function fetch($mtid) {
    $c = new static($mtid);
    $c->ClientStub = new ClientStub();
    $rec = parent::fetchOneBy($c);
    return $rec;
  }
  static function fetchAllByInboxes($inboxes) {
    $threads = array();
    foreach ($inboxes as &$inbox) {
      $thread = self::fetch($inbox->threadId);
      $thread->Inbox = $inbox;
      if (! $thread->isClosed() || $thread->MsgInbox->isRead == MsgInbox::IS_UNREAD) 
        $threads[] = $thread;
    }
    Rec::sort($threads, new RecSort('Inbox.isRead', '-priority', '-Inbox.postId'));
    return $threads;
  }
  //
  static function asNew($ugid, $cid, $creatorId, $creator, $subject, $priority) {
    $me = new static();
    $me->userGroupId = $ugid;
    $me->clientId = $cid;
    $me->creatorId = $creatorId;
    $me->creator = $creator;
    $me->dateCreated = nowNoQuotes();
    $me->type = static::TYPE_PATIENT;
    $me->status = static::STATUS_OPEN;
    $me->priority = $priority;
    $me->subject = $subject;
    return $me;
  }
  protected function fetchUgidWithin($table, $col, $id) {
    return SqlRec::_fetchUgidWithin($table, $col, $id);
  }
} 
class MsgPost_Portal extends MsgPost implements NoAudit {
  //
  public function attachStub() {
    if ($this->stubType && $this->stubId)
      $this->Stub = DocStub_Portal::fetchWithPreview($this->stubType, $this->stubId);
  }
}
/**
 * DocStub DocStub_Portal
 */
class DocStub_Portal extends DocStub implements NoAudit {
  //
  static function getRecClass($type) {
    switch ($type) {
      case self::TYPE_SESSION:
        return 'DocSession_Portal';
      case self::TYPE_MSG:
        return 'DocMessage';
      case self::TYPE_APPT: 
        return 'DocAppt';
      case self::TYPE_ORDER:
        return 'DocOrder';
      case self::TYPE_SCAN:
        return 'DocScan_Portal';
      case self::TYPE_SCAN_XML:
        return 'DocScan_Xml';
      case self::TYPE_RESULT:
        return 'DocProc'; 
    }
  }
}
//
class DocSession_Portal extends DocSession {
  //
  static function asCriteria($cid) {
    $c = new static();
    $c->clientId = $cid;
    return $c;
  }
  //  
  public function asStub() {
    $rec = $this->createStub();
    $rec->type = $this->getDocStubType();
    $rec->id = $this->sessionId;
    $rec->cid = $this->clientId;
    $rec->setDate($this->dateService);
    $rec->timestamp = $this->dateCreated;
    $rec->name = $this->getLabel();
    $rec->desc = $this->formatDiagnoses();
    if ($this->isClosed())
      $rec->setSigned($this->dateClosed, $this->closedBy); 
    return $rec; 
  }
  protected function createStub() {
    return new DocStub_Portal();
  }
}
class DocScan_Portal extends DocScan {
  //
  public function attachFiles() {
    $this->ScanFiles = ScanFile_Portal::fetchAllIndexedTo($this->scanIndexId);
  }
  //  
  static function fetch($id) {
    $c = new static();
    $c->scanIndexId = $id;
    $rec = static::fetchOneBy($c);
    $rec->attachFiles();
    return $rec;
  }
  static function fetchForPreview($id) {
    return static::fetch($id);
  }
  static function asCriteria($cid) {
    $c = new static();
    $c->clientId = $cid;
    return $c;
  }
}
