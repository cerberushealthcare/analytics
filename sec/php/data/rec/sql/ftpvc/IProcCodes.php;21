<?php
require_once 'php/data/rec/sql/_IpcRec.php';
//
/**
 * Internal Proc Codes DAO
 * @author Warren Hornsby
 */
class IProcCodes {
  //
  /**
   * @return array(Ipc,..)
   */
  static function getAll($cat) {
    global $myLogin;
    $recs = Ipc::fetchAll($myLogin->userGroupId, $cat);
    return Rec::sort($recs, new RecSort('name'));
  }
  /**
   * @return Ipc
   */
  static function getByName($name) {
    return geta(self::mapByName($myLogin->userGroupId), $name);
  }
  /**
   * @param stdClass $obj
   * @return Ipc
   */
  static function saveCustom($obj) {
    global $myLogin;
    $ugid = $myLogin->userGroupId;
    $rec = Ipc::fromUi($ugid, $obj);
    if ($rec->ipc == null) {
      $rec->ipc = Ipc::fetchNextAvailableIpc($ugid);
      $rec->saveAsInsert();
    } else {
      $rec->save();
    }
    return $rec;
  }
  /**
   * @return Ipc
   */
  static function getBySurgProc($proc) {
    return geta(self::mapSurgByDesc($myLogin->userGroupId), $proc);
  }
  //
  private static function mapByName($ugid) {
    static $map;
    if ($map == null)
      $map = Ipc::fetchMapByName($ugid);
    return $map;
  }
  private static function mapSurgByDesc($ugid) {
    static $map;
    if ($map == null)
      $map = Ipc::fetchSurgMap($ugid);
    return $map;
  } 
}
//
/**
 * Internal Proc Code
 */
class Ipc extends IpcRec {
  //
  public $ipc;
  public $userGroupId;
  public $name;
  public $desc;
  public $cat;
  //
  static function fetchAll($ugid, $cat = null) {
    $c = self::asCriteria($ugid);
    $c->cat = $cat;
    return parent::fetchAllBy($c, null, 2000);
  }
  static function fetchMapByName($ugid) {
    return parent::fetchMapBy(self::asCriteria($ugid), 'name');
  }
  static function fetchSurgMap($ugid) {
    $c = self::asCriteria($ugid);
    $c->cat = self::CAT_SURG;
    return parent::fetchMapBy($c, 'desc');
  }
  static function asRequiredJoin($fk = 'ipc') {
    $c = new self();
    return CriteriaJoin::optional($c, $fk);
  }
  static function asOptionalJoin($fk = 'ipc') {
    $c = new static();
    return CriteriaJoin::optional($c, $fk);
  }
  static function fromUi($ugid, $obj) {
    $rec = new self($obj);
    $rec->userGroupId = $ugid;
    return $rec;
  }
  static function fetchNextAvailableIpc($ugid) {
    $max = Dao::fetchValue("SELECT MAX(ipc) FROM iproc_codes WHERE user_group_id=$ugid");
    if ($max)
      return intval($max) + 1;
    else
      return 1000000;
  }
}