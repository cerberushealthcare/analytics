<?php
/**
 * Data Record 
 */
abstract class Rec {
  /**
   * Assigns fields based upon args supplied:
   *   (value,value,..)      multiple args: each assigned in field definition order
   *   ([value,..])          single arg, array: values assigned in field definition order 
   *   ({fid:value,..})      single arg, decoded JSON object: values mapped to fids
   * To call this from an overriden constructor, use:
   *   $args = func_get_args(); 
   *   call_user_func_array(array('Rec', '__construct'), $args);
   */
  public function __construct() {
    $args = func_get_args();
    if (count($args) == 1)  
      if (is_array($args[0])) {  
        $this->__constructFromArray($args[0]);
        $args = null;
      } else if (is_object($args[0])) {  
        $this->__constructFromObject($args[0]);
        $args = null;
      }
    if ($args)  
      $this->__constructFromArgs($args);
  }
  public function __constructFromArray($arr) {
    $fids = $this->getFids();
    for ($i = 0, $l = count($fids); $i < $l; $i++) {
      $value = current($arr);
      $this->set($fids[$i], $value);
      next($arr);
    }
  }
  public function __constructFromObject($obj) {
    $this->applyJsonFilter($obj, 'in');
    foreach ($obj as $fid => $value)
      $this->set($fid, $value);
  }
  public function __constructFromArgs($args) {
    $fids = $this->getFids();
    for ($i = 0, $l = count($args); $i < $l; $i++) {
      $value = current($args);
      $this->set($fids[$i], $value); 
      next($args); 
    }
  }
  /**
   * Assign field value according to type
   * @param string $fid
   * @param string $value: simple field assignment
   *        object $value: child Rec assignment from decoded JSON object {fid:value,..}  
   */
  public function set($fid, $value) {
    if ($value !== null) {
      if (is_scalar($value)) 
        $this->setScalar($fid, $value);
      else
        $this->setObject($fid, $value);
    }
  }
  public function setScalar($fid, $value) {
    $this->$fid = $value;
  }
  public function setObject($fid, $value) {
    $class = Rec::getClassFromJsonField($fid);
    $this->$fid = new $class($value);
  }
  /**
   * Validate required fields
   * @throws RecRequiredException
   */
  public function validate() {  // TODO
//    if ($this->REQUIRED) {
//      $required = array();
//      foreach ($this->REQUIRED as &$fid) 
//        if ($this->$fid === null)
//          $required[] = $this->getFullFieldName($fid);
//      if (count($required) > 0)
//        throw new RecRequiredException($required);
//    }
  }
  /**
   * Invoked by Services_JSON prior to constructing JSON of this object
   * Override to add/change properties, e.g.:
   *   $o = parent::toJsonObject();
   *   $o->existingProp = 'change';
   *   unset($o->existingPropToDelete);
   *   Rec::addProp('newProp', value);
   * @return stdClass object
   */
  public function toJsonObject() {
    $obj = new stdClass();
    $hasProps = false;
    foreach ($this as $fid => &$value) { 
      if ($value !== null && $value !== false) {
        $hasProps = true; 
        $obj->$fid = $value;
      }        
    }
    if ($hasProps) {
      $this->applyJsonFilter($obj, 'out');
      return $obj;  
    } else {
      return null;
    }
  }
  /**
   * Invoked when creating/consuming JSON objects to apply transformations to fields
   * e.g. date formatting for UI, back to SQL format on return:
   * Example override:
   *   return array('dateGiven' => JsonFilter::approxDate());
   * @return array('fid'=>JsonFilter,..)
   */
  public function getJsonFilters() {
    return array();
  }
  /**
   * @return string 'className'
   */
  public function getMyName() {
    return get_class($this);
  }
  //
  protected function getFullFieldName($fid) {
    return $this->getMyName() . ".$fid";
  }
  protected function getFids() {
    static $fids;
    if ($fids == null) 
      $fids = array_keys(get_object_vars($this));
    return $fids;    
  }
  protected function getFidCt() {
    static $ct;
    if ($ct == null) 
      $ct = count($this->getFids());
    return $ct;
  }
  protected function applyJsonFilter(&$obj, $direction) {
    static $filters;
    if ($filters == null) 
      $filters = $this->getJsonFilters();
    foreach ($filters as $fid => $filter) {
      if (isset($obj->$fid)) { 
        $fn = $filter->$direction;
        if ($fn) { 
          if ($fn == JsonFilter::OMIT)  
            unset($obj->$fid);
          else
            $obj->$fid = $fn($obj->$fid);
        }
      }
    }
  }
  //
  /**
   * Build Rec objects from decoded JSON array 
   * @param array $objects [{fid:value,..},..]
   * @param string $class 'SomeRec' 
   * @return array(Rec,..)
   */
  public static function fromJsonObjects($objects, $class) {
//    if ($class == null)
//      $class = get_called_class();
    $recs = array();
    foreach ($objects as $object) 
      $recs[] = new $class($object);
    return $recs;
  }
  /**
   * Get JSON-serialized array of class constants and static lists
   * @param(opt) string $class 'SomeRec' 
   * @return {
   *   'CONSTANT_NAME':value,..
   *   'LIST_NAME':['value':'text',..],..
   *   }
   */
  public static function getStaticJson($class = null) {
    if ($class == null)
      $class = get_called_class();
    $rc = new ReflectionClass(Rec::getClass($class));
    $constants = $rc->getConstants();
    $lists = $rc->getStaticProperties();
    return jsonencode(array_merge($constants, $lists)); 
  }
  /**
   * Add JSON helper prop (prefixed by '_') to outgoing JSON object
   * @param stdClass $object
   * @param string $fid
   * @param mixed $value
   */
  protected static function addProp(&$object, $fid, $value) {
    $prop = "_$fid";
    $object->$prop = $value;
  }
  protected static function getClassFromJsonField($fid) {
    $a = explode('_', $fid);
    return $a[0];
  }
  protected static function getClass($class) {
    if (is_object($class)) 
      $class = get_class($class);
    return $class;
  }
  /**
   * Sort record set
   * @param [Rec,..] $recs
   * @param RecSort $order
   * @param bool $preserveKeys
   */
  public static function sort(&$recs, $order, $preserveKeys = false) {
    if ($preserveKeys)
      uasort($recs, array($order, 'compare'));
    else
      usort($recs, array($order, 'compare'));
    return $recs;
  } 
}
/**
 * Record Comparator
 */
class RecSort {
  public $fids;  
  //
  const ASC = 1;
  const DESC = -1;
  /**
   * @param ('fid','-fid',..) where '-fid' indicates DESC
   */
  public function __construct() {
    $fids = func_get_args();
    $this->fids = array();
    foreach ($fids as $fid) {
      $fid = explode('-', trim($fid));
      if (count($fid) == 2)
        $this->fids[$fid[1]] = RecSort::DESC;
      else
        $this->fids[$fid[0]] = RecSort::ASC;  
    }
  } 
  /**
   * @param Rec $r1
   * @param Rec $r2
   */
  public function compare($r1, $r2) {
    $a = array();
    foreach ($this->fids as $fid => $dir) {
      $icmp = $dir * icmp(get_recursive($r1, $fid), get_recursive($r2, $fid));
      if ($icmp != 0)
        return $icmp;
    }
    return 0;
  }
}
/**
 * JSON Filter 
 * @see Rec::getJsonFilters()
 */
class JsonFilter {
  //
  public $out;
  public $in;
  //
  // Special 'functions'
  const OMIT = '[omit]';
  /**
   * @param string $out transform function for outgoing
   * @param string $in transform function for incoming
   */
  public function __construct($out, $in = null) {
    $this->out = $out;
    $this->in = $in; 
  }
  /**
   * Static builders
   */
  public static function omit() {
    return new JsonFilter(JsonFilter::OMIT);
  }
  public static function oneWay() {
    return new JsonFilter(null, JsonFilter::OMIT);
  }
  public static function editableDate() {
    return new JsonFilter('formatDate', 'formatFromDate');
  }
  public static function editableDateTime() {
    return new JsonFilter('formatDateTime', 'formatFromDateTime');
  }
  public static function editableDateApprox() {
    return new JsonFilter('formatApproxDate', 'formatFromApproxDate');
  } 
  public static function informalDate() {
    return new JsonFilter('formatInformalDate', JsonFilter::OMIT);
  }
  public static function informalTime() {
    return new JsonFilter('formatInformalTime', JsonFilter::OMIT);
  }
}
/**
 * Exceptions
 */
class RecException extends Exception {
}
class RecRequiredException extends RecException {
  public $required;
  /**
   * @param array $required ['class.fid',..]
   */
  public function __construct($required) {
    $this->required = $required;
    $this->message = 'Missing fields: ' . implode($required, ', ');
  }
}
?>