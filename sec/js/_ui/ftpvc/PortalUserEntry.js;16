/**
 * PortalAnchorTile
 */
PortalAnchorTile = {
  create:function(container) {
    return Html.Tile.create(container).extend(function(self) {
      return {
        onupdate:function(rec) {},
        //
        init:function() {
          self.tiles = Html.Tiles.create(self, [
            self.creator = Html.AnchorAction.create('keyg', 'Portal ID not set up')
              .bubble('onclick', self.creator_onclick),
            self.login = Html.AnchorAction.asKey()
              .bubble('onclick', self.login_onclick)]);
        },
        reset:function() {
          self.client = null;
          self.portalUser = null;
          self.changed = null;
          self.draw();
        },
        load:function(fs) {
          if (fs) {
            self.client = fs.client;
            self.loadPortalUser(fs.portalUser);
          } else {
            self.reset();
          }
        },
        loadPortalUser:function(portalUser) {
          self.portalUser = portalUser;
          if (portalUser) {
            self.login.setText(portalUser.uid + ' (' + self.client.name + ')');
            self.login.setClass(portalUser.isSuspended() ? 'susp' : 'key2');
          }
          self.draw();
        },
        updatePortalUser:function(portalUser) {
          self.onupdate(portalUser);
          self.loadPortalUser(portalUser);
        },
        draw:function() {
          if (self.portalUser)
            self.login.select();
          else
            self.creator.select();
        },
        pop:function() {
          self.tiles.selected().click();
        },
        //
        creator_onclick:function() {
          PortalUserEntry.pop_asNew(self.client).bubble('onsave', function(rec) {
            self.updatePortalUser(rec);
            self.login_onclick();
          })
        },
        login_onclick:function() {
          self.portalUser.ajax(self).edit(function(portalUser) {
            PortalUserManager.pop(portalUser).bubble('onsave', function(rec) {
              self.updatePortalUser(rec);
            })
          }) 
        }
      }
    })
  }
}
PortalUserManager = {
  /*
   * @arg PortalUser rec
   */
  pop:function(rec) {
    return Html.Pop.singleton_pop.apply(PortalUserManager, arguments);
  },
  create:function() {
    var My = this;
    return Html.DirtyEntryPop.create('Portal User', 600).extend(function(self) {
      return {
        onsave:function(rec) {},
        //
        init:function() {
          self.form = Html.UlEntry.create(self.content, function(ef) {
            ef.line().lbl('Login ID').ro('uid').lbl('Status').ro('_status');
          })
          Html.Tiles.create(self.content, [
            self.cb1 = Html.CmdBar.create(self.content)
              .button('Reset Account', self.reset_onclick, 'button-edit')
              .button('Suspend Account', self.suspend_onclick, 'delete')
              .exit(self.close),
            self.cb2 = Html.CmdBar.create(self.content)
              .button('Print Login Card', self.print_onclick, 'print-note')
              .button('Edit Activation Fields', self.edit_onclick, 'button-edit')
              .button('Suspend Account', self.suspend_onclick, 'suspend')
              .exit(self.close)]);
        },
        onshow:function(rec) {
          self.rec = rec;
          self.edited = false;
          self.draw();
        },
        //
        draw:function(rec) {
          if (rec) {
            self.rec = rec;
            self.edited = true;
          }
          self.form.load(self.rec);
          if (self.rec.isSuspended() || self.rec.isActivated()) {
            self.cb1.select();
            self.cb1.disable('Suspend Account', self.rec.isSuspended());
          } else {
            self.cb2.select();
          }
        },
        reset_onclick:function() {
          Pop.Confirm.showYesNo('This will reset the account password and require user to reactivate account. OK to proceed?', function() {
            self.rec.ajax().reset(function(rec) {
              self.draw(rec);
            })
          })
        },
        suspend_onclick:function() {
          Pop.Confirm.showYesNo('This will suspend the account to prevent further logins. OK to proceed?', function() {
            self.rec.ajax().suspend(self.close_asSaved);
          })
        },
        print_onclick:function() {
          self.close();
          Page.popPortalPrint(self.rec.Client.clientId);
        },
        edit_onclick:function() {
          PortalUserEntry.pop(self.rec).bubble('onsave', function(rec) {
            self.draw(rec);
          })
        },
        close:function() {
          Pop.close();
          if (self.edited)
            self.onsave(self.rec);
        }
      }
    })
  }
}
/**
 * DirtyEntryPop PortalUserEntry
 */
PortalUserEntry = {
  pop:function(rec) {
    return Html.Pop.singleton_pop.apply(PortalUserEntry, arguments);
  },
  pop_asNew:function(client) {
    return PortalUserEntry.pop(NewPortalUser.from(client));
  },
  create:function() {
    var My = this;
    return Html.DirtyEntryPop.create('Portal User Activation', 600).extend(function(self) {
      return {
        onsave:function(rec) {},
        //
        init:function() {
          self.form = Html.UlEntry.create(self.content).extend(My.Form);
          self.cb = Html.Pop.CmdBar.create(self).saveCancel();
        },
        onshow:function(rec) {
          self.rec = rec;
          self.form.load(self.rec);
        },
        save_onclick:function() {
          var rec = self.form.getRecord();
          rec.ajax(self).save(self.close_asSaved);
        }
      }
    })
  },
  Form:function(self) {
    return {
      init:function() {
        self.line().lbl('Login ID').ro('uid').lbl('Password').ro('pwpt');
        self.line('mt10').lbl('Last Name').textbox('lastName', 20).lbl('Zip Code').textbox('zipCode', 5).lbl('Last 4 SSN').textbox('ssn4', 5);
        self.line().lbl('Email').textbox('email', 50);
        self.line('mt10').lbl('Security 1').select('_scq1', C_PortalUser.QUESTIONS, '', self.showCustom.curry(1));
        self.line().id('licq1').lbl().textbox('cq1', 60);
        self.line().lbl('Answer 1').textbox('ca1', 15);
        self.line('mt5').lbl('Security 2').select('_scq2', C_PortalUser.QUESTIONS, '', self.showCustom.curry(2));
        self.line().id('licq2').lbl().textbox('cq2', 60);
        self.line().lbl('Answer 2').textbox('ca2', 15);
        self.line('mt5').lbl('Security 3').select('_scq3', C_PortalUser.QUESTIONS, '', self.showCustom.curry(3));
        self.line().id('licq3').lbl().textbox('cq3', 60);
        self.line().lbl('Answer 3').textbox('ca3', 15);
      },
      ondraw:function() {
        self.focus('lastName');
      },
      showCustom:function(i) {
        var li = self.getLine('licq' + i);
        var fid = 'cq' + i;
        if (self.getValue('_scq' + i) == C_PortalUser.CUSTOM) {
          li.show();
          self.focus(fid);
        } else {
          li.hide();
        }
      }
    }
  }
}  
/**
 * AnchorPicker PortalUserPicker
 * Not in use?
 */
PortalUserPicker = {
  create:function() {
    return Html.AnchorPicker.create('patient', 'Select Patient Recipient', 'Patient Login Selector').extend(function(self) {
      return {
        init:function() {
          self.thead().tr('fixed head').th('Patient').w('60%').th('ID').w('20%').th('Birth').w('20%');
        },
        buttons:function(cmd) {
          cmd.add('Add New Patient Login...', self.new_onclick).cancel(self.pop.close);
        },
        fetch:function(callback_recs) {
          PortalUsers.ajax().fetch(callback_recs);
        },
        applies:function(rec, search) {
          if (search)
            return rec.Client.name.match(search);
          return true;
        },
        add:function(rec, tr) {
          tr.select(rec, AnchorClient.create(rec.Client)).td(rec.Client.uid).td(rec.Client.birth);
        },
        getValueFrom:function(rec) {
          return rec.portalUserId;
        },
        getTextFrom:function(rec) {
          return rec.Client.name;
        },
        //
        new_onclick:function() {
          PortalUserEntry.pop(null, function(rec) { 
            self.pop.clean();
            self.pop.select(rec);
          })
        }
      }
    })
  }
}
