<?php
require_once 'php/data/rec/sql/_SqlRec.php';
//
/**
 * Scanning DAO
 * @author Warren Hornsby
 */
class Scanning {
  //
  /**
   * @param $httpPostFile $_FILES field array('name'=>..,'type'=>..,'tmp_name'=>..,'error'=>..,'size'=>)
   */
  static function upload($httpPostFile) {
    global $myLogin;
    $ugid = $myLogin->userGroupId;
    $files = UploadFile::fromHttpPostFile($httpPostFile);
    if ($files) {
      $count = ScanFile::count($ugid);
      $folder = UploadFolder::open($ugid);
      $files = $folder->save($files, $count);
      ScanFile::saveUploads($files, $ugid);
    }
  }
  /**
   * @return array(ScanFile,..)
   */
  static function getUnindexedFiles() {
    global $myLogin;
    $recs = ScanFile::fetchAllUnindexed($myLogin->userGroupId);
    return $recs;
  }
  /**
   * @param int $sfid
   * @return ScanFile
   */
  static function getFile($sfid) {
    return ScanFile::fetch($sfid);
  }
  /**
   * @param int $sfid
   */
  static function output($sfid) {
    global $myLogin;
    $file = self::getFile($sfid);
    $folder = UploadFolder::open($myLogin->userGroupId);
    $folder->output($file);
  }
  /**
   * @param stdClass $oScanIndex criteria
   * @return array(ScanIndex,..)
   */
  static function getAllIndexesBy($oScanIndex) {
    $scanIndex = new ScanIndex($oScanIndex);
    $recs = ScanIndex::fetchAllBy($scanIndex);
    return $recs;
  }
  /**
   * @param stdClass $oScanIndex 
   * @param int[] $sfids ScanFile id array to index
   * @return ScanIndex+ScanFiles
   */
  static function saveIndex($oScanIndex, $sfids) {
    $scanIndex = new ScanIndex($oScanIndex);
    $scanIndex->save();
    $scanIndex->index($sfids);
    return $scanIndex;
  }
  /**
   * @param int $sxid
   * @return ScanIndex+ScanFiles
   */
  static function getIndex($sxid) {
    $scanIndex = ScanIndex::fetch($sxid);
    return $scanIndex;
  }
}
/**
 * Scan Set
 */
class ScanIndex extends SqlRec {
  //
  public $scanIndexId;
  public $userGroupId;
  public $clientId;
  public $scanType;
  public $ipc;
  public $area;
  public $provider;
  public $addrFacility;
  public $datePerformed;
  public $dateScanned;
  public $tag1;
  public $tag2;
  public $tag3;
  public /*ScanFile[]*/ $ScanFiles;
  //
  const TYPE_RESULT = 1;
  const TYPE_LETTER = 2;
  const TYPE_OUTSIDE = 3;
  const TYPE_INSUR = 4;
  const TYPE_CARE = 5;
  const TYPE_RX = 6;
  const TYPE_DME = 7;
  const TYPE_PT = 8;
  public static $TYPES = array(
    self::TYPE_RESULT => 'Test/Procedure Result',
    self::TYPE_LETTER => 'Letter/Note',
    self::TYPE_OUTSIDE => 'Outside Records',
    self::TYPE_INSUR => 'Insurance',
    self::TYPE_CARE => 'Care Supervision',
    self::TYPE_RX => 'Pharmacy Communication',
    self::TYPE_DME => 'DME/Supplies',
    self::TYPE_PT => 'PT/OT');
  //
  public function getSqlTable() {
    return 'scan_sets';
  }
  /**
   * @param int[] $sfids
   */
  public function index($sfids) {
    ScanFile::dropIndexTo($this->scanIndexId, $this->userGroupId);
    $this->ScanFiles = ScanFile::indexAllTo($sfids, $this->scanIndexId, $this->userGroupId);
  }
  //
  static function getStaticJson() {
    return parent::getStaticJson(__CLASS__);
  }
  static function fetch($sxid) {
    return parent::fetch($id, __CLASS__);
  }
}
/**
 * Scan File
 */
class ScanFile extends SqlRec {
  //
  public $scanFileId;
  public $userGroupId;
  public $filename;
  public $origFilename;
  public $height;
  public $width;
  public $mime;
  public $scanIndexId;
  public $seq;
  //
  public function getSqlTable() {
    return 'scan_files';
  }
  public function resetIndex() {
    $this->scanIndexId = null;
    $this->seq = null;
  } 
  public function setIndex($sxid, $seq) {
    $this->scanIndexId = $sxid;
    $this->seq = seq;
  } 
  //
  /**
   * @param int $ugid
   * @return int
   */
  static function count($ugid) {
    $c = new ScanFile();
    $c->userGroupId = $ugid;
    return parent::count($c);
  }
  /**
   * @param int $id
   * @return ScanFile
   */
  static function fetch($id) {
    return parent::fetch($id, __CLASS__);
  }
  /**
   * @param int $ugid
   * @return array(ScanFile,..)
   */
  static function fetchAllUnindexed($ugid) {
    $c = self::asCriteria($ugid);
    $c->scanIndexId = CriteriaValue::isNull();
    return self::fetchAllBy($c);
  }
  /**
   * @param int $scanIndexId
   * @param int $ugid
   * @return array(ScanFile,..)
   */
  static function fetchAllIndexedTo($sxid, $ugid) {
    $c = self::asCriteria($ugid);
    $c->scanIndexId = $sxid;
    return self::fetchAllBy($c);
  }
  /**
   * @param int $sfids
   * @param int $ugid
   * @return array(ScanFile,..)
   */
  static function fetchAllIn($sfids, $ugid) {
    $c = self::asCriteria($ugid);
    $c->scanFileId = CriteriaValue::in($sfids);
    return self::fetchAllBy($c);    
  }
  /**
   * @param int $scanIndexId
   * @param int $ugid
   */
  static function dropIndexTo($sxid, $ugid) {
    $recs = self::fetchAllIndexedTo($sxid, $ugid);
    foreach ($recs as $rec) {
      $rec->resetIndex();
      $rec->save();
    }
  }
  /**
   * @param int[] $sfids 
   * @param int $scanIndexId
   * @param int $ugid
   * @return array(ScanFile,..)
   */
  static function indexAllTo($sfids, $sxid, $ugid) {
    $recs = self::fetchAllIn($sfids);
    $seq = 0;
    foreach ($recs as &$rec) {
      $rec->setIndex($sxid, $seq++);
      $rec->save();
    }
    return $recs;
  }
  /**
   * @param UploadFile[] $files
   * @param int $ugid
   */
  static function saveUploads($files, $ugid) {
    $recs = self::fromUploads($files, $ugid);
    self::saveAll($recs);
  }
  /**
   * @param UploadFile[] $files
   * @param int $ugid
   * @return array(ScanFile,..)
   */
  static function fromUploads($files, $ugid) {
    $recs = array();
    foreach ($files as $file)
      $recs[] = self::fromUpload($file, $ugid); 
    return $recs;
  }
  /**
   * @param UploadFile[] $files
   * @param int $ugid
   * @return ScanFile
   */
  static function fromUpload($file, $ugid) {
    $rec = new self();
    $rec->userGroupId = $ugid;
    $rec->filename = $file->newName;
    $rec->origFilename = $file->name;
    $rec->height = $file->height;
    $rec->width = $file->width;
    $rec->mime = $file->mime;
    return $rec;
  }
  /**
   * @param int $ugid
   * @return ScanFile
   */
  static function asCriteria($ugid) {
    $c = new self();
    $c->userGroupId = $ugid;
    return $c;
  }
} 
//
class UploadFolder {
  //
  public $ugid;
  public $dir;
  public $files;
  //
  public function __construct($ugid) {
    $dir = "scanfiles\G$ugid";
    if (! is_dir($dir))
      if (! mkdir($dir)) 
        throw new UploadFolderException($dir, 'Unable to access directory');
    $this->dir = $dir;
    $this->ugid = $ugid;
  }
  /**
   * @param UploadFile[] $files
   * @param int $count current file count
   */
  public function save($files, $count) {
    foreach ($files as &$file) {
      $file->setNewName($this->ugid, $count++);
      $filename = $this->getCompleteFilename($file->newName);
      move_uploaded_file($file->tmpName, $filename);
      $file->setImageInfo(getimagesize($filename));
    }
    return $files;
  }
  /**
   * @param UploadFile $file
   */
  public function output($file) {
    $filename = $this->getCompleteFilename($file->filename);
    $mime = $file->mime;
    header("Content-type: $mime");
    readfile($filename);
  }
  //
  protected function getCompleteFilename($filename) {
    return "$this->dir\\" . $filename;
  }
  /**
   * @param int $ugid
   * @return UploadFolder
   */
  static function open($ugid) {
    return new self($ugid);
  }
}
class UploadFile extends Rec {
  //
  public $name;     // 'original.jpg'
  public $type;     // 'image/jpeg'
  public $tmpName;  // 'C:\Windows\temp\phpE74.tmp'
  public $error;    // 0
  public $size;     // 23308
  //
  public $newName;  // 'S00000012'
  public $ext;      // 'jpg'
  public $mime;     // 'image/jpeg'
  public $width;    // 306
  public $height;   // 205
  //
  public function __construct() {
    $args = func_get_args(); 
    call_user_func_array(array('Rec', '__construct'), $args);
    $this->validate();
  }
  public function validate() {
    $this->ext = $this->getExt();
    if (empty($this->ext)) 
      throw new UploadFileException($this, "$this->name is an invalid type; only image and PDF files accepted");
    if ($this->size > 1000000) 
      throw new UploadFileException($this, "$this->name is too large; files must be less than 1M in size");
  }
  public function setNewName($ugid, $i) {
    $this->newName = "G$ugid" . sprintf("S%07d", $i);
  }
  public function setImageInfo($info) {  // from php getimagesize() 
    if ($this->type != 'pdf') {
      $this->width = $info[0];
      $this->height = $info[1];
      $this->mime = $info['mime'];
    } else {
      $this->mime = 'application/pdf';
    }
  }
  //
  private function getExt() {
    switch ($this->type) {
      case 'image/jpeg':
      case 'image/pjpeg':
        return 'jpg';
      case 'image/bmp':
      case 'image/x-windows-bmp':
        return 'bmp';
      case 'image/gif':
        return 'gif';
      case 'application/pdf':
        return 'pdf';
    }
  }
  /**
   * @param $f $_FILES field array
   * return array(UploadFile,..)
   */
  static function fromHttpPostFile($f) {
    $recs = array();
    arrayifyEach($f);
    for ($i = 0, $j = count($f['name']); $i < $j; $i++)
      if ($f['name'][$i]) 
        $recs[] = new self($f['name'][$i], $f['type'][$i], $f['tmp_name'][$i], $f['error'][$i], $f['size'][$i]);
    return $recs;
  }
}
//
class ScanningException extends Exception {
};
class UploadFolderException extends ScanningException {
  public $dir;
  public function __construct($dir, $message) {
    $this->dir = $dir;
    $this->message = $message; 
  }
}
class UploadFileException extends ScanningException {
  public $uploadFile;
  public function __construct($uploadFile, $message) {
    $this->uploadFile = $uploadFile;
    $this->message = $message; 
  }
}
?>