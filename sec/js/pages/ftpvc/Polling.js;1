/**
 * Polling
 * @author Warren Hornsby
 */
Polling = {
  //
  _polls:{},
  /*
   * @arg string id poll ID
   * @arg int interval in seconds
   * @arg int max total iterations allowed (optional)
   * @arg Function fn
   * @return Poll
   */
  register:function(id, interval, max, fn) {
    var poll = this._polls[id];
    if (poll == null) {
      poll = new Poll(id, interval, max, fn);
      this._polls[id] = poll;
    }
    return poll;
  }
}
function Poll(id, interval, max, fn) {
  this.id = id;
  this.iter = {
    'fn':fn,
    'interval':interval * 1000,
    'max':(max) ? max : 3600 / interval,
    'ct':0};
}
Poll.prototype = {
  id:null,
  iter:null,
  running:null,
  /*
   * @arg delay in seconds (optional, default 0)
   */
  start:function(delay) {  // Log.fn('Poll.start', [delay]);
    if (this.running == null) {
      var running = (Math.random() + '').substr(2);
      this.running = running;
      this.iter.ct = 0;
      delay = denull(delay, 0);
      var self = this;
      setTimeout(function(){self._start(running, delay * 1000)}, 0);
    }
  },
  stop:function() {
    if (this.running) 
      this.running = null;
  },
  isRunning:function() {
    return this.running != null;
  },
  //
  _start:function(running, delay) {  // Log.fn('Poll._start', [running, delay]);
    var self = this;
    setTimeout(function(){self._iterate(running)}, delay);
  },
  _iterate:function(running) {  // Log.fn('Poll._iterate', [running]);// Log.log('this.running=' + this.running);
    if (this.running == running) {
      this.iter.fn();
      this.iter.ct++;
      var self = this;
      if (this.max && this.iter.ct >= this.iter.max)
        this.stop();
      else
        setTimeout(function(){self._iterate(running)}, this.iter.interval);
    }
  }
}
/**
 * Invocations
 */
Polling.StaleFacesheet = {
  fs:null,
  _poll:null,
  _callback:null,
  /*
   * @callback(timestamp) when facesheet is stale (i.e. timestamp has changed)
   */
  load:function(callback) {
    this._callback = callback;
    var self = this;
    this._poll = Polling.register('StaleFacesheet', 20, null, function() {
      var fs = self.fs;  // Log.fn('iterate', [fs]);
      if (fs) {
        Ajax.Facesheet.pollCuTimestamp(fs.client.id,
          function(timestamp) {  // Log.log(timestamp + ',' + fs.cuTimestamp);
            if (timestamp != fs.cuTimestamp) {
              self.stop();
              self._callback(timestamp);
            }
          });
      }
    });
  },
  /*
   * Start polling for supplied facesheet after 60 second delay
   * @arg Facesheet fs
   */
  start:function(fs) {  // Log.fn('start', [fs]);
    if (this._poll) {
      if (this._poll.running)
        this.stop();
      this.fs = fs;
      this._poll.start(2);
    }
  },
  /*
   * Start immediately with same facesheet
   */
  resume:function() {  // Log.fn('resume');
    if (this._poll) {
      if (this._poll.running)
        this.stop();
      this._poll.start();
    }
  },
  /*
   * Stop/pause
   */
  stop:function() {  // Log.fn('stop');
    if (this._poll)
      this._poll.stop();
  },
  //
  _iterate:function() {
  }
}
