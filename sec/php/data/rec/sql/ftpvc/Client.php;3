<?php
require_once 'php/data/rec/sql/_SqlRec.php';
require_once 'php/data/rec/sql/ICard.php';
/**
 * Client Record
 */
class Client extends SqlRec {
  //
  public $clientId;
  public $userGroupId;
  public $uid;
  public $lastName;
  public $firstName;
  public $sex;
  public $birth;
  public $img;
  public $dateCreated;
  public $active;
  public $cdata1;
  public $cdata2;
  public $cdata3;
  public $cdata4;
  public $cdata5;
  public $cdata6;
  public $cdata7;
  public $cdata8;
  public $cdata9;
  public $dateUpdated;
  public /*Address*/ $AddressHome;
  public /*Address*/ $AddressEmergency;
  public /*Address*/ $AddressSpouse;
  public /*Address*/ $AddressFather;
  public /*Address*/ $AddressMother;
  public /*Address*/ $AddressRx;
  public /*[ICard]*/ $ICards;
  //
  const SEX_MALE = 'M';
  const SEX_FEMALE = 'F';
  public static $SEXES = array(
    Client::SEX_MALE => 'Male',
    Client::SEX_FEMALE => "Female");
  //
  public function getSqlTable() {
    return 'clients';
  }
  public function toJsonObject() {
    $o = parent::toJsonObject();
    Rec::addDateProps($o, array('birth'));
    return $o;
  }
  /**
   * @return array(type=>Address,..)  // All types returned, even if null
   */
  public function getAddresses() {
    return array(
      Address::TYPE_SHIP => get($this, 'AddressHome'),
      Address::TYPE_EMER => get($this, 'AddressEmergency'),
      Address::TYPE_SPOUSE => get($this, 'AddressSpouse'),
      Address::TYPE_FATHER => get($this, 'AddressFather'),
      Address::TYPE_MOTHER => get($this, 'AddressMother'),
      Address::TYPE_RX => get($this, 'addressRx')
      );
  }
  //
  /**
   * Static fetchers
   */
  public static function fetch($cid) {
    return SqlRec::fetch($cid, 'Client');
  }
  public static function fetchWithAddress($cid) {
    $rec = new Client($cid);
    $rec->Address = Address::fromClient($cid);
    return SqlRec::fetchOneBy($rec);
  }
  public static function fetchWithAddresses($cid) {
    $rec = Client::fetchWithAddress($cid);
    $rec->AddressEmergency = Address::fetchByClient($cid, Address::TYPE_EMER); 
    $rec->AddressSpouse = Address::fetchByClient($cid, Address::TYPE_SPOUSE); 
    $rec->AddressFather = Address::fetchByClient($cid, Address::TYPE_FATHER);
    $rec->AddressMother = Address::fetchByClient($cid, Address::TYPE_MOTHER);
    $rec->AddressRx = Address::fetchByClient($cid, Address::TYPE_RX);
    $rec->ICards = ICard::fetchAllByClient($cid);
    return $rec;
  }
  public static function fetchByUid($uid) {
    $rec = new Client();
    $rec->uid = $uid;
    return SqlRec::fetchOneBy($rec);
  }
  //
  /**
   * Merge client records (correct and dupe) 
   * Correct client will absorb dupe client data; dupe will be deactiated
   * @param int $cid of correct record
   * @param int $cidDupe of dupe record
   */
  public static function merge($cid, $cidDupe) {
    query("UPDATE sessions SET client_id=$cid WHERE client_id=$cidDupe");
    query("UPDATE scheds SET client_id=$cid WHERE client_id=$cidDupe");
    query("UPDATE data_allergies SET client_id=$cid WHERE client_id=$cidDupe AND source IS NULL");
    query("UPDATE data_diagnoses SET client_id=$cid WHERE client_id=$cidDupe");
    query("UPDATE data_hm SET client_id=$cid WHERE client_id=$cidDupe AND session_id=0 AND active=1");
    query("UPDATE data_immuns SET client_id=$cid WHERE client_id=$cidDupe");
    query("UPDATE data_immun_vacs SET client_id=$cid WHERE client_id=$cidDupe");
    query("UPDATE data_meds SET client_id=$cid WHERE client_id=$cidDupe AND source IS NULL");
    query("UPDATE data_vitals SET client_id=$cid WHERE client_id=$cidDupe");
    query("UPDATE clients SET user_group_id=0 WHERE client_id=$cidDupe");
    Client::mergeAddresses($cid, $cidDupe);
  }
  private static function mergeAddresses($cidt, $cidDupe) {
    $client = Client::fetchWithAddresses($cid);
    $clientDupe = Client::fetchWithAddresses($cidDupe);
    $adds = $client->getAddresses();
    $addsDupe = $clientDupe->getAddresses();
    foreach ($adds as $type => $add) {
      $addDupe = $addsDupe[$type];
      if ($add == null && $addDupe) {
        $addDupe->tableId = $client->clientId;
        $addDupe->save();
      }
    }
    if (count($client->ICards) == 0)
      query("UPDATE client_icards SET client_id=$client->clientId WHERE client_id=$clientDupe->clientId");
  }
}
?>