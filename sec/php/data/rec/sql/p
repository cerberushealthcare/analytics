<?php
require_once 'php/data/rec/sql/_ClientRec.php';
require_once 'php/data/rec/sql/UserGroups.php';
//
/**
 * CMS Clinical Quality Measures Reports
 * @author Warren Hornsby
 */
class CmsReports {
  //
  /**
   * NQF 0043
	 * Pneumonia Vaccination Status for Older Adults
   */
  static function getNQF0043($from, $to) {
    return CmsReport_NQF0043::from($from, $to);
  }
  /**
   * NQF 0034
   * Colorectal Cancer Screening
   */
  static function getNQF0034($from, $to) {
    return CmsReport_NQF0034::from($from, $to);
  }
  /**
   * NQF 0027
   * Smoking and Tobacco Use Cessation, Medical assistance
   */
    static function getNQF0027($from, $to) {
    return array(
      CmsReport_NQF0027_N1::from($from, $to),
      CmsReport_NQF0027_N2::from($from, $to));
  }
  /**
   * NQF 0038
   * Childhood Immunization Status
   */
  static function getNQF0038($from, $to) {
    return array(
      CmsReport_NQF0038_N1::from($from, $to),
      CmsReport_NQF0038_N2::from($from, $to),
      CmsReport_NQF0038_N3::from($from, $to),
      CmsReport_NQF0038_N4::from($from, $to),
      CmsReport_NQF0038_N5::from($from, $to),
      CmsReport_NQF0038_N6::from($from, $to),
      CmsReport_NQF0038_N7::from($from, $to),
      CmsReport_NQF0038_N8::from($from, $to),
      CmsReport_NQF0038_N9::from($from, $to),
      CmsReport_NQF0038_N10::from($from, $to),
      CmsReport_NQF0038_N11::from($from, $to),
      CmsReport_NQF0038_N12::from($from, $to));
  }
  /**
   * NQF 0013
   * Hypertension: Blood Pressure Measurement
   */
  static function getNQF0013($from, $to) {
    return CmsReport_NQF0013::from($from, $to);
  }
  /**
   * NQF 0421
   * Adult Weight Screening and Follow-Up
   */
  static function getNQF0421($from, $to) {
    return array(
      CmsReport_NQF0421_P1::from($from, $to),
      CmsReport_NQF0421_P2::from($from, $to));
  }
  /**
   * NQF 0041
   * Preventive Care and Screening: Influenza Immunization for Patients >= 50 Years Old
   */
  static function getNQF0041($from, $to) {
    return CmsReport_NQF0041::from($from, $to);
  }
  /**
   * NQF 0028a and b
   * Preventive Care and Screening Measure Pair: a. Tobacco Use Assessment, b. Tobacco Cessation
   */
  static function getNQF0028a($from, $to) {
    return CmsReport_NQF0028a::from($from, $to);
  }
  static function getNQF0028b($from, $to) {
    return CmsReport_NQF0028b::from($from, $to);
  }
  /**
   * NQF 0024
   * Weight Assessment and Counseling for Children and Adolescents
   */
  static function getNQF0024($from, $to) {
    return array(
      CmsReport_NQF0024_P1N1::from($from, $to),
      CmsReport_NQF0024_P1N2::from($from, $to),
      CmsReport_NQF0024_P1N3::from($from, $to),
      CmsReport_NQF0024_P2N1::from($from, $to),
      CmsReport_NQF0024_P2N2::from($from, $to),
      CmsReport_NQF0024_P2N3::from($from, $to),
      CmsReport_NQF0024_P3N1::from($from, $to),
      CmsReport_NQF0024_P3N2::from($from, $to),
      CmsReport_NQF0024_P3N3::from($from, $to));
  }
}
/**
 * CmsReport
 */
abstract class CmsReport {
  //
  public $measureNumber;
  public $popNumber = 0;  // 0 indicates single population
  public $numNumber = 0;  // 0 indicates single numerator
  public $from;
  public $to;
  public $measureGroup = 'D';  // TODO?
  public /*CmsScorecard*/ $Scorecard;
  public /*UserGroup*/ $UserGroup;
  public /*User_Cms*/ $User;
  //
  public function calculate($ugid, $from, $to) {
    $pops = $this->fetchPop($ugid, $from, $to);
    $nums = $this->fetchNum($ugid, $from, $to);
    $excs = $this->fetchExc($ugid, $from, $to);
    $this->Scorecard = CmsScorecard::from($this->measureNumber, $pops, $nums, $excs);
  }
  public function fetchExc($ugid, $from, $to) {
    return null;
  }
  //
  static function from($from, $to) {
    $me = new static();
    $me->from = $from;
    $me->to = $to;
    $me->UserGroup = UserGroups::getMine();
    $me->User = User_Cms::fetchMine();
    $me->calculate($me->UserGroup->userGroupId, $from, $to);
    return $me; 
  }
  static function monthsPast($t1 = 1, $t2 = 2, $months = 6) {
    return CriteriaValue::sql("PERIOD_DIFF(EXTRACT(YEAR_MONTH FROM t$t1.date),EXTRACT(YEAR_MONTH FROM t$t2.date)) BETWEEN 0 AND $months");
  }
}
/**
 * SQL Records
 */
class Client_Cms extends SqlRec implements ReadOnly {
  public $clientId;
  public $userGroupId;
  public $birth;
  public $sex;
  //
  public function getSqlTable() {
    return 'clients';
  }
  //
  static function asPop($ugid, $dateFrom, $dateTo, $ageFrom, $ageTo) {
    $c = new static();
    $c->userGroupId = $ugid;
    $c->birth = CriteriaValue::betweenAge(array($ageFrom, $ageTo), $dateFrom, $dateTo);
    return $c;
  }
}
class Vital_Cms extends SqlRec implements ReadOnly {
  public $dataVitalsId;
  public $clientId;
  public $bpSystolic;
  public $bpDiastolic;
  public $bmi;
  //
  public function getSqlTable() {
    return 'data_vitals';
  }
}
class Allergy_Cms extends SqlRec implements ReadOnly {
  public $dataAllergyId;
  public $agent;
  public $active;
  //
  public function getSqlTable() {
    return 'data_allergies';
  }
  static function asActive() {
    $c = new static();
    $c->active = true;
    return $c;
  }
}
class Immun_Cms extends SqlRec implements ReadOnly {
  public $dataImmunId;
  public $dateGiven;
  public $name;
  //
  public function getSqlTable() {
    return 'data_immuns';
  }
  static function cvNames($names) {
    foreach ($names as &$name) 
      $name = CriteriaValue::contains($name);
    return $names;
  }
}
class Proc_Cms extends SqlRec implements ReadOnly {
  public $procId;
  public $clientId;
  public $date;  
  public $ipc;
  //
  public function getSqlTable() {
    return 'procedures';
  }
  public function setDates($from, $to) {
    $this->date = CriteriaValue::betweenDates(array($from, $to));
  }
  static function from($ipc, $from = null, $to = null) {
    $c = new static();
    $c->ipc = $ipc;
    if ($from && $to)
      $c->setDates($from, $to);
    return $c;
  }
  static function fromIpcs() {
    $ipcs = func_get_args();
    $c = new static();
    $c->ipc = CriteriaValue::in($ipcs);
    return $c;
  }
}
class Diag_Cms extends SqlRec implements ReadOnly {
  public $dataDiagnosesId;
  public $clientId;
  public $icd;
  public $text;
  public $active;
  public $status;
  //
  public function getSqlTable() {
    return 'data_diagnoses';
  }
  static function asActive() {
    $c = new static();
    $c->active = true;
    return $c;
  }
  static function asResolved() {
    $c = new static();
    $c->status = 20;
    return $c;
  }
  static function cvIcds() {
    $icds = func_get_args();
    return CriteriaValue::in($icds);
  }
  static function cvIcdStarts() {
    $icds = func_get_args();
    foreach ($icds as &$icd) 
      $icd = CriteriaValue::startsWith($icd);
    return $icds;
  }
}
class Session_Cms extends SqlRec implements ReadOnly {
  public $sessionId;
  public $dateService;
  //
  public function getSqlTable() {
    return 'sessions';
  }
}
class User_Cms extends SqlRec implements ReadOnly {
  public $userId;
  public $npi;
  public $_tin = '123456';  // TODO
  public $_waiverSigned = true;  // TODO
  //
  public function getSqlTable() {
    return 'users';
  }
  static function fetchMine() {
    global $myLogin;
    return User_Cms::fetch($myLogin->userId);
  }
}
/**
 * CMS Scorecard
 */
class CmsScorecard extends Rec {
  public $id;
  public $eligibles;  // [cid,..]
  public $meets;  // [cid,..]
  public $exclusions;  // [cid,..]
  //
  const REPORTING_RATE = 100;
  //
  public function toJsonObject(&$o) {
    $o->_eligibles = $this->countEligibles();
    $o->_meets = $this->countMeets();
    $o->_exclusions = $this->countExclusions();
    $o->_notMeets = $this->countMeets();
    $o->_rate = $this->getPerformanceRate();
  }
  public function countMeets() {
    return count($this->meets);
  }
  public function countEligibles() {
    return count($this->eligibles) - count($this->exclusions);
  }
  public function countExclusions() {
    return count($this->exclusions);
  }
  public function countNotMeets() {
    return count($this->eligibles) - count($this->meets) - count($this->exclusions);
  }
  public function getPerformanceRate() {
    if ($this->countEligibles() != 0)
      return round($this->countMeets() / $this->countEligibles() * self::REPORTING_RATE, 2);
    else
      return 0;
  }
  //
  static function from($measure, $pops, $nums, $excs) {
    $pops = static::getIds($pops);
    $nums = static::getIds($nums);
    $excs = static::getIds($excs);
    $excs = array_diff($excs, $nums);  // omit exlusions already in numerator
    $pops = array_diff($pops, $excs);  // remove exclusions from population
    $me = new static();
    $me->_measure = $measure;
    $me->eligibles = $pops;
    $me->meets = $nums;
    $me->exclusions = $excs;
    return $me;
  }
  //
  private static function getIds($clients) {
    $recs = array();
    if ($clients)
      foreach ($clients as $client)
        $recs[$client->clientId] = 1;
    return $recs;
  }
}
require_once 'php/data/rec/sql/cms/NQF.php';
