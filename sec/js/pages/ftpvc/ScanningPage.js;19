/**
 * Scanning Page
 * @author Warren Hornsby
 */
ScanningPage = {
  init:function(uploaded) {
    page.tile = ScanIndexing.create(_$('scan-indexing'), uploaded);
    page.onresize();
    Page.setEvents();
  },
  onresize:function() {
    page.tile.setHeight(Html.Window.getViewportDim().height - 275);
  }
};
/** 
 * Tile ScanIndexing 
 *   Tile files
 *   Tile folders
 *     Tile entryFolder
 *       EntryForm form
 *       Div list
 *     Tile savedFolders
 */
ScanIndexing = {
  create:function(parent, scrollToBottom) {
    parent.clean();
    var self = Html.Tile.create(parent);
    return self.aug({
      init:function() {
        self.folders = ScanIndexing.Folders.create(self).aug({
          onchange:function() {
            self.files.load();
          },
          oncheck_file:function(scanFile, checked) {
            self.scanFile_oncheck(scanFile, checked); 
          },
          ondelete_file:function(scanFile, checked) {
            self.scanFile_ondelete(scanFile, checked); 
          }
        });
        self.files = ScanIndexing.Files.create(self, scrollToBottom).aug({
          oncheck_file:function(scanFile, checked) {
            self.scanFile_oncheck(scanFile, checked); 
          },
          ondelete_file:function(scanFile, checked) {
            self.scanFile_ondelete(scanFile, checked); 
          }
        });
        self.setHeight(400);
        var t = Html.Table.create(self, 'w100 c2').tbody();
        t.tr().td(Html.H2.create('Unindexed Files'), 'cj').w('40%').td(Html.H2.create('Indexed Folders'), 'cj pr').w('60%');
        t.tr().td(self.files).td(self.folders).rowspan(2);
        var td = t.tr().td()._cell;
        Html.CmdBar.create(td).button('Upload Files...', self.upload_onclick);
        self.folders.load();
        self.files.load();
      },
      setHeight:function(i) {
        i = Math.larger(i, 200);
        self.folders.setHeight(i);
        self.files.setHeight(i);
      },
      //
      scanFile_oncheck:function(scanFile, checked) {
        scanFile.resetZoom();
        if (checked)
          self.folders.entryFolder.add(scanFile);
        else
          self.files.add(scanFile);
      },
      scanFile_ondelete:function(scanFile, checked) {
        if (checked)
          return;
        Pop.Confirm.showYesNo('Are you sure you want to delete file ' + scanFile.rec.origFilename + '?', function() {
          self.working(true);
          Ajax.Scanning.deleteFile(scanFile.rec.scanFileId, 
            function(id) {
              self.working(false);
              self.files.load();
            });
        });
      },
      upload_onclick:function() {
        _$('pop-upload-info').hide();
        Pop.show('pop-upload');
      }
    });
  },
  Folders:{
    create:function(parent) {
      var self = Html.Tile.create(parent, 'Folders');
      return self.aug({
        onchange:function() {},
        oncheck_file:function(scanFile, checked) {},
        ondelete_file:function(scanFile, checked) {}, 
        //
        init:function() {
          self.entryFolder = ScanIndexing.Folders.EntryFolder.create(self).bubble('onupdate', self.entry_onupdate).bubble('onopen', self.entry_onopen).bubble('onclose', self.entry_onclose).bubble('oncancel', self, 'onchange').bubble('oncheck_file', self).bubble('ondelete_file', self);
          self.savedFolders = ScanIndexing.Folders.SavedFolders.create(self).bubble('onclickrec', self.saved_onclick);
          self.entryFolder.close();
        },
        load:function() {
          self.savedFolders.load();
        },
        setHeight:function(i) {
          self.entryFolder.list.setHeight(i - 175);
        },
        //
        entry_onopen:function() {
          self.savedFolders.hide();
        },
        entry_onclose:function() {
          self.savedFolders.show();
        },
        entry_onupdate:function() {
          self.savedFolders.load();
          self.onchange();
        },
        saved_onclick:function(rec) {
          self.entryFolder.open(rec);
        }
      });
    },
    EntryFolder:{
      create:function(parent) {
        var self = Html.Tile.create(parent, 'EntryFolder'); 
        return self.aug({
          onopen:function() {},
          onclose:function() {},
          onupdate:function() {},
          oncancel:function() {},
          oncheck_file:function(scanFile, checked) {},
          ondelete_file:function(scanFile, checked) {},
          //
          init:function() {
            self.tbar = ScanIndexing.Folders.EntryFolder.Title.create(self).bubble('onclick_create', self.open);
            self.content = Html.Div.create().into(self).hide();
            self.form = ScanIndexing.Folders.EntryFolder.EntryForm.create(self.content);
            self.list = ScanIndexing.Folders.EntryFolder.FileList.create(self.content, self).bubble('oncheck_file', self).bubble('ondelete_file', self);
            self.cmd = ScanIndexing.Folders.EntryFolder.CmdBar.create(self.content, self);
            self.rec = null;
          },
          open:function(rec) {
            self.rec = rec;
            self.addClassIf('update', rec);
            self.tbar.hide();
            self.cmd.showDelIf(rec);
            self.content.show();
            self.form.load(rec);
            self.list.load(rec);
            self.closed = null;
            self.onopen();
          },
          close:function(updated) {
            self.rec = null;
            self.removeClass('update');
            self.tbar.show();
            self.content.hide();
            self.closed = self;
            self.onclose();
            if (updated)
              self.onupdate();
            return self;
          },
          add:function(scanFile) {
            if (self.closed)
              self.open();
            self.list.add(scanFile);
          },
          isDirty:function() {
            return self.form.isRecordChanged() || self.list.isDirty();
          },
          //
          save_onclick:function() {
            self.working(true);
            var rec = self.form.getRecord();
            Ajax.Scanning.saveIndex(self.form.getRecord(), self.list.getScanFileIds(),  
              function(rec) {
                self.working(false);
                self.close(true);
              });
          },
          del_onclick:function() {
            Pop.Confirm.showYesNo('Are you sure you want to remove this index?<br><br>Note: Only the index will be deleted. Any scanned files in this index will be returned to Unindexed Files.', function() {
              self.working(true);
              Ajax.Scanning.removeIndex(self.rec.scanIndexId, 
                function(id) {
                  self.working(false);
                  self.close(true);
                });
            });
          },
          cancel_onclick:function() {
            if (self.isDirty()) {
              Pop.Confirm.show('This index record has unsaved changes. Save now?', 'Save Now', 'save', "Don't Save", null, true, null,
                function(confirmed) {
                  if (confirmed) {
                    self.save_onclick();
                  } else {
                    if (self.list.isDirty())
                      self.oncancel();
                    self.close();
                  }
                });
            } else {
              self.close();
            }
          }
        });
      },
      Title:{
        create:function(parent) {
          var self = Html.Tile.create(parent, 'new-index');
          return self.aug({
            onclick_create:function() {},
            //
            init:function() {
              Html.Anchor.create(null, 'Create New...').into(self).bubble('onclick', self, 'onclick_create');
            }
          });
        }
      },
      EntryForm:{
        create:function(parent) {
          var ef = Html.EntryForm.create(parent, 'first50', {
            load:function(rec) {
              if (rec) {
                ef.setRecord(rec);
                ef.focus('scanType');
              } else {
                ef.reset();
                ef.popClient();
              }
            },
            popClient:function() {
              ef._popClientPicker('clientId');
            },
            type_onchange:function() {
              ef.showScanType();
            },
            type_onpop:function() {
              ef.spanipc.hide();
            },
            provider_onset:function(rec) {
              if (rec) {
                if (rec.Address_addrFacility) 
                  ef.setValue('addrFacility', rec.Address_addrFacility);
                if (rec.area) {
                  if (Array.isEmpty(ef.getValue('areas')))
                    ef.setValue('areas', [rec.area]); 
                }
              }
            },
            showScanType:function() {
              if (ef.getValue('scanType') == C_ScanIndex.TYPE_RESULT) {
                ef.spanipc.show();
                ef.focus('ipc');
              } else {
                ef.spanipc.hide();
              }
            }
          });
          ef.li('To', 'fr').select('recipient', C_Docs).check('reviewed', 'Reviewed');
          ef.li().client('clientId', '(Select Patient)', 'Client');
          ef.li('Type', 'mt5').atradio('scanType', C_ScanIndex.TYPES, ef.type_onchange, ef.type_onpop).startSpan('ef-ipc').lbl('for', 'nopad').picker(IpcPicker, 'ipc', 'Ipc_ipc').endSpan();
          ef.li('Provider', 'mt10').picker(ProviderPicker, 'providerId', 'Provider', ef.provider_onset).lbl('at', 'nopad').picker(FacilityPicker, 'addrFacility', 'Address_addrFacility');
          ef.li('Date', 'nopad').date('datePerformed');
          ef.li('Area', 'mt5').atab('areas', MultiAreaAtab);
          ef.spanipc = _$('ef-ipc');
          ef.showScanType();
          return ef;
        }
      },
      FileList:{
        create:function(parent, context) {
          var self = Html.Div.create('EntryFolderList').into(parent);
          return self.aug({
            oncheck_file:function(scanFile, checked) {},
            ondelete_file:function(scanFile, checked) {},
            //
            load:function(rec) {
              this.clean();
              if (rec)
                Array.forEach(rec.ScanFiles, function(rec) {
                  ScanFileCheck.create(self, rec, true).aug({
                    oncheck:function(scanFile, checked) {
                      self.oncheck_file(scanFile, checked);
                    },
                    ondelete:function(scanFile, checked) {
                      self.ondelete_file(scanFile, checked);
                    }
                  });
                });
              this._recOrig = Json.encode(self.getScanFileIds());
            },
            add:function(scanFile) {
              self.append(scanFile);
            },
            isDirty:function() {
              var _recNow = Json.encode(self.getScanFileIds());
              return (_recNow != self._recOrig);
            },
            getScanFileIds:function() {
              var recs = [];
              Array.forEach(self.children, function(scanFile) {
                recs.push(scanFile.rec.scanFileId);
              });
              return recs;
            }
          });
        }
      },
      CmdBar:{
        create:function(parent, context) {
          return Html.CmdBar.create(parent).save(context.save_onclick).del(context.del_onclick).cancel(context.cancel_onclick);
        }
      }
    },
    SavedFolders:{
      create:function(parent) {
        var self = Html.Tile.create(parent, 'SavedFolders');
        return self.aug({
          onload:function() {},
          onclickrec:function(rec) {},
          //
          load:function() {
            self.working(true);
            self.clean();
            Ajax.Scanning.getIndexedToday(function(recs) {
              if (recs.length) {
                Html.H3.create("Created Today").into(self);                  
                Array.forEach(recs, function(rec) {
                  ScanIndexing.Folders.SavedFolders.Folder.create(self, rec).bubble('onclickrec', self);
                });
              }
              self.working(false);
              self.onload();
            });
          }
        });
      },
      Folder:{
        create:function(parent, rec) {
          var self = Html.Div.create('Folder').into(parent);
          return self.aug({
            onclickrec:function(rec) {},
            //
            init:function() {
              self.rec = rec;
              self.anchor = Html.Anchor.create().into(self);
              self.anchor.innerHTML = '<b>' + rec.Client.name + '</b> &bull; ' + C_ScanIndex.TYPES[rec.scanType];
              self.anchor.onclick = function(){self.onclickrec(rec)};
            }
          });
        }
      }
    }
  },
  Files:{
    create:function(parent, scrollToBottom) {
      var self = Html.Tile.create(parent, 'ScanIndex');
      return self.aug({
        oncheck_file:function(scanFile, checked) {},
        ondelete_file:function(scanFile, checked) {},
        //
        load:function() {
          self.clean();
          self.working(true);
          var file;
          Ajax.Scanning.getUnindexed(function(recs) {
            Array.forEach(recs, function(rec) {
              file = ScanFileCheck.create(self, rec, false).aug({
                oncheck:function(scanFile, checked) {
                  self.oncheck_file(scanFile, checked);
                },
                ondelete:function(scanFile, checked) {
                  self.ondelete_file(scanFile, checked);
                }
              });
            });
            if (! scrollToBottom)
              Html.Animator.scrollTo(self, file);
            self.working(false);
          });
        }, 
        add:function(scanFile) {
          self.append(scanFile); 
        }
      });
    }
  }
};
/**
 * Div ScanFileCheck
 *   ScanFile rec
 *   ImageScanThumb thumb
 *   InputCheck check
 *   Label label
 *   Anchor remove
 */
ScanFileCheck = {
  create:function(parent, rec, checked) {
    var self = Html.Div.create('ScanFile').into(parent);
    return self.aug({
      oncheck:function(scanFile, checked) {},
      ondelete:function(scanFile, checked) {},
      //
      init:function() {
        self.remove = Html.Anchor.create('remove').tooltip('Delete this file').into(self).aug({
          onclick:function() {
            self.ondelete(self, self.check.checked);
          }
        });
        self.rec = rec;
        self.thumb = ImageScanThumb.create(self, rec, 70);
        self.check = Html.InputCheck.create().into(self).hide().aug({
          onclick:function() {
            self.toggle();
            self.oncheck(self, self.check.checked);
          }});
        self.label = Html.Label.create(null, rec.origFilename).into(self);
        var span = Html.Span.create('wrapper').into(self).aug({
          onclick:function() {
            self.check.checked = ! self.check.checked;
            self.toggle();
            self.oncheck(self, self.check.checked);
          }
        })
        Html.Table.create(span).tbody().tr().td(self.thumb).td(self.check).td(self.label, 'p5');
        self.check.checked = checked;
        self.toggle();
      },
      isChecked:function() {
        return self.check.checked;
      },
      resetZoom:function() {
        if (self.thumb.zoom)
          self.thumb.zoom.hide();
      },
      //
      toggle:function() {
        self.addClassIf('check', self.check.checked);
        self.thumb.shrink(self.check.checked);
        self.remove.showIf(! self.check.checked && ! checked);
      }
    });
  }
};
/**
 * Image ImageScanThumb
 *   Image zoom
 */
ImageScanThumb = {
  create:function(parent, rec, maxh, maxw) {
    var My = this;
    var h = String.toInt(rec.height || maxh);
    var w = String.toInt(rec.width || maxw);
    var size = ImageScanThumb.resize(h, maxh || 100, w, maxw || 50);
    var self = Html.Image.create(null, rec.src, size.h, size.w).into(parent);
    return self.aug({
      init:function() {
        self.parent = parent;
        self.h = size.h;
        self.w = size.w;
        self.rec = rec;
        if (rec._pdf) 
          self.zoom = My.PdfZoom.create(self);
        else 
          self.zoom = My.ImageZoom.create(self, ImageScanThumb.resize(h, 500, w, 400));
        self.aug({
          onmouseover:function() {
            self.preview(true);
            //self.onmousemove = self._onmousemove;
          },
          _onmousemove:function() {
            if (self.zoom.previewing) {
              self.zoom.preview(false);
              self.onmousemove = null;
            } else {
              self.zoom.preview(true);
            }
          },
          onmouseout:function() {
            self.preview(false);
          }
        });
      },
      preview:function(on) {
        if (self.zoom)
          self.zoom.preview(on);
      },
      shrink:function(on) {
        if (on) 
          return self.setHeight(25).setWidth(25);
        else
          return self.setHeight(self.h).setWidth(self.w);
      }
    });
  },
  resize:function(h, maxh, w, maxw) {
    var r = h / w;
    if (h > maxh || w > maxw) {
      if (r > 1 && h > maxh) {
        r = maxh / h;
        h = maxh;
        w = w * r;
      } else {
        r = maxw / w;
        w = maxw;
        h = h * r;
      }
    }
    return {'h':h, 'w':w};
  },
  ImageZoom:{
    create:function(thumb, size) {
      return Html.Div.create('Zoom').into(thumb.parent).hide().extend(function(self) {
        return {
          init:function() {
            self.setPosition('absolute');  //.style.margin = '-' + (thumb.h + 10) + 'px 0 0 10px';
            self.cap = Html.Div.create('cap').into(self).setText(thumb.rec.origFilename).setWidth(size.w);
            self.img = Html.Image.create(null, thumb.src, size.h, size.w).into(self);
          },
          onmouseover:function() {
            if (! self.previewing)
              self.preview(true);
          },
          onmouseout:function() {
            if (self.previewing) 
              self.preview(false);
          },
          preview:function(on) {
            self.previewing = (on) ? self : null;
            self.showIf(on);
            if (on)
              self.onscreen();
          },
          onscreen:function() {
            if (! self.onscreenset) {
              var dim = self.getPosDim();
              dim.left = dim.left + 50;
              var wp = Html.Window.getViewportDim();
              var cw = document.body.offsetWidth;
              var ch = document.documentElement.clientHeight;
              if ((dim.left + dim.width) > wp.width)
                dim.left = wp.width - dim.width;
              if ((dim.top + dim.height) > wp.height) 
                dim.top = wp.height - dim.height;
              if (dim.left < 0) 
                dim.left = 0;
              if (dim.top < 0) 
                dim.top = 0;
              self.setLeft(dim.left).setTop(dim.top);  // setTop(ac.y + Html.Window.getScrollTop());
              self.onscreenset = self;
            }
          }
        }
      })
    }
  },
  PdfZoom:{
    create:function(thumb) {
      var size = {'h':450, 'w':350};
      return ImageScanThumb.ImageZoom.create(thumb, size).extend(function(self) {
        return {
          //
          init:function() {
            self.img.hide();
            self.iframe = Html.IFrame.create(null, thumb.rec.pdfsrc, size.h, size.w).into(self);
          }
        }
      })
    }    
  }
};
/**
 * AnchorTab MultiAreaAtab
 */
MultiAreaAtab = {
  create:function() {
    return Html.AnchorTab.create().checks(C_Lookups.AREAS, 3).okCancel();
  }
}
/**
 * Assign global instance
 */
var page = ScanningPage;  