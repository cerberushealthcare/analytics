<?php
require_once "php/dao/_util.php";
require_once "php/data/Version.php";
/**
 * Chart definitions 
 */
class ChartIndex {
  //
  private static $AXES = array(
    'hcfa' => 'Head circumference-for-age',
    'lfa' => 'Length-for-age',
    'sfa' => 'Stature-for-age',
    'wfa' => 'Weight-for-age',
    'wfl' => 'Weight-for-length',
    'wfa' => 'Weight-for-age',
    'wfs' => 'Weight-for-stature',
    'bmi' => 'Body mass index-for-age'
    );
  private static $SEXES = array(
    'girls' => 'Girls', 
    'boys' => 'Boys'
    );
  private static $AGES = array(
    '0t36m' => 'birth to 36 months',
    '0t2y' => 'birth to 2 years',
    '2t20y' => '2 to 20 years'
    );
  public static $AXIS_VITALS = array(
    'Age (mos)' => 'cagem',
    'Age (yrs)' => 'cagey',
    'Head (in)' => 'hc',
    'Length (in)' => 'height',
    'Length (cm)' => 'htcm',
    'Stature (in)' => 'height',
    'Weight (lbs)' => 'wt',
    'Weight (kgs)' => 'wtkg',
    'BMI (kg/m3)' => 'bmi',
    'Pulse (bpm)' => 'pulse',
    'RR (bpm)' => 'resp',
    'Temp (f)' => 'temp',
    'BP' => 'bp',
    'Date' => 'date'
    );
  public static $CHARTS = array(  
    // WHO growth charts with image background
    'lfa-boys-0t2y-who' => array(
      'dim' => array(89, 67, 747, 478),
      'y' => array(45, 95, 'Length (cm)'),
      'x' => array(0, 24, 'Age (mos)')),
    'lfa-girls-0t2y-who' => array(
      'dim' => array(88, 67, 748, 479),
      'y' => array(45, 95, 'Length (cm)'),
      'x' => array(0, 24, 'Age (mos)')),
    'wfa-boys-0t2y-who' => array(
      'dim' => array(88, 67, 748, 479),
      'y' => array(1.4, 16.6, 'Weight (kgs)'),
      'x' => array(0, 24, 'Age (mos)')),
    'wfa-girls-0t2y-who' => array(
      'dim' => array(88, 67, 748, 479),
      'y' => array(1.4, 15.6, 'Weight (kgs)'),
      'x' => array(0, 24, 'Age (mos)')),
    'wfl-boys-0t2y-who' => array(
      'dim' => array(89, 67, 748, 479),
      'y' => array(1, 23, 'Weight (kgs)'),
      'x' => array(45, 110, 'Length (cm)')),
    'wfl-girls-0t2y-who' => array(
      'dim' => array(87, 67, 748, 479),
      'y' => array(1, 23, 'Weight (kgs)'),
      'x' => array(45, 110, 'Length (cm)')),
    // CDC Growth charts with image background
    'hcfa-boys-0t36m' => array(  
      'dim' => array(0, 67, 557, 786),
      'x' => array(0, 38, 'Age (mos)'),
      'y' => array(11.5, 23, 'Head (in)')),
    'hcfa-girls-0t36m' => array(
      'dim' => array(0, 76, 550, 790),
      'x' => array(0, 38, 'Age (mos)'),
      'y' => array(11.5, 23, 'Head (in)')),
    'lfa-boys-0t36m' => array(
      'dim' => array(0, 69, 551, 791),
      'x' => array(0, 38, 'Age (mos)'),
      'y' => array(16, 43, 'Length (in)')),
    'lfa-girls-0t36m' => array(
      'dim' => array(0, 71, 551, 790),
      'x' => array(0, 38, 'Age (mos)'),
      'y' => array(16, 43, 'Length (in)')),
    'wfa-boys-0t36m' => array(
      'dim' => array(0, 58, 566, 792),
      'x' => array(0, 38, 'Age (mos)'),
      'y' => array(3, 42, 'Weight (lbs)')),
    'wfa-girls-0t36m' => array(
      'dim' => array(0, 59, 565, 787),
      'x' => array(0, 38, 'Age (mos)'),
      'y' => array(3, 42, 'Weight (lbs)')),
    'wfl-boys-0t36m' => array(
      'dim' => array(0, 43, 568, 760),
      'x' => array(17, 43, 'Length (in)'),
      'y' => array(0, 53, 'Weight (lbs)')),
    'wfl-girls-0t36m' => array(
      'dim' => array(0, 44, 566, 759),
      'x' => array(17, 43, 'Length (in)'),
      'y' => array(0, 53, 'Weight (lbs)')),
    'bmi-boys-2t20y' => array(
      'dim' => array(0, 47, 568, 788),
      'x' => array(2, 21, 'Age (yrs)'),
      'y' => array(10, 37, 'BMI (kg/m3)')),
    'bmi-girls-2t20y' => array(
      'dim' => array(0, 48, 569, 789),
      'x' => array(2, 21, 'Age (yrs)'),
      'y' => array(10, 37, 'BMI (kg/m3)')),
    'sfa-boys-2t20y' => array(
      'dim' => array(0, 80, 542, 788),
      'x' => array(2, 21, 'Age (yrs)'),
      'y' => array(28, 80, 'Stature (in)')),
    'sfa-girls-2t20y' => array(
      'dim' => array(0, 73, 546, 787),
      'x' => array(2, 21, 'Age (yrs)'),
      'y' => array(28, 80, 'Stature (in)')),
    'wfa-boys-2t20y' => array(
      'dim' => array(0, 70, 559, 783),
      'x' => array(2, 21, 'Age (yrs)'),
      'y' => array(10, 240, 'Weight (lbs)')),
    'wfa-girls-2t20y' => array(
      'dim' => array(0, 70, 550, 791),
      'x' => array(2, 21, 'Age (yrs)'),
      'y' => array(10, 240, 'Weight (lbs)')),
    'wfs-boys-2t20y' => array(
      'dim' => array(0, 54, 569, 752),
      'x' => array(30, 49, 'Stature (in)'),
      'y' => array(15, 78, 'Weight (lbs)')),
    'wfs-girls-2t20y' => array(
      'dim' => array(0, 54, 569, 750),
      'x' => array(30, 49, 'Stature (in)'),
      'y' => array(15, 78, 'Weight (lbs)')),
    // Vitals charts for date range (no image)
    'vitals-bp' => array(
      'title' => 'BLOOD PRESSURE-BY-DATE',
      'y' => array(null, null, 'BP')),
    'vitals-bmi' => array(
      'title' => 'BODY MASS INDEX-BY-DATE',
      'y' => array(15, 65, 'BMI (kg/m3)')),
    'vitals-pulse' => array(
      'title' => 'PULSE-BY-DATE',
      'y' => array(null, null, 'Pulse (bpm)')),
    'vitals-rr' => array(
      'title' => 'RESPIRATORY RATE-BY-DATE',
      'y' => array(null, null, 'RR (bpm)')),
    'vitals-temp' => array(
      'title' => 'TEMPERATURE-BY-DATE',
      'y' => array(90, 108, 'Temp (f)')),
    'vitals-weight' => array(
      'title' => 'WEIGHT-BY-DATE',
      'y' => array(null, null, 'Weight (lbs)'))
  );
  // Chart types
  const TYPE_VITALS_BY_DATE = 1;
  const TYPE_GROWTH_CDC = 2;
  const TYPE_GROWTH_WHO = 3;
  //
  /**
   * Get charts appropriate for client in JSON
   * @param string $sex 'M' or 'F'
   * @param int $age in years
   * @return [{'id':$,'title':$},..]
   */
  public static function getChartsJson($sex, $age) {
    $filters = ChartIndex::getFilters($sex, $age); 
    $charts = array();
    foreach ($filters as &$filter) {
      foreach (ChartIndex::$CHARTS as $id => &$specs) {
        if (strpos($id, $filter) !== false) {
          $charts[] = array(
            'id' => $id,
            'title' => ChartIndex::getTitle($id)
            );
        }
      }
    }
    return jsonencode($charts);
  }
  /**
   * Get chart by ID in JSON
   * @param string $id
   * @param JDataVital[] $vitals
   * @return {
   *   'id':$,
   *   'title':$,
   *   'graph':{
   *     'x':{'values':[#,#],'label':$},
   *     'y':{'values':[#,#],'label':$}
   *     'dim':{'top':#,'left':#,'width':#,'height':#},
   *     },
   *   'pts':[(x,y),..]
   *   }
   */
  public static function getChartJson($id, $vitals) {
    $specs = ChartIndex::getSpecs($id);
    $title = ChartIndex::getTitle($id, $specs);
    $img = ChartIndex::getImg($id, $specs);
    switch ($specs['type']) {
      case ChartIndex::TYPE_GROWTH_CDC:
      case ChartIndex::TYPE_GROWTH_WHO:
        $dim = $specs['dim'];
        $xr = $specs['x'];
        $yr = $specs['y'];
        $pts = ChartIndex::getPoints($vitals, $xr, $yr);
        break;
      case ChartIndex::TYPE_VITALS_BY_DATE:
        $dim = array(0, 70, 550, 790);
        $xr = array(0, 24854, 'Date');
        $yr = $specs['y'];
        $pts = ChartIndex::getPoints($vitals, $xr, $yr);
        $spread = ChartIndex::getSpread($pts);
        if ($spread) {
          $xr[0] = $spread['x0'] - 30;
          $xr[1] = $spread['x1'] + 30;
          if ($yr[0] === null) {
            $yr[0] = ($spread['yr'] < 80) ? $spread['y0'] - (40 - $spread['yr'] / 2) : $spread['y0'];
            $yr[0] = ($yr[0] < 0) ? -5 : $yr[0] - $yr[0] % 10 - 5;
            $yr[1] = $yr[0] + 100;
            $yr[1] = ($yr[1] > $spread['y1']) ? $yr[1] : $spread['y1'] + 5;
          }
        } else {
          if ($yr[0] == null) 
            $yr = array(0, 100, $yr[2]);
        }
        break;
    }
    $chart = ChartIndex::buildChart($id, $title, $img, $xr, $yr, $dim, $pts);
    $chart['type'] = $specs['type'];
    $chart['girls'] = (strpos($id, '-girls') !== null);
    return jsonencode($chart);
  }
  //
  private static function getSpread($pts) {
    $spread = null;
    if (count($pts) > 0) {
      $spread = array('x0' => $pts[0][0], 'x1' => $pts[0][0], 'y0' => $pts[0][1], 'y1' => $pts[0][1]);
      for ($i = 1; $i < count($pts); $i++) {
        $pt = $pts[$i];
        if ($pt[0] < $spread['x0']) {
          $spread['x0'] = $pt[0];
        }
        if ($pt[0] > $spread['x1']) {
          $spread['x1'] = $pt[0];
        }
        if ($pt[1] < $spread['y0']) {
          $spread['y0'] = $pt[1];
        }
        if ($pt[1] > $spread['y1']) {
          $spread['y1'] = $pt[1];
        }
      }
      $spread['xr'] = $spread['x1'] - $spread['x0'];
      $spread['yr'] = $spread['y1'] - $spread['y0'];
    }
    return $spread;
  }
  private static function getSpecs($id) {
    $specs = ChartIndex::$CHARTS[$id];
    $specs['type'] = ChartIndex::getChartType($id);
    return $specs;
  }
  private static function getChartType($id) {
    if (strpos($id, 'vitals-') !== false) {
      return ChartIndex::TYPE_VITALS_BY_DATE;    
    } 
    if (substr($id, -4) == '-who') {
      return ChartIndex::TYPE_GROWTH_WHO;  
    }
    return ChartIndex::TYPE_GROWTH_CDC;
  }
  private static function buildChart($id, $title, $img, $xr, $yr, $dim, $pts) {
    return array(
      'id' => $id,
      'title' => $title,
      'graph' => array( 
        'x' => array(
          'label' => array_pop($xr),
          'values' => $xr
          ),
        'y' => array(
          'label' => array_pop($yr),
          'values' => $yr
          ),
        'dim' => array(
          'top' => $dim[0],
          'left' => $dim[1],
          'width' => $dim[2],
          'height' => $dim[3],
          'img' => $img,
          )
        ),
      'pts' => $pts
      );
  }
  private static function getPoints($vitals, $xr, $yr) {
    $pts = array();
    $xfid = ChartIndex::getAxisVital($xr);
    $yfid = ChartIndex::getAxisVital($yr);
    foreach ($vitals as &$vital) {
      $x = ChartIndex::getVitalValue($vital, $xfid, $xr);
      $y = ChartIndex::getVitalValue($vital, $yfid, $yr);
      if ($x !== null && $y !== null) {
        if (is_array($y)) {
          foreach ($y as $yi) {
            $pts[] = array($x, $yi);
          }
        } else {
          $pts[] = array($x, $y);
        }
      }
    }
    return $pts;
  }
  private static function getVitalValue($vital, $fid, $r) {
    switch ($fid) {
      case 'date':
        return ChartIndex::toJulian($vital->date);
      case 'bp':
        $s = $vital->bpSystolic;
        $d = $vital->bpDiastolic;
        if ($s == null || $d == null) {
          return null;
        }
        return array(floatval($s), floatval($d));
      default:
        $value = $vital->$fid;
        if ($value === null) {
          return null;
        }
        $val = floatval($value);
        return (ChartIndex::inRange($val, $r)) ? $val : null;
    }
  }
  private static function inRange($v, $r) {
    if ($r[0] === null && $r[1] === null) {
      return true;
    }
    if ($r[0] < $r[1]) {
      return ($v >= $r[0] && $v <= $r[1]);
    } else {
      return ($v >= $r[1] && $v <= $r[0]);
    }
  }
  private static function toJulian($date) {
    return unixtojd(strtotime($date)) - 2440588;
  }
  private static function getAxisVital($axis) {
    $label = $axis[2];
    return ChartIndex::$AXIS_VITALS[$label];
  }
  private static function getTitle($id, $specs = null) {
    if ($specs == null) {
      $specs = ChartIndex::getSpecs($id);
    }
    if (isset($specs['title'])) {
      $title = $specs['title'];
    } else {
      $a = explode('-', $id);
      $axes = ChartIndex::$AXES[$a[0]];
      $sex = ChartIndex::$SEXES[$a[1]];
      $age = ChartIndex::$AGES[$a[2]];
      $pub = ($specs['type'] == ChartIndex::TYPE_GROWTH_WHO) ? 'WHO' : 'CDC'; 
      $title = "[$pub] $axes: $sex $age";
    }
    return $title;
  }
  private static function getImg($id, $specs) {
    switch ($specs['type']) {
      case ChartIndex::TYPE_GROWTH_CDC:
      case ChartIndex::TYPE_GROWTH_WHO:
        return "img/charts/$id.png?" . Version::getUrlSuffix();
      case ChartIndex::TYPE_VITALS_BY_DATE:
        return null;
    }
  }
  private static function getFilters($sex, $age) {
    $filters = array();
    $sex = ($sex == Client0::MALE) ? '-boys' : '-girls';
    $filters[] = 'vitals-';
    if ($age >= 2) {
      $filters[] = "$sex-2t20y";
    }
    $filters[] = "$sex-0t2y";
    $filters[] = "$sex-0t36m";
    return $filters;
  }
}
?>