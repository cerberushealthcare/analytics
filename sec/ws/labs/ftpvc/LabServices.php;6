<?php
ini_set("soap.wsdl_cache_enabled", "0"); // disabling WSDL cache
set_include_path('../../');
require_once 'php/data/rec/sql/HL7_Labs.php';
/*
 * Lab Web Services
 * @author Warren Hornsby
 */
$server = new SoapServer('LabServices.wsdl');
$server->addFunction('postMessage');
$server->handle();
/**
 * @param stdClass $post
 * @return LabServicesResult
 */
function postMessage($post) {
  Logger::debug_r($post, 'postMessage');
  $post = LabServicesPost::from($post);
  Logger::debug_r($post, 'LabServicesPost');
  try {
    HL7_Labs::import_fromWebService($post);
    return LabServicesResult::asOk();
  } catch (LabLoginInvalidEx $e) {
    Logger::logBatchException('LabServices', $e, 'LS');
    return LabServicesResult::asFail_forInvalidCred();
  } catch (Exception $e) {
    $id = Logger::logBatchException('LabServices', $e, 'LS');
    return LabServicesResult::asFail_forAppError($id);
  }
}
//
class LabServicesResult {
  public $status;
  public $errorMsg;
  //
  static function asOk() {
    $me = new static();
    $me->status = 'OK';
    return $me;
  }
  static function asFail($errorMsg) {
    $me = new static();
    $me->static = 'FAIL';
    $me->errorMsg = $errorMsg;
    return $me;
  }
  static function asFail_forInvalidCred() {
    $me = static::asFail('Invalid Credentials');
    return $me;
  }
  static function asFail_forAppError($id) {
    $me = static::asFail("Application Error $id");
    return $me;
  }
}
class LabServicesPost {
  public $uid;
  public $pw;
  public $providerId;
  public $patientId;  // optional
  public $msg;  // HL7
  //
  static function from($post) {
    $me = new static();
    $me->uid = $post->credentials->id;
    $me->pw = $post->credentials->password;
    $me->providerId = $post->account->providerId;
    if (isset($post->account->patientId))
      $me->patientId = $post->account->patientId;
    $me->msg = $post->message;
    return $me;
  }
}
