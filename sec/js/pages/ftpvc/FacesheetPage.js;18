var SOURCE_NEWCROP = 1;
/**
 * Facesheet
 * Global static
 * Instance assigned to global variable: page
 * @author Warren Hornsby
 */
var FacesheetPage = page = {
  cid:null,
  fs:null,
  //
  working:Html.Window.working,
  load:function(query) {
    Page.setEvents();
    var as = _$('bodyContent').getTagsByClass('A', 'fscap');
    for (var i = 0; i < as.length; i++) 
      as[i].hideFocus = 'hideFocus';
    //Pop.Log.show();
    if (Page.browser.isMsie())
      this.setPrintEvents();
    //this.loadPolling();
    this.cid = query.id;
    Page.sessid = query.sess;
    if (me.perm.act == 0)
      this.setInact();
    DocTile.create(_$('DocTile'));
    ProcTile.create(_$('ProcTile'));
    DiagTile.create(_$('DiagTile'));
    MedTile.create(_$('MedTile'));
    CdsTile.create(_$('CdsTile'));
    PortalTile.create(_$('PortalTile'));
    if (this.cid == null)
      Page.Nav.goPatients();
    Page.work(function() {
      page._getFacesheet(query);
    })
  },
  setInact:function() {
    page.pNewAppt = page.inact;
    page.pAppt = page.inact;
    page.pPopVitals = page.inact;
    page.pNewDoc = page.inact;
    page.pNewMsg = page.inact;
    AllerTile.pop = page.inact;
    MedTile.pop = page.inact;
    DemoTile.pop = page.inact;
    NotepadTile.pop = page.inact;
    DiagTile.pop = page.inact;
    ImmunTile.pop = page.inact;
    TrackTile.pop = page.inact;
    HxTile.pop = page.inact;
    CdsTile.pop = page.inact;
    PortalTile.pop = page.inact;
    DocTile.pop = page.inact;
    VitalTile.pop = page.inact;
    Includer.getMsgPreviewer_pop = page.inact;
    Includer.getDocOpener_preview = page.inact;
  },
  inact:function() {
    showCritical('This function is only available for active accounts.');
  },
  setPrintEvents:function() {
    var width;
    var bc = _$('bodyContainer');
    Page.attachEvent('beforeprint', function() {
      width = bc.style.width;
      bc.style.width = '100%';
      _$('bodyContent').style.padding = '0';
    });
    Page.attachEvent('afterprint', function() {
      bc.style.width = width;
      _$('bodyContent').style.padding = '';
    });
  },
  onFocus:function() {
    var fs = this.fs;
    if (fs) {
      fs.polling().start();
      if (! Pop.isActive()) 
        fs.ajax().refetchIfChanged(this._loadFacesheet.bind(this));
    }
  },
  onBlur:function() {
    if (this.fs)
      this.fs.polling().stop();
  },
  /*
   * Refresh UI after facesheet change
   */
  facesheetChanged:function(fs) {
    if (fs) {
      var self = this;
      this.fs.ajax(this).refetch(function(fs) {
        self._loadFacesheet(fs);
      })
    }
  },
  /*
   * UI interactions
   */
  pRefresh:function() {
    Html.Window.working(true);
    page._getFacesheet();
  },
  pPopNotepad:function() {
    NotepadTile.pop();
  },
  pPopDemo:function() {
    DemoTile.pop();
  },
  pPopMeds:function() {
    MedTile.pop();
  },
  pNewCrop:function(dest, callback) {
    var self = this;
    Html.Window.working(true);
    NewCrop.validate(function() {
      NewCrop.sendFromFacesheet(dest, page.acceptNewCropRefresh.curry(callback));
    })
  },
  pNewCrop_compose:function(callback) {
    this.pNewCrop(null, callback);
  },
  requestNewCropRefresh:function() {
    NewCrop.refreshFromNewCrop(this.fs.clientId, null, false, page.acceptNewCropRefresh.curry(callback));
  },
  acceptNewCropRefresh:function(callback, f) {
    var fs = page.fs;
    fs.cuTimestamp = f.cuTimestamp;
    fs.allergies = f.allergies;
    fs.meds = f.meds;
    fs.activeMeds = f.activeMeds;
    if (callback)
      callback(f);
    else
      page.facesheetChanged(fs);
  },
  pPrint:function() {
    Ajax.Audit.printFacesheet(this.fs.client);
    call(window.print);
  },
  pDownload:function() {
    if (this.fs && this.fs.client) 
      CcdDownloader.pop(this.fs.client.clientId);
  },
  pPopHm:function() {
    CdsTile.pop();
  },
  pPopPortal:function() {
    PortalTile.pop();
  },
  pPopProcs:function() {
    ProcTile.pop();
  },
  pPopVitals:function(fvid) {
    VitalTile.pop(fvid);
  },
  pPopAllergies:function() {
    AllerTile.pop();
  },
  pPopDiagnoses:function() {
    DiagTile.pop();
  },
  pPopDocHx:function() {
    DocTile.pop();
  },
  pPopImmun:function() {
    ImmunTile.pop();
  },
  pPopTrack:function() {
    TrackTile.pop();
  },
  pPopMedSurgHx:function() {
    HxTile.pop(FaceUi.FACE_HX_TAB_MED);
  },
  pPopFamHx:function() {
    HxTile.pop(FaceUi.FACE_HX_TAB_FAM);
  },
  pPopSocHx:function() {
    HxTile.pop(FaceUi.FACE_HX_TAB_SOC);
  },
  pEditDoc:function(sid) {
    Includer.getDocOpener_open(sid);
  },
  pNewDoc:function() {
    var c = this.fs.client;
    Includer.getDocOpener_new(c.clientId, c.name);
  },
  pNewAppt:function() {
    Page.Nav.goSchedNew(this.fs.client.clientId);
  },
  pAppt:function(id) {
    Page.Nav.goSchedPop(id);
  },
  pNewMsg:function() {
    Page.Nav.goMessageNew(this.fs.client.clientId);
  },
  //
  _getFacesheet:function(query) {
    var self = this;
    Facesheet.ajax().fetch(this.cid, function(fs) {
      self._loadFacesheet(fs);
      Html.Window.working(false);
      NewCrop.loadFromFacesheet(me.perm.er, fs.client);
      if (query && query.pe)  // pop edit demo
        DemoTile.pop();
      else if (query && query.nc)  // NewCrop
        NewCrop.sendFromFacesheet(query.nc);
    })
  },
  _loadFacesheet:function(fs) {
    fs = (fs) ? fs : this.fs;
    fs.polling().start();
    this.fs = fs.bubble('onstale', this.fs_onstale);
    this.fs.activeLegacy = false;
    this.fs.activeErx = false;
    this._drawFacesheet();
  },
  _drawFacesheet:function() {
    var fs = this.fs;
    Page.setTitle(fs.client.name);
    _$('h1-name').setText(fs.client.name);
    DemoTile.load(fs);
    NotepadTile.load(fs);
    WorkflowTile.load(fs);
    AllerTile.load(fs);
    DiagTile.load(fs).bubble('ondraw', page._resizeDivs);
    MedTile.load(fs).bubble('ondraw', page._resizeDivs);
    HxTile.load(fs);
    CdsTile.load(fs).bubble('onupdate', page.pRefresh);
    PortalTile.load(fs).bubble('onupdate', page.pRefresh);
    DocTile.load(fs).bubble('onupdate', page.pRefresh);
    ProcTile.load(fs).bubble('onupdate', page.pRefresh);
    VitalTile.load(fs);
    ImmunTile.load(fs);
    TrackTile.load(fs);
    this._resizeDivs();
    this._renderPageBreaks();
    Polling.StaleFacesheet.start(fs);
    _$('fs-refresh').hide();
    _$('legacy-sticky').showIf(me.perm.er && me.perm.p > 1 && fs.activeLegacy);
    if (me.perm.er && fs.medsNcStale) {
      fs.medsNcStale = false;
      this.requestNewCropRefresh();
    }
  },
  fs_onstale:function() {
    _$('fs-refresh').show();
  },
  _renderPageBreaks:function() {
    this._clearPageBreaks();
    var divs = $$('print');
    var y = 0;
    var pgs = 1;
    var widow;
    for (var i = 0; i < divs.length; i++) {
      var div = divs[i];
      var ht = div.offsetHeight;
      y += ht;
      if ((pgs == 1 && y > 950) || (pgs > 1 && y > 760)) {
        if (pgs == 1) {
          divs[0].parentElement.insertBefore(createDiv('pgbrk', 'pghead1'), divs[0]);
        }
        pgs++;
        if (widow) {
          widow.parentElement.insertBefore(createDiv('pgbrk', 'pghead'), widow);
          y = widow.offsetHeight + ht;      
          widow = null;
        } else {
          div.parentElement.insertBefore(createDiv('pgbrk', 'pghead'), div);
          y = ht;
        }
      } else {
        widow = (divs[i].className == 'no-widow') ? divs[i] : null; 
      }
    }
    this._setPageBreaks();
  },
  _clearPageBreaks:function() {
    var divs = $$('pgbrk');
    while (divs.length)
      divs[0].parentElement.removeChild(divs[0]); 
  },
  _setPageBreaks:function() {
    var fs = this.fs;
    var h = 'Patient: ' + fs.client.name + ' (' + fs.client.uid + ')<br>DOB: ' + fs.client.birth + ' (age ' + fs.client.age + ')<br>';
    var divs = $$('pgbrk');
    var pgs = divs.length;
    for (var i = 0; i < divs.length; i++) {
      var p = 'Page ' + (i + 1) + ' of ' + pgs;
      divs[i].innerHTML = (i == 0) ? p : h + p;
    }
  },
  _resizeDivs:function() {
    syncHeights([MedTile.table, DiagTile.table]);
    syncHeights(['medhx-box', 'famhx-box', 'sochx-box']);
    syncHeights(['imm-box', 'track-box']);
  }
};
/**
 * Tiles
 */
var DemoTile = {
  load:function(fs) {
    var c = fs.client;
    if (c.img) { 
      _$('empty-photo').invisible();
      _$('photo').show().src = 'face-image.php?id=' + c.img;
      _$('photo').setPosition('absolute');
      //Html.Animator.pulse(_$('photo'), 2, 0.1);
    } else {
      _$('empty-photo').visible();
      _$('photo').hide();
    }
    _$('dem-cid').setText(c.uid);
    _$('dem-dob').setText(c.birth);
    _$('dem-age').setText(c.age + ' ' + c._sex.toLowerCase());
    _$('dem-lbl-flags').setText('');
    _$('dem-flags').setText('');
    var parents = [];
    if (c.Address_Father && c.Address_Father.name) parents.push(c.Address_Father.name);
    if (c.Address_Mother && c.Address_Mother.name) parents.push(c.Address_Mother.name);
    if (parents.length) {
      _$('dem-lbl-flags').setText('Parent(s):');
      _$('dem-flags').html(bulletJoin(parents)).setClass('ro');
    }    
    if (c.cdata5 || c.cdata6) {
      var flags = [];
      if (c.cdata5) flags.push('Living Will');
      if (c.cdata6) flags.push('Power of Attorney');
      _$('dem-lbl-flags').setText('On File:');
      _$('dem-flags').html(bulletJoin(flags)).setClass('ro red');
    }
    //$('portrait').className = (c.sex == 'F') ? 'pf' : 'pm';
    var pl = new ProfileLoader('dem-lbl-addr', 'dem-addr');
    var a = c.Address_Home;
    pl.add('Address:', bulletJoin([a.addr1, a.addr2, a.csz], true));
    pl = Map.combine([pl, {
      phones:[],
      phoneLabel:'Phone(s):',
      addPhoneBy:function(label, addr) {
        if (addr)
          if (addr.phone1) 
            this.addPhone(addr.phone1 + ' (' + label + ')');
          if (addr.phone2) 
            this.addPhone(addr.phone2 + ' (' + label + ')');
          if (addr.phone3) 
            this.addPhone(addr.phone2 + ' (' + label + ')');
      },
      addPhone:function(text) {
        this.phones.push(text);
        if (this.phones.length > 1)
          this.writePhone();
      },
      writePhone:function() {
        if (this.phones.length) {
          this.add(this.phoneLabel, bulletJoin(this.phones, true));
          this.phones = [];
          this.phoneLabel = null;
        }
      }
    }]);
    pl.addPhone(AddressUi.formatPhone(a.phone1, a.phone1Type));
    if (a.phone2) 
      pl.addPhone(AddressUi.formatPhone(a.phone2, a.phone2Type));
    pl.addPhoneBy('Emer', c.Address_Emergency);
    pl.addPhoneBy('Father', c.Address_Father);
    pl.addPhoneBy('Mother', c.Address_Mother);
    pl.addPhoneBy('Spouse', c.Address_Spouse);
    pl.addPhoneBy('RX', c.Address_Rx);
    pl.writePhone();
    var ulp = _$('ul-dem-prt').clean();
    if (c.icards) {
      this._loadIcard(ulp, c.icards[0], 'Insurance1:');
      if (c.icards.length > 1) 
        this._loadIcard(ulp, c.icards[1], 'Insurance2:');
    }
    if (c.cdata1) {
      this._addUlp(ulp, 'Custom1:', c.cdata1);
    }
    if (c.cdata2) {
      this._addUlp(ulp, 'Custom2:', c.cdata2);
    }
    if (c.cdata2) {
      this._addUlp(ulp, 'Custom3:', c.cdata3);
    }
  },
  _addPhone:function(pl, label, addr) {
    if (addr && addr.phone1)
      pl.add(label, AddressUi.formatPhone(addr.phone1, addr.phone1Type));
  },
  _loadIcard:function(ulp, ic, lbl) {
    var a = [ic.planName, ic.groupNo, ic.subscriberNo, ic.dateEffective];
    this._addUlp(ulp, lbl, bulletJoin(a));
  },
  _addUlp:function(ulp, lbl, html) {
    var li = _$(ulp).li();
    li.appendChild(createLabel('first', lbl));
    li.appendChild(createSpan('ro', null, null, html));
  },
  pop:function() {
    Includer.getPatientEditor_pop(page.fs.client, null, 
      function(client) {
        page.pRefresh();
      });
  }
}
var NotepadTile = {
  load:function(fs) {
    if (fs.client.notes) {
      _$('notepad').setClass('full');
      _$('notepad-empty').hide();
      _$('notepad-text').show().html(fs.client.notes);
    } else {
      _$('notepad').setClass('');
      _$('notepad-empty').show();
      _$('notepad-text').hide();
    }
  },
  pop:function() {
    var fs = page.fs;
    if (fs.client.notes) {
      Html.InputText.$("pop-cn-text").setValue(String.brToCrlf(fs.client.notes));
    } else {
      Html.InputText.$("pop-cn-text").setValue("");
    }
    Pop.show("pop-cn", 'pop-cn-text');
  },
  pSave:function() {
    var fs = page.fs;
    var text = _$("pop-cn-text").getValue();
    if (String.isBlank(text)) {
      text = null; 
    } else {
      text = String.crlfToBr(text);
    }
    Pop.close();
    Html.Window.working(true);
    Ajax.Facesheet.Patients.saveNotes(fs.client.clientId, text, 
      function(fs) {
        Html.Window.working(false);
        page.facesheetChanged(fs);
      });
  },
  pDelete:function() {
    setValue("pop-cn-text", "").select();
  }
}
var WorkflowTile = {
  load:function(fs) {
    this.renderWfVital(fs);
    this.renderWfAppt(fs);
    this.renderWfDocs(fs);
  },
  renderWfVital:function(fs) {
    var div = _$('wf-vit').clean();
    var a;
    if (fs.workflow.vital) {
      a = Html.Anchor.create('qcmd qvital').html('Vitals <span>(' + bulletJoin(fs.workflow.vital.all) + ')</span>').into(div);
      a.onclick = page.pPopVitals.bind(page, fs.workflow.vital.dataVitalsid);
    } else {
      a = Html.Anchor.create('qicon qnew-vital', "Record Today's Vitals...", page.pPopVitals.bind(page)).into(div);
    }
    if (a.getWidth() > 400) 
      a.setWidth(400);
  },
  renderWfAppt:function(fs) {
    var a;
    var href;
    var div = _$('wf-appt').clean();
    if (fs.workflow.appt) {
      var e = fs.workflow.appt;
      a = Html.Anchor.create('qcmd qappt', e.date + ' ' + e.time + ' - ' + e.type, page.pAppt.bind(page, e.id)).into(div);
    } else {
      a = Html.Anchor.create('qicon qnew-appt', "Record Today's Vitals...", page.pNewAppt.bind(page)).into(div);
      a.id = 'qAppt';
    }
  },
  renderWfDocs:function(fs) {
    var a;
    var href;
    var ul = _$('wf-doc-ul').clean();
    if (fs.workflow.docs) {
      var li = ul.li();
      for (var i = 0; i < fs.workflow.docs.length; i++) {
        var e = fs.workflow.docs[i];
        a = Html.Anchor.create('qcmd qnote').html(e.label + ' <br><span>(' + e.date + ')</span>');
        if (me.tab) {
          a.href = Page.url('new-console.php', {'sid':e.id});
          a.target = '_blank';
        } else {
          a.onclick = page.pEditDoc.bind(page, e.id);
        }
        li.appendChild(a);
      }
    }
    var ul = ul.li();
    if (me.userType < 3) {
      ul.appendChild(Html.Anchor.create('qicon qnew-note', 'Create New Document...', page.pNewDoc.bind(page)));
    }
    ul.appendChild(Html.Anchor.create('qicon qnew-msg', 'New Message...', page.pNewMsg.bind(page)));
  }
}
var AllerTile = {
  load:function(fs) {
    _$('all-tbl').style.border = (fs.activeAllers.length) ? '2px dashed red' : '';
    _$('allprt-tbl').style.border = (fs.activeAllers.length) ? '2px dashed red' : '';
    var t = new TableLoader('all-tbody', 'off', 'all-div');
    var tp = new TableLoader('allprt-tbody', 'off', 'allprt-div');
    var self = this;
    var click = function(){self.pop()};
    if (fs.activeAllers.length) {
      for (var i = 0; i < fs.activeAllers.length; i++) {
        var allergy = fs.allergies[fs.activeAllers[i]];
        var cls = 'fs aller';
        if (me.perm.er && allergy.source != SOURCE_NEWCROP) {
          fs.activeLegacy = true;
          cls = 'fs legacy';
        }
        if (allergy.source == SOURCE_NEWCROP) {
          fs.activeErx = true;
        }
        var html = bulletJoin(allergy.reactions);
        t.createTrTd();
        //t.append(createAnchor(null, null, cls, allergy.agent, null, click), createSpan('lpad', null, null, html));
        t.append(Html.Anchor.create(cls, allergy.agent, click), Html.Span.create('lpad').html(html));
        tp.createTrTd();
        tp.append(Html.Anchor.create(cls, allergy.agent, click), Html.Span.create('lpad').html(html));
      }
    } else {
      t.createTrTd();
      t.tr.className = '';
      //t.append(createAnchor(null, null, 'fsnone', '(None Known)', null, click));
      t.append(Html.Anchor.create('fsnone', '(None Known)', click));
      tp.createTrTd();
      tp.tr.className = '';
      tp.append(Html.Anchor.create('fsnone', '(None Known)', click));
    }
  },
  pop:function() {
    Includer.getFaceAllergies_pop(page.fs, true, [page.facesheetChanged, page]);
  }
}
var ImmunTile = {
  load:function(fs) {
    _$('imm-sum').html(this.sumAnchor(fs.immuns));
  },
  pop:function() {
    Includer.getFaceImmun_pop(page.fs, true, [page.facesheetChanged, page]);    
  },
  sumAnchor:function(immuns) {
    if (Array.isEmpty(immuns)) 
      return null;
    var a = [];
    for (var i = 0; i < immuns.length; i++) {
      var imm = immuns[i];
      a.push(imm.name);
    }
    return "<a class='fs0' href='javascript:ImmunTile.pop()'>" + bulletJoin(a) + "</a>";
  }
}
var TrackTile = {
  load:function(fs) {
    _$('trk-sum').html(this.sumAnchor(fs.tracking));
  },
  pop:function() {
    Includer.getFaceTrack_pop(page.fs, true, [page.facesheetChanged, page]);    
  },
  sumAnchor:function(trackItems) {
    if (Array.isEmpty(trackItems)) 
      return null;
    var stat = [];
    var rest = [];
    for (var i = 0; i < trackItems.length; i++) {
      var item = trackItems[i];
      if (item.priority == C_TrackItem.PRIORITY_STAT)
        stat.push(item.trackDesc);
      else
        rest.push(item.trackDesc);
    }
    var h = [];
    if (stat.length > 0)
      h.push("<a class='fstat' href='javascript:TrackTile.pop()'>" + bulletJoin(stat) + "</a>");
    if (rest.length > 0)
      h.push("<a class='f0' href='javascript:TrackTile.pop()'>" + bulletJoin(rest) + "</a>");
    return bulletJoin(h);
  }
}
var HxTile = {
  load:function(fs) {
    this.loadMedHx(fs);
    this.loadFamHx(fs);
    this.loadSocHx(fs);
  },
  loadMedHx:function(fs) {
    var tp = new TableLoader('medhx-prt-tbody', 'off', 'medhx-prt-div');
    for (var proc in fs.medhx.recs) {
      var rec = fs.medhx.recs[proc];
      var date = DateUi.extractDate(bulletJoin(rec.date));
      var type = bulletJoin(rec.type);
      var rx = bulletJoin(rec.rx);
      var comment = bulletJoin(rec.comment);
      tp.createTr();
      tp.createTd('fs', proc);
      tp.createTd('w80', null, bulletJoin([date, type, rx, comment], true));
    }
    if (tp.rows() == 0) {
      tp.createTrTd('fs', '(None)');
    }
    tp = new TableLoader("surghx-prt-tbody", "off", "surghx-prt-div");
    for (var proc in fs.surghx.recs) {
      var rec = fs.surghx.recs[proc];
      var date = DateUi.extractDate(bulletJoin(rec.date));
      var type = bulletJoin(rec.type);
      var comment = bulletJoin(rec.comment);
      tp.createTr();
      tp.createTd("fs", proc);
      tp.createTd("w80", null, bulletJoin([date, type, comment], true));
    }
    if (tp.rows() == 0) {
      tp.createTrTd("fs", "(None)");
    }
    
    this.renderHxSummary(fs);    
  },
  renderHxSummary:function(fs) {
    var as = [];
    as.pushIfNotNull(this.hxSumProcsAnchor(fs.medhx.recs, FaceUi.FACE_HX_TAB_MED));
    as.pushIfNotNull(this.hxSumProcsAnchor(fs.surghx.recs, FaceUi.FACE_HX_TAB_SURG));
    if (as.length > 0) {
      _$('fshx-sum').html(bulletJoin(as));
    }
  },
  hxSumProcsAnchor:function(recs, tab) {
    var procs = [];
    for (var proc in recs) {
      procs.push(proc);
    }
    return this.hxSumAnchor(procs, tab);
  }, 
  hxSumAnchor:function(a, tab) {
    if (Array.isEmpty(a)) return null;
    return "<a class='fs0' href='javascript:HxTile.pop(" + tab + ")'>" + bulletJoin(a) + '</a>';  
  },
  loadFamHx:function(fs) {
    this.renderFamhxSummary(fs);
  },
  renderFamhxSummary:function(fs) {
    _$('famhx-sum').html(this.hxSumAnchor(fs.famhx.sopts, FaceUi.FACE_HX_TAB_FAM));
  },
  loadSocHx:function(fs) {
    var tp = new TableLoader('sochx-prt-tbody', 'off', 'sochx-prt-div');
    var topics = [];  // topics that have values
    for (var topic in fs.sochx) {
      var tpvals = [];  // ['bullet-rec-values',..]
      var rec = fs.sochx[topic];
      var dsyncCombo = FaceUi.getDsyncCombo(topic);
      for (var dsyncId in rec) {
        var values = rec[dsyncId].v;
        dsyncCombo = rec[dsyncId].d;
        if (dsyncCombo) {
          tpvals.push(bulletJoin(values) + '<br>');
        } else {
          tpvals.push(bulletJoin(values));
        }
      }
      var s = bulletJoin(tpvals, true);
      if (s != '') {
        topics.push(topic);
        tp.createTr();
        tp.createTd('fs', topic);
        tp.createTd('w80', null, s);
      }
    }
    if (tp.rows() == 0) {
      tp.createTrTd('fs', '(None)');
    }
    if (topics.length) {
      var a = "<a class='fs0' href='javascript:HxTile.pop(FaceUi.FACE_HX_TAB_SOC)'>" + bulletJoin(topics) + '</a>';
      _$('sochx-sum').html(a);
    }    
  },
  pop:function(tab) {
    Includer.getFaceHx_pop(page.fs, tab, true, [page.facesheetChanged, page]);    
  }
}
var VitalTile = {
  load:function(fs) {
    var self = this;
    var t = new TableLoader('vit-tbody', 'off', 'vit-div');
    var tp = new TableLoader('vitprt-tbody', 'off', 'vit-div');
    if (fs.vitals) {
      for (var i = 0; i < fs.vitals.length; i++) {
        var vital = fs.vitals[i];
        var click = 'page.pPopVitals(' + vital.dataVitalsid + ')';
        t.createTrTd();
        //t.append(createAnchor(null, null, 'fs vital', vital.date, null, click));
        t.append(Html.Anchor.create('fs vital', vital.date, click));
        if (vital.all) {
          //var div = createDiv(null, 'vit-text', null, bulletJoin(vital.all));
          t.append(Html.Div.create('vit-text').html(bulletJoin(vital.all)));
        }
        tp.createTrTd('main');
        tp.append(Html.Anchor.create('fs vital', vital.date, click));
        tp.createTd(null, vital.pulse);
        tp.createTd(null, vital.resp);
        tp.createTd('nowrap', vital.bp);
        tp.createTd(null, vital.temp);
        tp.createTd(null, this._wtText(vital));
        tp.createTd(null, this._htText(vital));
        tp.createTd(null, vital.bmi);
        tp.createTd(null, vital.wc);
        tp.createTd(null, vital.hc);
        tp.createTd('nowrap', vital.o2);
      }
    }
  },
  _wtText:function(vital) {
    var text = null;
    if (vital.wt) {
      text = vital.wt;
      if (vital.wtUnits) {
        text += ' ' + (vital.wtUnits == 'Pounds' ? 'lbs' : 'kg');
      }
    }
    return text;
  },
  _htText:function(vital) {
    var text = null;
    if (vital.height) {
      text = vital.height;
      if (vital.htUnits) {
        text += ' ' + (vital.htUnits == 'inches' ? 'in' : 'cm');
      }
    }
    return text;
  },
  pop:function(fvid) {
    Includer.getFaceVitals_pop(page.fs, fvid, true, [page.facesheetChanged, page]);
  }
}
/**
 * TableLoader FaceTable
 */
FaceTable = {
  create:function(container, tableCls, wrapCls) {
    return Html.TableLoader.create(container, tableCls, wrapCls || 'fstab noscroll').extend(function(self) {
      return {
        onselect:function(rec) {},
        add:function(rec, tr) {},
        //
        init:function() {
          self.noWorking();
          self.spacer = self.wrapper.append(Html.Div.create().setHeight(20));
        },
        reset:self.reset.prepend(function() {
          self.spacer.show();
        }),
        load:function(recs) {
          if (! self.prepended) 
            self.prepended = self.ondraw = self.ondraw.prepend(function() {
              self.spacer.hide();
            })
          self.recs = recs;
          self.reset();
          self.draw();
          if (Array.isEmpty(recs)) 
            self.addNone();
        },
        addNone:function() {
          self.tbody().tr().td(Html.Anchor.create('fsnone', '(None Recorded)').bubble('onclick', self.onselect));
        }
      }
    })
  }
}
/**
 * Tile DiagTile
 *   FaceTable table
 */
DiagTile = {
  create:function(container) {
    var My = this;
    return DiagTile = Html.Tile.create(container.clean()).extend(function(self) {
      return {
        ondraw:function() {},
        //
        init:function() {
          self.table = My.Table.create(self).bubble('onselect', self.table_onselect).bubble('ondraw', self);
          self.cmdtile = Html.Tile.create(self, 'cmdtile').add(Html.Anchor.create('icdi', 'Lookup ICD...', Header.icdLook)).hide();
        },
        load:function(fs) {
          self.recs = fs.diagnoses;
          self.table.load(self.recs);
          self.cmdtile.showIf(me.perm.er && me.userType < 3);
          return self;
        },
        pop:function(rec) {
          Includer.getFaceDiagnoses_pop(page.fs, true, [page.facesheetChanged, page]);
        },
        //
        table_onselect:function(rec) {
          self.pop(rec);
        }
      }
    })
  },
  Table:{
    create:function(container) {
      return FaceTable.create(container, 'fsy').extend(function(self) {
        return {
          onselect:function(rec) {},
          //
          add:function(rec, tr) {
            if (rec.active)
              tr.select(Html.Anchor.create('fs', rec._name), rec, null, 'wrap');
          }
        }
      })
    }
  }
}
/**
 * Tile MedTile
 *   FaceTable table
 */
MedTile = {
  create:function(container) {
    var My = this;
    return MedTile = Html.Tile.create(container.clean()).extend(function(self) {
      return {
        ondraw:function() {},
        //
        init:function() {
          self.table = My.Table.create(self).noWorking().bubble('onselect', self.table_onselect).bubble('ondraw', self);
          self.cmdtile = Html.Tile.create(self, 'cmdtile').add(Html.Anchor.create('erxi', 'Prescribe...', page.pNewCrop)).hide();
        },
        load:function(fs) {
          self.recs = fs.activeMeds;
          self.table.load(self.recs);
          self.cmdtile.showIf(me.perm.er && me.userType < 3);
          return self;
        },
        pop:function(rec) {
          Includer.getFaceMeds_pop(page.fs, true, [page.facesheetChanged, page]);
        },
        //
        table_onselect:function(rec) {
          self.pop(rec);
        }
      }
    })
  },
  Table:{
    create:function(container) {
      return FaceTable.create(container, 'fsb').extend(function(self) {
        return {
          onselect:function(rec) {},
          //
          add:function(rec, tr) {
            if (rec._none) {
              tr.select(Html.Anchor.create('fs', rec._name));
            } else {
              var cls = 'fs';
              if (rec.source == SOURCE_NEWCROP) {
                page.fs.activeErx = true;
              } else if (me.perm.er) {
                page.fs.activeLegacy = true;
                cls = 'fs legacy';
              }
              var name = (! rec.expires) ? rec.name : bulletJoin([rec.name,' <span>' + rec.expireText + '</span>']);
              tr.select(Html.Anchor.create(cls, name));
              Html.Span.create('lpad', rec.text).into(tr._cell);
            }
          }
        }
      })
    }
  }
}
/**
 * Tile ProcTile
 */
ProcTile = {
  create:function(parent) {
    return ProcTile = Html.Tile.create(parent.clean()).extend(function(self) {
      return {
        onupdate:function(fs) {},
        //
        load:function(fs) {
          self.fs = fs;
          // TODO
          return self;
        },
        pop:function() {
          ProcsPop.pop(self.fs).bubble('onupdate', self);
        }
      }
    })
  }
}
/**
 * Tile DocTile
 *   TableLoader table   
 */
DocTile = {
  create:function(container) {
    var My = this;
    return DocTile = Html.Tile.create(container.clean()).extend(function(self) {
      return {
        onupdate:function() {},
        //
        init:function() {
          self.table = My.Table.create(self).noWorking().bubble('onselect', self.table_onselect);
        },
        load:function(fs) {
          self.fs = fs;
          self.recs = fs.docstubs;
          self.table.load(self.recs);
          return self;
        },
        pop:function(rec) {
          DocHistoryPop.pop(self.fs, rec).bubble('onupdate', self);
        },
        //
        table_onselect:function(rec) {
          self.pop(rec);
        }
      }
    })
  },
  Table:{
    create:function(container) {
      return Html.TableLoader.create(container, 'fsgr single').extend(function(self) {
        return {
          onselect:function(rec) {},
          //
          rowBreaks:function(rec) {
            return [rec.date];
          },
          add:function(rec, tr) {
            tr.td(rec.date, 'bold').td(rec._type).select(AnchorDocStub);
          }
        }
      })
    }
  }
}
/**
 * Tile CdsTile
 *   FaceTable table   
 */
CdsTile = {
  create:function(container) {
    var My = this;
    return CdsTile = Html.Tile.create(container.clean()).extend(function(self) {
      return {
        onupdate:function() {},
        //
        init:function() {
          self.table = My.Table.create(self).noWorking().bubble('onselect', self.table_onselect);
        },
        load:function(fs) {
          self.fs = fs;
          self.recs = fs.hms.actives();
          self.table.load(self.recs);
          return self;
        },
        pop:function(rec) {
          CdsPop.pop(self.fs, rec).bubble('onupdate', self);
        },
        //
        table_onselect:function(rec) {
          self.pop(rec);
        }
      }
    })
  },
  Table:{
    create:function(container) {
      return FaceTable.create(container, 'fsp', 'fstab noscroll').extend(function(self) {
        return {
          onselect:function(rec) {},         
          //
          rowBreaks:function(rec) {
            return [rec.ipc];
          },
          add:function(rec, tr) {
            tr.select(CdsAnchor.create(rec)).td(rec._comment);
          },
          addNone:function() {
            self.tbody().tr().td(Html.Anchor.create('fsnone', '(None Apply)').bubble('onclick', self.onselect));
          }
        }
      })
    }
  }
}
/**
 * Tile PortalTile
 */
PortalTile = {
  create:function(container) {
    var My = this;
    return PortalTile = Html.Tile.create(container.clean()).extend(function(self) {
      return {
        onupdate:function() {},
        //
        init:function() {
          self.tile = Html.Tile.create(self).addClass('mt5 ml5').hide();
          self.table = Html.TableCol.create(self.tile, [ 
            self.portal = PortalAnchorTile.create(self),
            self.lastLogin = My.LastLogin.create(self)]);
        },
        load:function(fs) {
          self.fs = fs;
          self.portal.load(fs);
          self.lastLogin.load(fs);
          self.tile.show();
          return self; 
        },
        pop:function() {
          self.portal.pop();
        }
      }
    })
  },
  LastLogin:{
    create:function(container) {
      return Html.Tile.create(container, 'ml20').extend(function(self) {
        return {
          init:function() {
            self.form = Html.UlEntry.create(self, function(ef) {
              ef.line().lbl('Status', 'nopad').ro('_status').lbl('Last Login').ro('_lastLogin');
            }).hide();
          },
          load:function(fs) {
            self.rec = fs.portalUser;
            if (self.rec) {
              self.form.load(self.rec).show();
            }
          }
        }
      })
    }
  }
}
/* ui.js remnants */
function syncHeights(ids, min) {
  var h = (min) ? min : 0;
  for (var i = 0; i < ids.length; i++) {
    var hi = _$(ids[i]).getDim().height;
    if (hi > h) h = hi;
  }
  for (var i = 0; i < ids.length; i++) {
    _$(ids[i]).setHeight(h);
  }  
}
